###############################################################################
## Setup                                                                     ##
# R to use
# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a;R

projectDir <- "/camp/stp/babs/working/boeings/Projects/boeings/stefan.boeing/491_demo_timecourse_GSE134515/"

setwd(paste0(projectDir, "scripts/bulkRNAseq_workflow "))

# if (!require("remotes")){
#   install.packages("remotes")
# }

# remotes::install_github("rstudio/renv")

if (!file.exists("renv.lock")){
  renv::init()
} else {
  renv::restore(prompt=FALSE)
}


##                                                                           ##
###############################################################################

###############################################################################
## Create NF-core script                                                     ##

## Recommended R-version
# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a;R



FNbase <- paste0(projectDir , "input_data/id_mappings.csv")

library(dplyr)
dfBase <- readr::read_csv(FNbase) %>%
    dplyr::select(run_accession, sample_title) %>%
    dplyr::distinct() %>%
    dplyr::rename(sample.id=sample_title)

dfBase[["f_Timepoint"]] <- paste0("T", sapply(dfBase$sample.id, function(x) unlist(strsplit(x, "_"))[2]))
dfBase[["f_Genotype"]] <- sapply(dfBase$sample.id, function(x) unlist(strsplit(x, "_"))[1])
dfBase[["timepoint"]] <-  as.numeric(gsub("T", "", gsub("h", "", dfBase$f_Timepoint)))

dfBase <- dfBase %>%
    dplyr::group_by(f_Genotype) %>%
    dplyr::arrange(desc(f_Genotype), timepoint)

dfBase[["dataseries"]] <- dfBase[["f_Genotype"]]

dfBase[["sample.group"]] <- paste0(dfBase$dataseries, "_", dfBase$f_Timepoint)

readr::write_delim(
    dfBase,
    paste0(projectDir, "scripts/bulkRNAseq_workflow/design/basedesign.txt"),
    delim = "\t"
)


## Create NF core settings file
FASTQ_files <- list.files(paste0(projectDir, "FASTQ_files/"))
FASTQ_files <- FASTQ_files[grep(".gz", FASTQ_files)]

df <- data.frame(
    FASTQ_files = FASTQ_files,
    fastqFN = paste0(projectDir, "FASTQ_files/", FASTQ_files)
)

df[["run_accession"]] <- sapply(df$FASTQ_files, function(x) unlist(strsplit(x, ".fastq"))[1])

dfAllign <- dplyr::full_join(
  df,
  dfBase,
  by= c("run_accession"="run_accession")
)

dfAllign[["strandedness"]] <- "reverse"
dfAllign[["fastq_1"]] <- dfAllign$fastqFN
dfAllign[["fastq_2"]] <- ""
dfAllign[["sample"]] <- dfAllign$sample.id

#sample,fastq_1,fastq_2,strandedness
dfSettings <- data.frame(
    sample = dfAllign$sample,
    fastq_1 = dfAllign$fastq_1,
    fastq_2 = dfAllign$fastq_2,
    strandedness = dfAllign$strandedness
)

NFcoreSettingsFN <- paste0(projectDir, "scripts/bulkRNAseq_workflow/design/NFcore.settings.csv")

readr::write_csv(
    dfSettings,
    NFcoreSettingsFN
)


## Create NF-core RNA-Seq script
workdir <- paste0(projectDir, "workdir")
if (!dir.exists(workdir)){
    dir.create(workdir)
}

genomeFa <- paste0(
  "/camp/svc/reference/Genomics/babs/mus_musculus/ensembl/GRCm38/",
  "release-89",
  "/genome/Mus_musculus.GRCm38.dna_sm.toplevel.fa"
)

GTFfile <- paste0(
  "/camp/svc/reference/Genomics/babs/mus_musculus/ensembl/GRCm38/",
  "release-89",
  "/gtf/Mus_musculus.GRCm38.",
  "89",
  ".rnaseqc.gtf"
)
project_id <- "GSE134515"

tempShellScriptVector <- as.vector(NULL, mode = "character")
tempShellScriptVector <- c(
  tempShellScriptVector,
  "###############################################################################",
  "\n",
  "## Creating NF-core bulk RNA-Seq cript                                       ##",
  "\n",
  "module purge",
  "module load Nextflow/21.10.3",
  "module load Singularity/3.6.4",
  "",
  "export NXF_WORK=`echo $PWD/work/ | sed 's:^/camp/stp/babs/working/:/camp/stp/babs/scratch/:'`",
  "if [ ! -d '$NXF_WORK' ]; then",
  "    ln -s $NXF_WORK .",
  "fi",
  "export NXF_SINGULARITY_CACHEDIR=/camp/apps/misc/stp/babs/nf-core/singularity/rnaseq/3.6/",
  "",
  "sbatch --time=12:00:00 --wrap ' \\",
  "nextflow run nf-core/rnaseq \\",
  "-r 3.6 \\",
  paste0("--input ", NFcoreSettingsFN, " \\"),
  paste0("--outdir ", workdir, " \\"),
  "-profile crick \\",
  "--aligner star_rsem \\",
  "--email stefan.boeing@crick.ac.uk \\",
  paste0("--fasta ", genomeFa, " \\"),
  paste0("--gtf ", GTFfile, " \\"),
  "-resume"
  paste0("' --job-name=NFCR_",
         project_id, " -c 12 --mem-per-cpu=7000 -o NFC.slurm"
  )
)

sink(paste0(projectDir, "scripts/nf.core.script.sh"))
scriptVec <- tempShellScriptVector
for (i in 1:length(scriptVec)){
  cat(scriptVec[i])
  cat("\n")
}

sink()

##                                                                           ##
###############################################################################

###############################################################################
## Run NF-core                                                               ##

sh scripts/nf.core.script.sh

##                                                                           ##
###############################################################################

###############################################################################
## File transfer and cleanup                                                 ##

if [ ! -d '$projectDir/data' ]; then
    mkdir $projectDir/data
fi

cp $projectDir/workdir/star_rsem/rsem.merged.gene_counts.tsv $projectDir/data/
cp $projectDir/workdir/star_rsem/rsem.merged.gene_tpm.tsv  $projectDir/data/

## Done                                                                      ##
###############################################################################
