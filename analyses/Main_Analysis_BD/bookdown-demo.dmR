---
output:
  bookdown::html_document2:
    includes:
      in_header: header.html
  bookdown::gitbook:
    includes:
      in_header: header.html

---
```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```

# Bulk RNA-Seq Analysis

  This is a _sample_ book written in **Markdown**. You can use anything that Pandoc's Markdown supports, e.g., a math equation $a^2 + b^2 = c^2$.

The **bookdown** package can be installed from CRAN or Github:

```{r eval=FALSE}
install.packages("bookdown")
# or the development version
# devtools::install_github("rstudio/bookdown")
```

Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading `#`.

To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): <https://yihui.name/tinytex/>.

```{r include=FALSE}
# automatically create a bib database for R packages
knitr::write_bib(c(
  .packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
```

```{r create_report_params, eval=T, results="asis"}

## Try to retrieve project data from db ##
db.pwd2 <- "zU3ufd9L"
db.user2 <- "reader"
host2 <- "clvd1-db-u-p-17.thecrick.org"
projectParams <- Obio@documentationParams

tryCatch({
    dbDB = DBI::dbConnect(
        drv = RMySQL::MySQL(),
        user = db.user2,
        password = db.pwd2,
        host = host2,
        dbname = "clarity_shadow"
    )
    dfProposal <-  DBI::dbGetQuery(
        dbDB,
        paste0("SELECT * FROM clarify_asf_proposals WHERE project_name ='",Obio@projectDetailList$lims.id,"'")
    )
    dbDisconnect(dbDB)
}, error = function(x) {
    message("Project Database could not be reached or has no entry in Obio@parameterList$lims.id for this analysis.")
})

###############################################################################
## Helper
firstup <- function(x) {
    substr(x, 1, 1) <- toupper(substr(x, 1, 1))
    x
}
##
###############################################################################


if (exists("dfProposal")){
    if (!is.na(dfProposal[1,"ProjectAlias"]) & dfProposal[1,"ProjectAlias"] != ""){
        projectParams[["title"]] = paste0(dfProposal[1,"ProjectAlias"], " - ", dfProposal[1,"project_name"])
    }

    if (!is.na(dfProposal[1,"project_user"]) & dfProposal[1,"project_user"] != ""){
        labString <- firstup(dfProposal[1,"user_lab"])
        labString <- substr(labString, 1, (nchar(labString) - 1))

        projectParams[["subtitle"]] = paste0(labString, " Lab - ", dfProposal[1,"project_user"])
        projectParams[["subtitle"]] <- gsub("^ Lab - ", "", projectParams[["subtitle"]])

    }

    if (!is.na(dfProposal[1,"proposal_text"]) & dfProposal[1,"proposal_text"] != ""){
        projectParams[["abstract"]] = dfProposal[1,"proposal_text"]


    }
}

## Escape all special characters
projectParams <- lapply(
  projectParams, function(x)
  #gsub("([.|()\\^{}+$*?]|\\[|\\])", "\\\\\1", x)
  gsub("([.|()/\\^{}+$*?]|\\[|\\])", " ", x)
)

projectParams <- lapply(
  projectParams, function(x)
  #gsub("([.|()\\^{}+$*?]|\\[|\\])", "\\\\\1", x)
  gsub("\\\n", " ", x)
)


```



---
title: "`r projectParams$title`"
subtitle:  "`r projectParams$subtitle`"
author:
    - Bioinformatics: Stefan Boeing^[The Francis Crick Institute, stefan.boeing@crick.ac.uk]
date: 'Compiled: `r format(Sys.Date(), "%B %d, %Y")`'

abstract: |
    "`r projectParams$abstract`"

description: "This is a minimal example of using the bookdown package to write a book. The output format for this example is bookdown::gitbook."
---

<!--chapter:end:index.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
```{r set_parameters_init, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "partB.set.parameters."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```


```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}

## Create gene annotation if it is not present ##
## To be activated ##
if (is.null(Obio@parameterList$path2GeneIDtable)){
    dfAnno <- biologicSeqTools2::createGeneNameTable(
        obj = Obio,
        biomart = "ENSEMBL_MART_ENSEMBL",
        selString = "mmusculus_gene_ensembl",
        host= "http://may2017.archive.ensembl.org",
        primaryAlignmentGeneID = "ENSMUSG",
        geneIDcolumn = "mgi_symbol"
    )
}

## For now we expect a gene annotation file to be specified already
Obio <- setCrickGenomeAndGeneNameTable(Obio)

# In the future this will be done using the more general
# biologicSeqTools2::setGenomeAndGeneNameTable
# function

## Create analysis folders in the working directory
Obio <- createAnalysisFolders(
    Obio
)

## Set additional parameters
Obio <- setDataBaseParameters(Obio)

## This can be upgraded to web retrieval of annotation data 
Obio <- addGeneAnnotation(Obio)

 
## Create shiny path for figure outputs ##           
shinyURL <- paste0(
    "https://",
    Obio@parameterList[["shinyBaseServerURL"]],
    "/shiny/boeings/",
    Obio@parameterList$project_id,
    "_app/"
)            
        
    

## Create outputfolders ##
# if (!dir.exists(paste0(Obio@parameterList$localWorkDir,Obio@parameterList$project_id))){
#     dir.create(paste0(Obio@parameterList$localWorkDir,Obio@parameterList$project_id))
# }

Obio@parameterList[["html_local"]] <- paste0(Obio@parameterList$folder, "html_local/")

if (!dir.exists(Obio@parameterList[["html_local"]])){
    dir.create(Obio@parameterList[["html_local"]])
}

Obio@parameterList[["reportFigDir"]] <- paste0(Obio@parameterList$html_local, "report_figures/")
if (!dir.exists(Obio@parameterList$reportFigDir)){
    dir.create(Obio@parameterList$reportFigDir)
}

pdfTemp <- paste0(Obio@parameterList$reportFigDir, "temp.pdf")

Obio@parameterList[["reportTableDir"]] <- paste0(Obio@parameterList$html_local, "report_tables/")
if (!dir.exists(Obio@parameterList$reportTableDir)){
    dir.create(Obio@parameterList$reportTableDir)
}


## Create data dir
Obio@parameterList[["data_dir"]] <- paste0(Obio@parameterList$folder, "data/")

if (!dir.exists(Obio@parameterList$data_dir)){
    dir.create(Obio@parameterList$data_dir)
}


## Set default for database connections ##
pos <- grep("^host$", names(Obio@dbDetailList))
if (length(pos) ==0 ){
    Obio@dbDetailList$host <- NULL
    
    if (is.null(Obio@dbDetailList)){
        Obio@dbDetailList = list("host" = NULL)
    }
    
    upload.results.to.database <- FALSE
    print("No database server provided. upload.results.to.database set to FALSE")
    
}

if (!is.null(Obio@dbDetailList$host)){
    if (Obio@dbDetailList$host == "10.27.241.234"){
        urlString <- "biologic.thecrick.org"
    } else {
        urlString <- "biologic.crick.ac.uk"
    }    
} else {
    urlString <- ""
}


##                                                                           ##
###############################################################################

```




<!--chapter:end:01-B.1.set.parameters.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set Parameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "partB.set.parameters."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```


# Option to Load Data Into R
## Download variables
With the parmeters below, you can import the data relating to this RNA-Seq projet directly into a R-session. 
```{r, echo=F, eval=T, warning=FALSE}

## Check if project access file exists ##
projectAccessDir <- paste0(Obio@parameterList$workdir, "project_access/")
projectAccessFile <- paste0(Obio@parameterList$workdir, "project_access/project_access.txt")
if (file.exists(projectAccessFile)){
    df <- read.delim(
        projectAccessFile, 
        sep = "\t",
        stringsAsFactors = F
    )
    username <- df$username
    pass <- df$pass
    
    
} else {
    username <- substr(paste0(Obio@parameterList$project_id,"_da"), 1, 16)
    sPwd <-c(2:9,letters,LETTERS)
    pass <- paste(sample(sPwd,8),collapse="")
    df <- data.frame(username, pass)
    if (!dir.exists(projectAccessDir)){
        dir.create(projectAccessDir, recursive = T)
    }
    write.table(df, projectAccessFile, row.names=F, sep="\t")
}
    
Obio@dbDetailList[["RaccessUsername"]] <- username
Obio@dbDetailList[["RaccessPass"]] <- pass

## Assign project tables ##
## Design
if (is.null(Obio@parameterList$designdbTableName)){
  Obio@parameterList$designdbTableName <- paste0(Obio@parameterList$project_id, "_designTable")
}

designTB <- Obio@parameterList$designdbTableName



## Main
if (is.null(Obio@parameterList$rnaseqdbTableName)){
    Obio@parameterList$rnaseqdbTableName <- paste0(Obio@parameterList$project_id, "_bulk_rna_seq_table")
}
mainTB <- Obio@parameterList$rnaseqdbTableName
## PCA
if (is.null(Obio@parameterList$PCAdbTableName)){
    Obio@parameterList$PCAdbTableName <- paste0(Obio@parameterList$project_id, "_PCA")
}
pcaTB <- Obio@parameterList$PCAdbTableName

host <- Obio@dbDetailList$host
db <- Obio@dbDetailList$primDataDB
designString <- designTB
mainTBstring <- mainTB
pcaDbTable <- pcaTB
## Done installing package                                                   ##
###############################################################################
userString <- paste0('username <- "', username,'"')
passString <- paste0('pass <- "', pass,'"')
hostString <- paste0('host <- "', host,'"')
dbString <- paste0('db <- "', db,'"')
designString <- paste0('designTB <- "', designTB,'"')
mainTBstring <- paste0('mainTB <- "', mainTB,'"')
pcaDbTable <- paste0('pcaTB <- "', pcaTB,'"')
species <- Obio@parameterList$species
geneIDcolumn <- Obio@parameterList$geneIDcolumn
alignmentGeneID <- Obio@parameterList$primaryAlignmentGeneID
speciesString <- paste0('species <- "', species,'"')
alignmentGeneIDString <- paste0('alignmentGeneID <- "', alignmentGeneID,'"')
geneIDstring <- paste0('geneIDcolumn <- "', geneIDcolumn,'"')
pos <- grep("designTScol", names(Obio@parameterList))
if (length(pos) > 0){
    if (!is.null(Obio@parameterList$designTScol)){
        designTScol <- Obio@parameterList$designTScol
        timepointString <- paste0('designTScol <- "', designTScol,'"')
    } else {
        timepointString <- "" 
    }
} else {
    timepointString <- ""   
}
```

<style>
    div.grey pre { background-color:#f5f5f5; }
    div.grey pre.r { background-color:black; }
</style>
            
Here we set the database access variables so we can get your data in </br></br>
            
<div class = "grey">
```{r, echo=F, eval=T, warning=FALSE,comment=NA}
            
            oneString <- paste0(
                userString,
                "\n",
                passString,
                "\n",
                hostString,
                "\n",
                dbString,
                "\n"
            )
            
            cat(oneString)
            
            
```
</div>
                
Here we define the tables from which we draw the data:
<div class = "grey">
```{r, echo=F, eval=T, warning=FALSE,comment=NA}
            
            twoString <- paste0(
                designString,
                "\n",
                mainTBstring,
                "\n",
                pcaDbTable,
                "\n"
            )
            
            cat(twoString)
            
            
```
 </div>
                
                
And here we set a few more variables we'll need for plotting:
<div class = "grey">
```{r, echo=F, eval=T, warning=FALSE,comment=NA}
threeString <- paste0(
    speciesString,
    "\n",
    geneIDstring,
    "\n",
    alignmentGeneIDString,
    "\n",
    timepointString
)
cat(threeString)
```
</div>

## Load Data into R
Next, let's load your project data. We will need this as a basis for making the plots further down. 

```{r, echo=TRUE, eval=F, warning=FALSE, class.source = 'fold-show'}

## The line below will install an R-package that we need to connect to the  Crick database
devtools::install_github("decusinlabore/bioLOGIC")

library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples. 
dfDesign <- import.db.table.from.db(
    dbname = db,
    dbtable = designTB,
    host = host,
    user = username,
    password = pass
)
## Load main data table from database. In this table a lot of gene-level information for this project is assembled. 
dfMainData <- import.db.table.from.db(
    dbname = db,
    dbtable = mainTB,
    host = host,
    user = username,
    password = pass
)
## Load main pca table from database. This table contains cell-level PCA information.
dfPCA <- import.db.table.from.db(
    dbname = db,
    dbtable = pcaTB,
    host = host,
    user = username,
    password = pass
)
## For some plots we want to limit the number of genes to the most interesting, so let's get those in a vector:
# Most variable gene names
dfVar <- dfMainData[dfMainData$logFC_cut_off != 0 ,c(geneIDcolumn, alignmentGeneID)]
mostVarGenes <- as.vector(unique(sort(dfVar[,geneIDcolumn])))
mostVarGenes <- na.omit(mostVarGenes[mostVarGenes != ""])
# Most variable gene IDs
mostVarIDs <- as.vector(unique(sort(dfVar[,alignmentGeneID])))
mostVarIDs <- na.omit(mostVarIDs[mostVarIDs != ""])
```


```{r, echo=F, eval=T, warning=FALSE,comment=NA}
## In this section the data for this report is loaded from file in order to maintain version control. The data loaded in this section should be identical with the version of the proejct kept in the database. 
dfDesign <- Obio@dfDesign
# dfMainData <- Obio@databaseTable
# dfPCA <- Obio@dfPCA
dfModel <- Obio@dfModel
# dfVar <- dfMainData[dfMainData$logFC_cut_off != 0 ,c(geneIDcolumn, alignmentGeneID)]
# mostVarGenes <- as.vector(unique(sort(dfVar[,geneIDcolumn])))
# mostVarGenes <- na.omit(mostVarGenes[mostVarGenes != ""])
# Most variable gene IDs
# mostVarIDs <- as.vector(unique(sort(dfVar[,alignmentGeneID])))
#mostVarIDs <- na.omit(mostVarIDs[mostVarIDs != ""])
```

<!--chapter:end:02-B.1.2.set.data.access.parameters.for.R.data.import.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set Parameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r partB_retrieve_reference_gene_sets_init, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B2.ref.gmt."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")
```



```{r partB_create_sample_list, echo=FALSE, eval=TRUE, warning=FALSE, results=F}
###############################################################################
## Load reference datasets                                                   ##
Obio@dataTableList[["referenceList"]] <- NULL
if (!is.null(Obio@dbDetailList$host)){
    if (Obio@parameterList$geneIDcolumn != "mgi_symbol" & Obio@parameterList$geneIDcolumn != "hgnc_symbol") {
        queryGS <- "hgnc_symbol" 
    } else {
            queryGS <- Obio@parameterList$geneIDcolumn
    }
  
    Obio@dataTableList[["referenceList"]] <- list(
        # "s.genes" = retrieve.gene.category.from.db(
        #                 cat_id = "ag_lab_categories__41",
        #                 password = db.pwd,
        #                 gene.symbol = queryGS,
        #                 user = Obio@dbDetailList$db.user,
        #                 host = Obio@dbDetailList$host
        #             ),
        # "g2m.genes" = retrieve.gene.category.from.db(
        #                   cat_id = "ag_lab_categories__42",
        #                   password = db.pwd,
        #                   gene.symbol = queryGS,
        #                   user = Obio@dbDetailList$db.user,
        #                   host = Obio@dbDetailList$host
        #             ),
        "TFs" = retrieve.gene.category.from.db(
                          cat_id = "ag_lab_categories__10",
                          password = Obio@dbDetailList[["db.pwd"]],
                          gene.symbol = queryGS,
                          user = Obio@dbDetailList$db.user,
                          host = Obio@dbDetailList$host
        )
        
      )
}
## Done create cellRanger QC plots                                           ##
###############################################################################
```

<!--chapter:end:03-B.2.retrieve.reference.gene.sets.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=TRUE, eval=TRUE, warning=FALSE}
chnkPrefix <- "add.data"
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```




```{r, echo=F, eval=T, warning=FALSE}

###############################################################################
## Essential bits                                                            ##
###############################################################################


###############################################################################
## Add Design file and check                                                 ##

if (!is.null(Obio@projectDetailList$designFN)){
    dfDesign <- read.delim(
        Obio@projectDetailList$designFN, 
        header =T, 
        sep = "\t",
        stringsAsFactors = F
    )
    
    dfDesign[is.na(dfDesign)] <- ""
} else {
    stop("Error: Now design file specified")
}

## Make sure the design file has a sample.group_color column:
pos <- grep("^sample.group_color$", names(dfDesign))

if (length(pos) == 0){
    ## Create default ##
    sample.group <- unique(dfDesign$sample.group)
    sample.group_color <- sample.group
            #library(scales)
    sample.group_color = scales::hue_pal()(length(sample.group_color))
            #sample.group_color = c("#990000", "#009900")
    
    ## set sample group colors manually
    
    dfGroupColors <- unique(data.frame(sample.group, sample.group_color))
    dfDesign <- merge(dfDesign, dfGroupColors, by.x = "sample.group", "sample.group")
    
}



## Add: check for essential columns ##
Obio@dfDesign <- data.frame(NULL)
Obio@dfDesign <- dfDesign

##                                                                           ##
###############################################################################

###############################################################################
## Add model file and check                                                 ##
if (!is.null(Obio@projectDetailList$modelFN)){
    dfModel <- read.delim(
        Obio@projectDetailList$modelFN, 
        header =T, 
        sep = "\t",
        stringsAsFactors = F
    )
    dfModel[is.na(dfModel)] <- ""
    Obio@dfModel <- data.frame(NULL)
    Obio@dfModel <- dfModel
} 

## Add: check for essential columns ##


##                                                                           ##
###############################################################################

###############################################################################
## Optional section - if available                                           ##
###############################################################################

###############################################################################
## Add rsem file and check                                                   ##
# if (!is.null(Obio@projectDetailList$countTableFN)){
#     dfCount <- read.delim(
#         Obio@projectDetailList$countTableFN, 
#         header =T, 
#         sep = "\t",
#         stringsAsFactors = F
#     )
# } else {
#     print("Count file not found")
# }


###############################################################################
## Add rsem file if available                                                 ##
if (!is.null(Obio@parameterList$countTableFN)){
    dfRSEM <- read.delim(
        Obio@parameterList$countTableFN, 
        header =T, 
        sep = "\t",
        stringsAsFactors = F
    )
    
    
    names(dfRSEM) <- gsub("^X$", "gene_id", names(dfRSEM))
    names(dfRSEM) <- gsub("^x$", "gene_id", names(dfRSEM))
    names(dfRSEM) <- gsub(paste0("^",Obio@parameterList$primaryAlignmentGeneID, "$"), "gene_id", names(dfRSEM))
    
    row.names(dfRSEM) <- dfRSEM$gene_id
    
    dfRSEM$gene_id <- NULL
    
    selVec <- names(dfRSEM)
    selVec <- selVec[selVec %in% Obio@dfDesign$sample.id]
    dfRSEM <- dfRSEM[,selVec]
    
    Obio@RSEMcountMatrix <- data.matrix(round(dfRSEM))
    
    
    designSampleIDs <- unique(Obio@dfDesign$sample.id)
    dfRsemSampleIDs <- unique(colnames(Obio@RSEMcountMatrix))
    check <- !(designSampleIDs %in% dfRsemSampleIDs)

    if (sum(check) > 0){
        stop("Sample IDs in dfDesign don't match the column names in the count file")
    } else {
        print("RSEM file not (correctly) specified")
    }
}


## Done                                                                      ##
###############################################################################



###############################################################################
## Add tpm file if available                                                 ##
if (!is.null(Obio@projectDetailList$TpmTableFN)){
    dfTPM <- read.delim(
        Obio@projectDetailList$TpmTableFN, 
        header =T, 
        sep = "\t",
        stringsAsFactors = F
    )
    
    names(dfTPM) <- gsub("^X$", "gene_id", names(dfTPM))
    names(dfTPM) <- gsub("^x$", "gene_id", names(dfTPM))
    names(dfTPM) <- gsub(paste0("^",Obio@parameterList$primaryAlignmentGeneID, "$"), "gene_id", names(dfTPM))
    
    selVec <- names(dfTPM)
    selVec <- selVec[selVec != "gene_id"]
    
    ## Remove all samples from dfTPM that are not present in the design file specifications
    selVec <- selVec[selVec %in% dfDesign$sample.id]
    
    dfTPM <- dfTPM[rowSums(dfTPM[,selVec]) != 0,]

    Obio@dfTPM <- dfTPM


    designSampleIDs <- unique(Obio@dfDesign$sample.id)
    dfTPMSampleIDs <- gsub("_TPM", "",unique(names(Obio@dfTPM)))
    check <- !(designSampleIDs %in% dfTPMSampleIDs)

    if (sum(check) > 0){
      stop("Sample IDs in dfDesign don't match the column names in the count file")
    }
    
    

} else {
    print("TPM file not specified")
}


## Done                                                                      ##
###############################################################################

###############################################################################
## Check provided PCA file                                                   ##
if (!is.null(Obio@projectDetailList$PcaFN)){
    if (file.exists(Obio@projectDetailList$PcaFN)){
        dfPCA <- read.delim(
            Obio@projectDetailList$PcaFN, 
            header=T, 
            sep="\t", 
            stringsAsFactors = F
        )
        
        pos <- c(
            grep("^sample.id$", names(dfPCA)),
            grep("^sample_id$", names(dfPCA))
        )
        
        if (length(pos) == 0){
            Obio@projectDetailList$dfPcaFN <- NULL
            print("Provided PCA file not valid. The sample.id column is missing. Will use default calculation.")
        } 
        
        pos <- c(
            grep("^sample.group$", names(dfPCA)),
            grep("^sample_group$", names(dfPCA))
        )
        
        if (length(pos) == 0){
            Obio@projectDetailList$dfPcaFN <- NULL
            print("Provided PCA file not valid. The sample.group column is missing. Will use default calculation.")
        } 
        
        pos <- c(
            grep("^PC1$", names(dfPCA)),
            grep("^PC2$", names(dfPCA))
        )
        
        if (length(pos) != 2){
            Obio@projectDetailList$dfPcaFN <- NULL
            print("Provided PCA file not valid. Check format of PCx columns. It should be PC1, PC2, ... Will use default calculation.")
        } 
        
        if (!is.null(Obio@projectDetailList$dfPcaFN)){
            selVec <- c(
                "sample.id",
                "sample_id",
                "sample.group",
                "sample_group",
                names(dfPCA)[grep("^PC", names(dfPCA))]
            )
            
            selVec <- selVec[selVec %in% names(dfPCA)]
            dfPCA <- dfPCA[,selVec]
            names(dfPCA) <- gsub("\\.", "_", names(dfPCA))
            Obio@dfPCA <- data.frame(NULL)
            Obio@dfPCA <- dfPCA
        }
        
    } # End if file.exists
} # End dfPcaFN not null

## Done                                                                      ##
###############################################################################

###############################################################################
## Add DGE files, if available                                               ##


## Done                                                                      ##
###############################################################################

```


<!--chapter:end:04-A.1.add.data.to.analysis.object.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B3.alignment."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```


# Alignment Summary
For a summary of the alignment parameters, review the QC tab. 

The following tables form the basis for this analysis: 

<div class = "grey">
```{r, echo=F, eval=T, warning=FALSE,comment=NA}
            
            twoString <- paste0(
                "Read count table: \n", Obio@parameterList$countTableFN,
                "\n",
                "TPM table: \n",  Obio@parameterList$TpmTableFN,
                "\n"
            )
            
            cat(twoString)
            
            
```
 </div>


<!--chapter:end:05-B.3.alignment.summary.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "C4.guide.txt."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```


# RNA-Seq Analysis Guide

## TECHNICAL CHECKS

Quality Control (QC)

You may want to start by reviewing the quality of the underlying RNA and RNA-sequencing. This is done in the Quality control (QC) section. Things to look for are the percentage of reads that aligned to intergenic regions (indicating DNA contamination in your RNA) and the sequence duplication rate (which might be a PCR artefact introduced during sample amplification and may affect the complexity of the sequenced library).



```{r, eval=T, results="asis"}
cat(paste0("A summary of this experiment and its results so far is summarized in an editable [report](https://biologic.crick.ac.uk/",Obio@parameterList$project_id,"/report.php). The purpose of this section is to provide a brief summary of the experiment as well as of its results to a person who is interested in your dataset in the distant future. Ideally, this section contains all information necessary to understand the experiment as well as its results so far. You may download this presentation via the link at the bottom of the page, edit it in whatever way you deem suitable and send it back to bioinformatics for updating. You may also want to add a powerpoint presentation outlining the rationale for this experiment as a [slide show](https://biologic.crick.ac.uk/",Obio@parameterList$project_id,"/about.php)."))
```

<!--chapter:end:06-B.4.analysis.guide.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r partC_design_model_init, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B5.design.and.formula.table."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

figCap = paste0(
    "**Table ",
    Obio@parameterList$tableCount,
    ":** Design table for this experiment outlining original file names, sample names and group definitions for differential gene expression analysis."
)

Obio@parameterList$tableCount <- Obio@parameterList$tableCount + 1
```

# Parameter Tables
## Display Design File
```{r designFile, echo=TRUE, eval=TRUE, warning=FALSE, fig.cap=figCap}
dfDesign <- Obio@dfDesign


selVec <- c(
    names(dfDesign)[grep('sampleID', names(dfDesign))],
    names(dfDesign)[grep('original.sample.name', names(dfDesign))],
    names(dfDesign)[grep('sample.id', names(dfDesign))],
    names(dfDesign)[grep('^sample.group$', names(dfDesign))],
    names(dfDesign)[grep('^dataseries$', names(dfDesign))],
    names(dfDesign)[grep('^f_', names(dfDesign))],
    names(dfDesign)[grep('comp_', names(dfDesign))],
    names(dfDesign)[grep('LRT_', names(dfDesign))]
    
)


selVec <- selVec[selVec %in% names(Obio@dfDesign)]    


if (length(selVec) > 1){
    dfDesign <- unique(dfDesign[,selVec])
}
    
colnames <- gsub("_", " ", names(dfDesign))
colnames <- gsub("comp", "DGE", colnames)
colnames <- gsub("^f_", "Factor_", colnames)
colnames <- gsub("[.]", " ", colnames)
colnames <- gsub("original.sample.name", "original", colnames)



DT::datatable(
    dfDesign,
    colnames = colnames,
    rownames = FALSE,
    options = list(
        initComplete = htmlwidgets::JS(
            "function(settings, json) {",
            "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
            "}"
        ) #,
    #order = list(list(3, 'asc'), list(2, 'desc'))
    )
) 

figCap2 = paste0(
    "**Table ",
    Obio@parameterList$tableCount,
    ":** Design table for this experiment outlining original file names, sample names and group definitions for differential gene expression analysis"
)

```


## Display Formula Table
```{r formulaFile, echo=TRUE, eval=TRUE, warning=FALSE, fig.cap=figCap2}
dfModel <- Obio@dfModel
# selVec <- c(
#     names(dfDesign)[grep('sampleID', names(dfDesign))],
#     names(dfDesign)[grep('original.sample.name', names(dfDesign))],
#     names(dfDesign)[grep('sample.id', names(dfDesign))],
#     names(dfDesign)[grep('^f_', names(dfDesign))]
#     names(dfDesign)[grep('comp_', names(dfDesign))],
#     names(dfDesign)[grep('LRT_', names(dfDesign))]
#     
# )
# 
# selVec <- selVec[selVec %in% names(Obio@dfDesign)]
# 
# dfDesign <- unique(dfDesign[,selVec])
# colnames <- gsub("_", " ", names(dfDesign))
# colnames <- gsub("comp", "DGE", colnames)
# colnames <- gsub("[.]", " ", colnames)
# colnames <- gsub("original.sample.name", "original", colnames)


if (nrow(dfModel) > 0){
    DT::datatable(
        dfModel,
        #colnames = colnames,
        rownames = FALSE,
        options = list(
            initComplete = htmlwidgets::JS(
                "function(settings, json) {",
                "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
                "}"
            ),
        order = list(list(3, 'asc'), list(2, 'desc'))
        )
    ) 
}

```


<!--chapter:end:07-B.5.display.design.table.and.formula.table.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set Parameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "edit.RSEM.tpm."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```

# DESeq2 Analysis
## Create DESeq2 object
```{r, echo=TRUE, eval=TRUE, warning=FALSE, results="asis"}
###############################################################################
## Create and attach DDS object                                              ##

if (is.null( Obio@parameterList$parallelProcessing) || length(Obio@parameterList$parallelProcessing) == 0){
     Obio@parameterList$parallelProcessing <- FALSE
}

Obio <- biologicSeqTools2::createDdsObject(Obio)

## Done creating and attaching DDS objecs                                    ##
###############################################################################
```

## Variation and PCA
```{r, echo=TRUE, eval=TRUE, warning=FALSE, results="hide", message=FALSE}
###############################################################################
## Determine variation in the data set                                       ##

## This is a tempory fix until the PCA function has been fully equipped for
## batch correction
saveMode <- Obio@parameterList$batchMode
Obio@parameterList$batchMode <- FALSE

Obio <- biologicSeqTools2::addCoVar(
    obj = Obio,
    avgCountCutOffperSample = 1,
    selectionColName = "aboveCutOff",
    dfBaseData = Obio@DESeqNormReadCountsTable,
    rowNameID = Obio@parameterList$primaryAlignmentGeneID
    #options: "DEseq2RV" or "CoVar"
)

## Results are in slot Obio@dataTableList$dfRowVar ##

## Diagnostic plot ##
# library(ggplot2)
# countCutOff <- 0
# pCoVar <- ggplot(
#     data=Obio@dataTableList$dfRowVar[Obio@dataTableList$dfRowVar$avgCountsPerGenePerSample > countCutOff ,],
#     aes(
#         x=CoVar,
#         y=DEseq2RV
#     )) + geom_point(
#     )  + labs(title = "Variation" ,x = "CoVar", y = "DeSeq2Var"
#     ) +  theme(
#         axis.text.y   = element_text(size=8),
#         axis.text.x   = element_text(size=8),
#         axis.title.y  = element_text(size=8),
#         axis.title.x  = element_text(size=8),
#         axis.line = element_line(colour = "black"),
#         panel.border = element_rect(colour = "black", fill=NA, size=1),
#         plot.title = element_text(hjust = 0.5, size = 12)
#     )

## Done determine variation in the data set                                  ##
###############################################################################

###############################################################################
## Perform PCA, MV-analysis, and Clusterdendrogram                           ##

## Select elements for PCA explicityly ##
dfSel <- Obio@dataTableList$dfRowVar

## Remove low count values ##
dfSel <- dfSel[dfSel$avgCountsPerGenePerSample >= 1, ]

## Order by variation
dfSel <- dfSel[order(dfSel$DEseq2RV, decreasing = TRUE),]
# dfSel <- dfSel[order(dfSel$CoVar, decreasing = TRUE),]

rowSelVec <- as.vector(
    dfSel[1:Obio@parameterList$NtopGenes,Obio@parameterList$primaryAlignmentGeneID]
)

Obio@dataTableList[["Ntop4pcaGeneSelection"]] <- rowSelVec



Obio <- doPCA(
    obj = Obio,
    pcaDimensionsToInvestigate = c(1:5),
    Ntop4pca = Obio@parameterList$NtopGenes, #500,
    avgCountCutOffperSample = 0,
    pcaSelectionVec = rowSelVec
)

Obio@parameterList$batchMode <- saveMode
## Do linear fittings to available dimensions ##


# depdendent Variation mode: Variables can be dependent (individual fits)


if (length(unique(Obio@dfDesign$dataseries)) > 1){
    independentDesignColSector <- c(
        "dataseries"
    )
} else {
    independentDesignColSector <- as.vector(NULL, mode = "character")
}

if (length(Obio@dfDesign$sample.group) > 1){
    independentDesignColSector <- c(
        independentDesignColSector,
        "sample.group"
    )
}

if (length(Obio@dfDesign$replicate) > 1){
    independentDesignColSector <- c(
        independentDesignColSector,
        "replicate"
    )
}

pos <- grep("^f_", names(Obio@dfDesign))
if (length(pos) > 0){
  independentDesignColSector <- c(
    names(Obio@dfDesign)[grep("^f_", names(Obio@dfDesign))]
  )

} else if (length(unique(Obio@dfDesign$dataseries)) > 1){
    independentDesignColSector <- c(
      "dataseries"
    )
}


# indedendentVariation mode: Variables are required to be independent
## Do linear variable fittings to PCA ##
# variables need to be independent > culmulative fit #
Obio <- biologicSeqTools2::doLinearFittings(
    obj = Obio,
    designColSelector = independentDesignColSector,
    mode = "independentVariation", ## "independentVariation" or "dependentVariation"
    Ntop4pca = Obio@parameterList$NtopGenes,
    plotname = "P2_independentVariables"
)



## Do linear variable fittings to PCA ##

# individual fit
LRTvec <- names(Obio@dfDesign)[grep("f_", names(Obio@dfDesign))]
#LRTvec <- LRTvec[LRTvec != "LRT_replicate"]
#LRTvec <- "LRT_timepoint"

dependentDesignColSelector<- c(
    independentDesignColSector,
    LRTvec,
    names(Obio@dfDesign)[grep("comp_", names(Obio@dfDesign))],
    names(Obio@dfDesign)[grep("LRT_", names(Obio@dfDesign))]
)
Obio <- biologicSeqTools2::doLinearFittings(
    obj = Obio,
    designColSelector = dependentDesignColSelector,
    mode = "dependentVariation", ## "independentVariation" or "dependentVariation"
    Ntop4pca = Obio@parameterList$NtopGenes,
    plotname = "P2_dependentVariables"
)


## Create Plot dendrogram ##
# Obio <- createSampleDendrogram(
#     obj = Obio,
#     Ntop4pca = Obio@parameterList$NtopGenes,
#     plotname = "dendrogram10000"
# )

###############################################################################
## Do differential gene expression analysis                                  ##
#Obio@parameterList$batchMode <- F
## LRT tests for multiple sample groups ##

# if (!is.null(Obio@projectDetailList$DEseq2_DGE_result_folder) && Obio@projectDetailList$DEseq2_DGE_result_folder != ""){
#     mode = "load_DGE_from_file"
#     Obio <- loadDESeq2outputFromFile(
#         Obio,
#         replace = TRUE
#     )
# } else {


    
#}


############################################################
## Function load DGE results from file
loadDESeq2outputFromFile <- function(
    Obio,
    DEseq2resultDir = "Obio@parameterList$DEseq2External_DGE",
    replace = FALSE,
    mode = NULL # Can be DGE or LRT
){
    
    if (is.null(mode)){
        if (DEseq2resultDir == "DEseq2External_LRT"){
            mode = "LRT"
        } else {
            mode = "DGE"
        }
    }
  
    allfiles <- paste0(DEseq2resultDir, "/", list.files(DEseq2resultDir))
    #allfiles <- allfiles[grep(".txt", allfiles)]
    allfiles <- gsub("//", "/", allfiles)
    allfiles <- sort(allfiles)
    contrastNames <- gsub(gsub("//", "/", paste0(DEseq2resultDir, "/")), "", allfiles)
    contrastNames <- gsub(".txt", "", contrastNames)





    ###############################################################################
    ## For this project only: Add ENSMUSG column                                 ##
    dfAnno <- Obio@dfGeneAnnotation
    dfAnno <- unique(
      Obio@dfGeneAnnotation[,c(Obio@parameterList$primaryAlignmentGeneID, Obio@parameterList$geneIDcolumn)]
    )
    
    ## Done adding ENSMUSG column                                                ##
    ###############################################################################
    for (i in 1:length(allfiles)){
      colName <- contrastNames[i]
      res <- read.delim(allfiles[i], header = T, sep="\t")
      
      
      ## In case gene_ids were saved in row names
      pos <- grep("gene_id", names(res))
      if (length(pos) == 0){
          res[["gene_id"]] <- row.names(res)  
      } else if (length(pos) == 1){
          row.names(res) <- res$gene_id
      }
      
      ################################
      ## This project only 
      
      
      selVec <- c("gene_id", "baseMean", "log2FoldChange", "lfcSE",  "pvalue", "padj")
      
      if (!sum(selVec %in% names(res)) == length(selVec)){
          stop(paste0("Check DESeq2 input files. Mandantory columns: ", paste0(selVec, collapse = ", ")))
      }
      
      res <- unique(res[,selVec])
      
      res <- res[!(duplicated(res[,"gene_id"])),]
      
      ## Remove all log-fcs with an NA padj
      res <- res[!is.na(res$padj),]
      res <- res[!is.na(res$log2FoldChange),]
      
      
      res[is.na(res)] <- 0
      res <- res[res$baseMean > 0,]
      
      # Plus one to avoid negative log2 baseMeans
      res$baseMean <- log2((res$baseMean + 1))
      ## Done 
      ################################
      
      
      #row.names(res) <- res[,Obio@parameterList$primaryAlignmentGeneID]
      
      names(res) = paste(names(res), colName, sep="_")
      names(res) <- gsub(paste0("gene_id_", colName), "gene_id", names(res))
      names(res) <- gsub("^gene_id$", Obio@parameterList$primaryAlignmentGeneID, names(res))
      #res[[Obio@parameterList$primaryAlignmentGeneID]] = rownames(res)
      
      ## log2 the base mean for lrt applications
      
      
      if (mode == "DGE"){
          names(res) = gsub("log2FoldChange", "logFC", names(res))
          names(res) = gsub(
            "logFC",
            paste("contrast_D", i, "_logFC", sep=""),
            names(res)
          )
          
          names(res) = gsub(
            "padj",
            paste("contrast_D", i, "_padj", sep=""),
            names(res)
          )
          
          names(res) = gsub(
            "stat",
            paste("contrast_D", i, "_stat", sep=""),
            names(res)
          )
          
          names(res) = gsub(
            "baseMean",
            paste("contrast_D", i, "_lg2BaseMean", sep=""),
            names(res)
          )
          
          #Remove all rows without a padj
          padj.col = grep("padj", names(res))[1]
          res[,padj.col][is.na(res[,padj.col])] = ""
          res = res[res[,padj.col] != "", ]
          res[,padj.col] <- as.numeric(res[,padj.col])
          
          ## Add log10p column ##
          padj  <- names(res)[grep("_padj_", names(res))]
          lg10p <- gsub("padj", "lg10p", padj)
          
          for (z in 1:length(padj)){
            preprocess <- as.numeric(res[,padj[z]])
            minNum <- min(preprocess[preprocess != 0])
            preprocess[preprocess == 0] <- minNum
            
            # if (length(grep("padj_LRT", padj[i])) > 0){
            #     preprocess <- as.numeric(res[,padj[z]])
            #     minNum <- min(preprocess[preprocess != 0])
            #     preprocess[preprocess == 0] <- minNum
            # } else {
            #     preprocess <- as.numeric(res[,padj[z]])
            # }
            
            temp <- -1*log10(preprocess)
            #temp[temp >= 50] = 50
            res[,lg10p[z]] <- temp
          }
          
          col.vector = c(
            Obio@parameterList$primaryAlignmentGeneID,
            names(res)[grep("contrast", names(res))]
          )
          
          res = res[,col.vector]
          
          ## Make all numeric columns numeric ##
          res[,grep("contrast_", names(res))] <- apply(res[,grep("contrast_", names(res))], 2, as.numeric)
      }
      
      if (mode == "LRT"){
               #res[[Obio@parameterList$primaryAlignmentGeneID]] = rownames(res)

                res$stat <- NULL

                
                names(res) = gsub(
                    "baseMean",
                    paste0("contrast_L_lg2BaseMean_"),
                    names(res)
                )

                names(res) = gsub(
                    "padj",
                    paste0("contrast_L_padj_"),
                    names(res)
                )



                #Remove all rows without a padj
                padj.col = grep("padj", names(res))[1]
                res[,padj.col][is.na(res[,padj.col])] = ""
                res = res[res[,padj.col] != "", ]
                res[,padj.col] <- as.numeric(res[,padj.col])

                ## Add log10p column ##
                padj  <- names(res)[grep("_padj_", names(res))]
                lg10p <- gsub("padj", "lg10p", padj)

                for (z in 1:length(padj)){
                    preprocess <- as.numeric(res[,padj[z]])
                    minNum <- min(preprocess[preprocess != 0])
                    preprocess[preprocess == 0] <- minNum

                    # if (length(grep("padj_LRT", padj[i])) > 0){
                    #     preprocess <- as.numeric(res[,padj[z]])
                    #     minNum <- min(preprocess[preprocess != 0])
                    #     preprocess[preprocess == 0] <- minNum
                    # } else {
                    #     preprocess <- as.numeric(res[,padj[z]])
                    # }

                    temp <- -1*log10(preprocess)
                    #temp[temp >= 50] = 50
                    res[,lg10p[z]] <- temp
                }

                col.vector = c(
                    Obio@parameterList$primaryAlignmentGeneID,
                    names(res)[grep("contrast", names(res))]
                )

                res = res[,col.vector]

                ## Make all numeric columns numierc ##
                ## Make all numeric columns numierc ##
                res[,grep("contrast_", names(res))] <- apply(res[,grep("contrast_", names(res))], 2, as.numeric)
      } # end LRT mode
      
      if (i == 1){
        dfContrastTable <- res
      } else {
        dfContrastTable <- merge(
          dfContrastTable,
          res,
          by.x = Obio@parameterList$primaryAlignmentGeneID,
          by.y = Obio@parameterList$primaryAlignmentGeneID,
          all = TRUE
        )
        dfContrastTable[is.na(dfContrastTable)] <- 0
      }
    }
    
    
    # head(dfContrastTable)
    
    dfContrastTable<- dfContrastTable[rowSums(dfContrastTable[,2:ncol(dfContrastTable)]) != 0, ]
    names(dfContrastTable) <- gsub("__", "_", names(dfContrastTable))
    
    if (mode == "LRT"){
        if (replace){
            Obio@DEseq2LRTtable <- data.frame(NULL)
            Obio@DEseq2LRTtable <- dfContrastTable
        } else if (nrow(Obio@DEseq2LRTtable) > 0){
            Obio@DEseq2LRTtable <- merge(
                Obio@DEseq2LRTtable,
                dfContrastTable,
                by.x = Obio@parameterList$primaryAlignmentGeneID,
                by.y = Obio@parameterList$primaryAlignmentGeneID,
                all = TRUE
            )
            Obio@DEseq2LRTtable[is.na(Obio@DEseq2LRTtable)] <- 0 
        } else {
            Obio@DEseq2LRTtable <- dfContrastTable
        }
    }
    
    if (mode == "DGE"){
        if (replace){
            Obio@DEseq2contrastTable <- data.frame(NULL)
            Obio@DEseq2contrastTable <- dfContrastTable
        } else if (nrow(Obio@DEseq2contrastTable) > 0){
            Obio@DEseq2contrastTable <- merge(
                Obio@DEseq2contrastTable,
                dfContrastTable,
                by.x = Obio@parameterList$primaryAlignmentGeneID,
                by.y = Obio@parameterList$primaryAlignmentGeneID,
                all = TRUE
            )
            Obio@DEseq2contrastTable[is.na(Obio@DEseq2contrastTable)] <- 0 
        } else {
            Obio@DEseq2contrastTable <- dfContrastTable
        }
    }
    
    
    
    
    if (mode == "LRT"){
      print("DESeq2 results loaded into Obio@DEseq2LRTtable")
    } else {
      print("DESeq2 results loaded into Obio@DEseq2contrastTable")
    }
    
    return(Obio)
}

## Done with function                                                        ##
###############################################################################


    
###############################################################################
## Add or calculate LRT results                                              ##
if (!is.null(Obio@parameterList$calculate_DGE) && is.logical(Obio@parameterList$calculate_DGE)) {
    calculate_LRT <- Obio@parameterList$calculate_LRT
} else {
    calculate_LRT <- TRUE 
}




pos <- grep("LRT_", names(Obio@dfDesign))
if (length(pos) == 0){
    calculate_LRT <- FALSE
}

if (calculate_LRT){
  dfDGE <- Obio@dfModel
    dfDGE <- dfDGE[dfDGE$test == "LRT",]
  
    if (nrow(dfDGE) > 0){
        Obio <- biologicSeqTools2::LRTanalysis(
            obj = Obio,
            createNewResultTable = TRUE
        )
    }
} 

## Add additional, external LRT files, if available
lrtFilesToAdd <- NULL
if (!is.null(Obio@parameterList$DEseq2External_LRT)){
    lrtFilesToAdd <- list.files(Obio@parameterList$DEseq2External_LRT)
}    
    
if (length(lrtFilesToAdd) > 0){
    Obio <- loadDESeq2outputFromFile(
        Obio,
        replace = TRUE,
        mode = "LRT",
        DEseq2resultDir = Obio@parameterList$DEseq2External_LRT
    )
} 


## Done adding and/or calculating LRT results                                 ##
################################################################################
  

################################################################################
## Add calculate DGE results                                                  ##

if (!is.null(Obio@parameterList$calculate_DGE) && is.logical(Obio@parameterList$calculate_DGE)) {
    calculate_DGE <- Obio@parameterList$calculate_DGE
} else {
    calculate_DGE <- TRUE  
}


pos <- grep("comp_", names(Obio@dfDesign))
if (length(pos) == 0){
    calculate_DGE <- FALSE
}

if (calculate_DGE){
  ## Pairwise differential gene expression ##
    ## If working on projects prior to fall 2018, make sure
    ## Obio@parameterList$DEseq2betaPrior is set to true.
    dfDGE <- Obio@dfModel
    dfDGE <- dfDGE[dfDGE$test == "Wald",]

    if (nrow(dfDGE) > 0){
        Obio <- biologicSeqTools2::DGEanalysis(
            obj = Obio,
            createNewResultTable = TRUE
        )
    }
  
}    

## If mode is not calculate DGE, a dge table needs to be provided
dgeFilesToAdd <- NULL
if (!is.null(Obio@parameterList$DEseq2External_DGE)){
    dgeFilesToAdd <- list.files(Obio@parameterList$DEseq2External_DGE)
}    
    
if (length(dgeFilesToAdd) > 0){
    Obio <- loadDESeq2outputFromFile(
        Obio,
        replace = FALSE,
        mode = "DGE",
        DEseq2resultDir = Obio@parameterList$DEseq2External_DGE
    )
}     

## Done adding and/or calculating LRT results                                 ##
################################################################################



## Done differential gene expresison analysis                                ##
###############################################################################


```



<!--chapter:end:08-B.6.DEseq2.PCA.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set Parameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}
chnkPrefix <- "edit.RSEM.tpm."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")


figureCount <- Obio@parameterList[["figureCount"]]
db.pwd <- Obio@dbDetailList[["db.pwd"]]
```



# DEseq2 Differential Gene Expression Analysis
```{r, echo=TRUE, eval=TRUE, warning=FALSE, results="hide", message=FALSE}

###############################################################################
## Create dfSummary                                                          ##



dfDGE <- Obio@DEseq2contrastTable
## Temporary Fix ##
## Remove empty pase means
rmVec <- grep("lg2BaseMean$", names(dfDGE))
if (length(rmVec) > 0){
    dfDGE <- dfDGE[,-rmVec]
}
## lg2 base mean ##
lg2Vec <- grep("lg2BaseMean", names(dfDGE))
if (length(lg2Vec ) > 0){
    for (i in 1:length(lg2Vec ))
    dfDGE[,lg2Vec[i]] <- log2(dfDGE[,lg2Vec[i]])
}

dfLRT <- Obio@DEseq2LRTtable

dfPCA <- Obio@dfPCAgenes


df.summary <- dfDGE

###############################################################################
## Calculate correlations                                                    ##
## Adding annotation ##
dfAnno <- unique(Obio@dfGeneAnnotation[,c(Obio@parameterList$primaryAlignmentGeneID, Obio@parameterList$geneIDcolumn)])
dfAnno <- dfAnno[dfAnno[,Obio@parameterList$primaryAlignmentGeneID] %in% df.summary[,Obio@parameterList$primaryAlignmentGeneID],]


pos <- grep("corGeneVec", names(Obio@parameterList))

if (length(pos) == 0){
    Obio@parameterList[["corGeneVec"]] <- NULL
}

if (!is.null(Obio@parameterList$corGeneVec)){
    hVec <- Obio@parameterList$corGeneVec
    dfAnnoCor <- dfAnno[dfAnno[,Obio@parameterList$geneIDcolumn] %in% hVec, ]

    Obio@parameterList$corGeneVec <- as.vector(dfAnnoCor[,Obio@parameterList$geneIDcolumn])
}

if (exists("dfAnnoCor")){
    if (nrow(dfAnnoCor) > 0){
        dfTPM <- Obio@dfTPM
        names(dfTPM) <- gsub("^X$", Obio@parameterList$primaryAlignmentGeneID, names(dfTPM))
        names(dfTPM) <- gsub("^gene_id$", Obio@parameterList$primaryAlignmentGeneID, names(dfTPM))

        names(dfTPM) <- paste0("norm_counts_", names(dfTPM ))
        names(dfTPM) <- gsub(
        paste0(
          "norm_counts_", Obio@parameterList$primaryAlignmentGeneID),
          Obio@parameterList$primaryAlignmentGeneID,
          names(dfTPM)
        )
        
        row.names(dfTPM) <- dfTPM[,Obio@parameterList$primaryAlignmentGeneID]
        dfTPM[,Obio@parameterList$primaryAlignmentGeneID] <- NULL
        for (k in 1:nrow(dfAnnoCor)){
            ###############################################################################
            ## do correlation analysis                                                   ##
    
            pValueCor = rep(1, nrow(dfTPM))
            corCoef = rep(0, nrow(dfTPM))
            cor.method = "pearson"
    
            geneSel <- as.vector(dfAnnoCor[k, Obio@parameterList$primaryAlignmentGeneID])
            pattern <- as.numeric(dfTPM[geneSel, ])
    
            #Find best correlation with kinase expression
            print("Starting to calculate correlations...")
            for (i in 1:nrow(dfTPM)){
                samplePattern <- as.numeric(t(dfTPM[i,]))
    
                if (sum(samplePattern) != 0){
                    cor.test.result = cor.test(samplePattern, pattern, method=cor.method)
                    pValueCor[i] = cor.test.result$p.value
                    corCoef[i] = cor.test.result$estimate
                }
                if (i%%1000 == 0){
                    print(i)
                }
            }
            print("...done.")
    
            dfTPM[["pValueCor"]] <- pValueCor
            dfTPM[["corCoef"]] <- corCoef
    
            dfTPM <- dfTPM[order(dfTPM$corCoef, decreasing = TRUE),]
            dfTempRes <- dfTPM
            dfTempRes[[Obio@parameterList$primaryAlignmentGeneID]] <- row.names(dfTempRes)
            dfTempRes <- dfTempRes[,c("corCoef", Obio@parameterList$primaryAlignmentGeneID)]
            names(dfTempRes) <- gsub("corCoef", paste0("corCoef_", as.vector(dfAnnoCor[k, Obio@parameterList$geneIDcolumn])), names(dfTempRes))
    
            if (k==1){
                dfTRes <- dfTempRes
            } else {
                dfTRes <- merge(
                    dfTRes,
                    dfTempRes,
                    by.x = Obio@parameterList$primaryAlignmentGeneID,
                    by.y = Obio@parameterList$primaryAlignmentGeneID,
                    all =TRUE
                )
                dfTRes[is.na(dfTRes)] <- 0
            }
    
    
            ## Done correlation analysis                                                 ##
            ###############################################################################
        }
    
    
        Obio@dataTableList[["geneCorTables"]] <- dfTRes
    }
}

## Done calculate correlations                                               ##
###############################################################################




###############################################################################
## Adding annotation to df.summary                                           ##
dfNormCounts <- Obio@DESeqNormReadCountsTable
names(dfNormCounts) <- paste0("DEseq2NormalizedReadCounts_", names(dfNormCounts))
dfNormCounts[[Obio@parameterList$primaryAlignmentGeneID]] <- row.names(dfNormCounts)

dfTPM <- Obio@dfTPM

## In case other names are used as col names
names(dfTPM) <- gsub("^X$", Obio@parameterList$primaryAlignmentGeneID, names(dfTPM))
names(dfTPM) <- gsub("^gene_id$", Obio@parameterList$primaryAlignmentGeneID, names(dfTPM))

names(dfTPM) <- paste0("norm_counts_", names(dfTPM ))
names(dfTPM) <- gsub(
    paste0("norm_counts_", Obio@parameterList$primaryAlignmentGeneID),
    Obio@parameterList$primaryAlignmentGeneID,
    names(dfTPM)
)

## Done adding annotation                                                    ##
###############################################################################

if (nrow(dfLRT) > 0){
  df.summary <- merge(
      df.summary,
      dfLRT,
      by.x = Obio@parameterList$primaryAlignmentGeneID,
      by.y = Obio@parameterList$primaryAlignmentGeneID,
      all = TRUE
  )
  df.summary[is.na(df.summary)] <- 0
}

df.summary <- merge(
    df.summary,
    dfTPM,
    by.x = Obio@parameterList$primaryAlignmentGeneID,
    by.y = Obio@parameterList$primaryAlignmentGeneID,
    all = TRUE
)
df.summary[is.na(df.summary)] <- 0


df.summary <- merge(
    df.summary,
    dfNormCounts,
    by.x = Obio@parameterList$primaryAlignmentGeneID,
    by.y = Obio@parameterList$primaryAlignmentGeneID,
    all = TRUE
)
df.summary[is.na(df.summary)] <- 0

df.summary <- merge(
    df.summary,
    dfPCA,
    by.x = Obio@parameterList$primaryAlignmentGeneID,
    by.y = Obio@parameterList$primaryAlignmentGeneID,
    all = TRUE
)
df.summary[is.na(df.summary)] <- 0

###############################################################################
## Add correlation bits, if they exist                                       ##

## Check gene level correlations ##
if (length(grep("geneCorTables", names(Obio@dataTableList))) > 0){
    dfAdd <- Obio@dataTableList$geneCorTables
    names(dfAdd)[grep("corCoef_", names(dfAdd))] <- paste0("add_venn_X_", names(dfAdd)[grep("corCoef_", names(dfAdd))])

    df.summary <- merge(
      df.summary,
      dfAdd,
      by.x = Obio@parameterList$primaryAlignmentGeneID,
      by.y = Obio@parameterList$primaryAlignmentGeneID,
      all = TRUE
    )
    df.summary[is.na(df.summary)] <- 0
}

## Check ts correlations.
if (length(grep("tsCorTables", names(Obio@dataTableList))) > 0){
    dfAdd <- Obio@dataTableList$tsCorTables

    df.summary <- merge(
      df.summary,
      dfAdd,
      by.x = Obio@parameterList$primaryAlignmentGeneID,
      by.y = Obio@parameterList$primaryAlignmentGeneID,
      all = TRUE
    )
    df.summary[is.na(df.summary)] <- 0
}

## Done with correlations                                                    ##
###############################################################################



## Adding annotation ##
dfAnno <- Obio@dfGeneAnnotation
dfAnno <- dfAnno[dfAnno[,Obio@parameterList$primaryAlignmentGeneID] %in% df.summary[,Obio@parameterList$primaryAlignmentGeneID],]

df.summary <- merge(
    df.summary,
    dfAnno,
    by.x = Obio@parameterList$primaryAlignmentGeneID,
    by.y = Obio@parameterList$primaryAlignmentGeneID,
    all = TRUE
)
df.summary[is.na(df.summary)] <- 0

df.summary[df.summary[,Obio@parameterList$geneIDcolumn] == 0, Obio@parameterList$geneIDcolumn] <- df.summary[df.summary[,Obio@parameterList$geneIDcolumn] == 0, Obio@parameterList$primaryAlignmentGeneID]

## Done creating dfSummary                                                   ##
###############################################################################

###############################################################################
## Add Variation measures                                                    ##

if (!is.null(Obio@dataTableList$dfRowVar)){
    dfVarMeasures <- Obio@dataTableList$dfRowVar

    df.summary <- merge(
        df.summary,
        dfVarMeasures,
        by.x = Obio@parameterList$primaryAlignmentGeneID,
        by.y = Obio@parameterList$primaryAlignmentGeneID,
        all = TRUE
    )
    df.summary[is.na(df.summary)] <- 0

}


## Done with variations                                                      ##
###############################################################################


###############################################################################
# Upload to website                                                           #
###############################################################################
#library(SBwebtools)


###############################################################################
# Prepare database table                                                      #
###############################################################################

###############################################################################
## Default Heatmap option A Ntop most variable genes                         ##

###############################################################################
## Option A Select most variable genes                                       ##

df.summary[["logFC_cut_off"]] <- 0

# rowSelVec <- as.vector(
#     dfSel[1:Obio@parameterList$NtopGenes,Obio@parameterList$primaryAlignmentGeneID]
# )
df.summary[df.summary[, Obio@parameterList$primaryAlignmentGeneID] %in% rowSelVec, "logFC_cut_off"] <- 1


## Select for heatmap ##
# df.summary <- selectHeatmapGenes(
#     dfData = df.summary,
#     cutOff = 1.3,
#     zeroOneCol = "logFC_cut_off",
#     selCol = "contrast_1_lg10p",
#     geneID = Obio@parameterList$geneIDcolumn
# )

## Select for heatmap all genes with a TPM row sum of 2 or higher ##
# df.summary[["logFC_cut_off"]] <- 0
# df.summary[,"logFC_cut_off"] <- rowSums(df.summary[,grep("norm_counts_", names(df.summary))])
# nSamples <- length(unique(dfDesign$sample.id))
# df.summary[,"logFC_cut_off"] <- ifelse(df.summary$logFC_cut_off >= 5*nSamples, 1, 0)

## Select for heatmap: abs change of at least 0.5 in any contrast ##

###############################################################################
## Create main database table                                                ##

Obio@databaseTable <- biologicSeqTools2::datatable.to.website.ptm(
    df.data = df.summary,
    gene.id.column = Obio@parameterList$primaryAlignmentGeneID,
    heatmap.genes = "",
    n.cluster.genes = 2000,
    count.data = TRUE,
    logFC.cut.off = 1,
    #use.logFC.columns.for.heatmap = FALSE,
    selector4heatmap.cols = "norm_counts",
    heatmap.preprocessing = "lg2.row.avg", # possible: "lg2", "lg2.row.avg", "none"
    hm.cut.off = 4,
    n.hm.cluster = 10,
    count.cut.off.filter = 0
)


## Done creating main database table                                         ##
###############################################################################


###############################################################################
## Create Excel output files                                                 ##

addedOutputCols <- names(Obio@databaseTable)[grep("corCoef", names(Obio@databaseTable))]
if (Obio@parameterList$geneIDcolumn != "hgnc_symbol"){
    addedOutputCols <- c(
        addedOutputCols,
        "hgnc_symbol"
    )
}

createAndFormatExcelOutputFiles(
    obj = Obio,
    metaCoreCountFilter = 1,
    customOutputCols = NULL,
    addedOutputCols = addedOutputCols
)

## Done creating Excel output files                                          ##
###############################################################################

###############################################################################
## Add Covar figure                                                          ##

# figureCol is DEseq2RV or CoVar
figureCol <- "DEseq2RV"



dfDat <- unique(
    Obio@databaseTable[,c(Obio@parameterList$geneIDcolumn, "DEseq2RV", "CoVar")]
)
dfDat[["Var"]] <- dfDat[,figureCol]
dfDat <- dfDat[order(dfDat$Var, decreasing = TRUE),]

dfDat <- dfDat[dfDat$Var > 0, ]
dfDat[["CoVarOrder"]] <- 1:nrow(dfDat)

# Obio@plotCollection[["CoVar"]] <- ggplot(
#     data=dfDat,
#     aes(x=CoVarOrder, y=Var)
# ) + geom_line( ) + geom_vline(xintercept = Obio@parameterList$NtopGene, col="red"
# ) +  theme(
#     axis.text.y   = element_text(size=8),
#     axis.text.x   = element_text(size=8),
#     axis.title.y  = element_text(size=8),
#     axis.title.x  = element_text(size=8),
#     axis.line = element_line(colour = "black"),
#     panel.border = element_rect(colour = "black", fill=NA, size=1),
#     plot.title = element_text(hjust = 0.5, size = 12)
# ) + labs(title = paste0("Variation Seen Across all Genes")
# )

## Done adding Covar figure                                                  ##
###############################################################################

###############################################################################
## Add additional plot columns from database                                 ##

## Done adding additional plot columns                                       ##
###############################################################################



###############################################################################
# Do GSEA                                                                     #
###############################################################################

database.table2 <- Obio@databaseTable
rmVec <- c(
     #grep("contrast_2", names(database.table2))
     grep("contrast_P", names(database.table2)),
     grep("contrast_L", names(database.table2)),
     grep("LRT_", names(database.table2)),
     grep("PCA_", names(database.table2)),
     grep("norm_counts_", names(database.table2)),
     grep("intercept_", names(database.table2)),
     grep("r2_P", names(database.table2)),
     grep("DEseq2NormalizedReadCounts", names(database.table2)),
     grep("p_value_P", names(database.table2)),
     grep("lg2_avg_", names(database.table2))
)

if (length(rmVec) > 0){
     database.table2 <- database.table2[,-rmVec]
}
# #
# ## Remove unnecessary columns, if needed ##
# #
# ## Create GSEA rank files ##
biologicSeqTools2::create.gsea.rnk.files(
     Obio@parameterList$localWorkDir,
     df.dataTable = database.table2,
     GSEA.colum.type = "_logFC_",
     gene.symbol.column.name = "hgnc_symbol"
 )
# #
# # ## Remove last character from file ##
# # #truncate -s -2 file
# # #sed '$d' file # remove last line
# #
# # ## Remove last character from file ##
# # #truncate -s -2 file
# # #sed '$d' file # remove last line
# #
# ## Function to create gmt file ##

if (!is.null(Obio@parameterList$GSEAtables)){
  tables <- Obio@parameterList$GSEAtables
} else {
  tables <- c(
    "mysigdb_h_hallmarks",
    "mysigdb_c5_BP" #,
    #Obio@parameterList$lab.categories.table
  )
}


# #
dfRefGmt <- create.gmt.file.from.ref.data.table(
     host = Obio@dbDetailList$host,
     dbname = "reference_categories_db_new",
     dataTable = tables,
     pwd = db.pwd,
     user=Obio@dbDetailList$db.user,
     gene.id.column = "hgnc_symbol"
 )


###############################################################################
## If dfRefGmt is very large, reduce to most variable genes                  ##
## Define relevant genes for selection ##
relevant.genes <- as.vector(
  unique(
    Obio@databaseTable[Obio@databaseTable$cluster_order, "hgnc_symbol"]
  )
)

lr <- length(relevant.genes)

if (nrow(dfRefGmt) > 10000 & lr > 100){
  TF <- apply(dfRefGmt[,3:ncol(dfRefGmt)], 1, function(x) sum(as.vector(x) %in% relevant.genes) )
  selector <- 0
  selVec <- TF >= selector
  
  while(sum(selVec) > 10000){
    
    selVec <- TF > selector
    
    selector <- selector + 1
    
    
    if (selector > 199){
      stop()
    }
  }
  
  dfRefGmt <- dfRefGmt[selVec, ]
  print(paste0(selector, " gene cut-off set for dfRefGmt. ", sum(selVec), " categories used for GSEA per sample."))
  
  
}



## Done                                                                      ##
###############################################################################

# #
# # ###############################################################################
# # ## Save gmt file                                                             ##
# # #"/camp/stp/babs/working/boeings/Projects/reference_data/GSEA.gmt.files/20160508.rna.seq.txn.analysis.gmt"
# #
localGmtDir <- paste0(
    Obio@parameterList$localWorkDir,
    "GSEA/"
)

if (!exists(localGmtDir)){
  dir.create(localGmtDir)
}

#
gmtDir<- paste0(
    Obio@parameterList$workdir,
    "GSEA/"
)

gmtFileName <- paste0(
    Obio@parameterList$project_id,
    ".",
    "projectGmtFile.gmt"
)

dfRefGmt <- dfRefGmt[!(duplicated(dfRefGmt[,1])),]

write.table(
    dfRefGmt,
    paste0(localGmtDir, gmtFileName),
    col.names = FALSE,
    row.names = FALSE,
    sep="\t",
    quote = F
)
# #
contrasts <- names(database.table2)[grep("logFC",names(database.table2))]
contrasts <- contrasts[contrasts != "logFC_cut_off"]
contrasts

GSEAfn <- paste0(
    Obio@parameterList$localWorkDir,
    "/GSEA/GSEAcommands.sh"
)
sink(GSEAfn)

cat("module load Java/1.8.0_131");cat("\n");cat("\n")
for (i in 1:length(contrasts)){
    gmtFile <- paste0(gmtDir, gmtFileName)
    contrastNo <- unlist(strsplit(contrasts[i], "_"))[2]
    nTopPlots <- 50
    GSEAdir <- paste0(Obio@parameterList$workdir, "GSEA")
    rnkFile <- paste0(GSEAdir, "/",contrasts[i],".rnk")

    gseaCMD <- paste0(
        "sbatch --time=03:00:00 --wrap '",
        "module load Java/1.8.0_131;",
        "java -Xmx2512m -cp /camp/stp/babs/working/boeings/Projects/software/gsea-3.0.jar xtools.gsea.GseaPreranked -gmx ",
        gmtFile,
        " -rnk ",
        rnkFile,
        " -rpt_label ",
        "contrast_",
        contrastNo,
        "_rnaSeqTxnTest",
        " -out ",
        GSEAdir,
        " -collapse false -mode Max_probe -norm meandiv -nperm 1000 -scoring_scheme classic -include_only_symbols true -make_sets true -plot_top_x ",
        nTopPlots,
        " -rnd_seed timestamp -set_max 2500 -set_min 10 -zip_report false -gui false",
        "' --job-name='GSEA_",contrastNo,"' --mem=50G -o GSEA_",contrastNo,".slurm >> commands.txt"
    )
    cat(gseaCMD);cat("\n");cat("\n");


}
sink()
#
```


<!--chapter:end:09-B.7.DEseq2.LRT.DGE.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B8."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```

```{r, echo=F, eval=TRUE, warning=FALSE, results=F}
dfMainData <- Obio@databaseTable
geneIDcolumn <- Obio@parameterList$geneIDcolumn
mostVarIDs <- Obio@dataTableList[["Ntop4pcaGeneSelection"]]
alignmentGeneID <- Obio@parameterList$primaryAlignmentGeneID

```


```{r, echo=T, eval=TRUE, warning=FALSE, results=F}
chnkVec <- as.vector(NULL, mode = "character")
plotList <- list()


###############################################################################
## Create Clusterdendrogram                                                  ##
tag <- paste0("Clusterdendrogram")

colSelVec <- c(
    alignmentGeneID,
    names(dfMainData)[grep("norm_counts", names(dfMainData))]
)

geneSelVec <- Obio@dataTableList[["Ntop4pcaGeneSelection"]]
geneSelVec <- geneSelVec[geneSelVec != duplicated(geneSelVec)]

dfData <- unique(dfMainData[, colSelVec])
dfData <- dfData[dfData[,alignmentGeneID] %in% geneSelVec, ]

row.names(dfData) <- dfData[,alignmentGeneID]
dfData[,alignmentGeneID] <- NULL
names(dfData) <- gsub("norm_counts_", "", names(dfData))
names(dfData) <- gsub("_TPM", "", names(dfData))





c <- cor(as.matrix(dfData), method="pearson")
d <- as.dist(1-c)
hr <- hclust(d, method = "ward.D", members=NULL)

plotList[[tag]] <- ggdendro::ggdendrogram(
    hr, 
    rotate = TRUE, 
    size = 4, 
    theme_dendro = FALSE, 
    color = "tomato"
    ) + ggplot2::theme_bw(
    ) +  ggplot2::theme(
        axis.text.y   = ggplot2::element_text(size=8),
        axis.text.x   = ggplot2::element_text(size=8),
        axis.title.y  = ggplot2::element_text(size=8),
        axis.title.x  = ggplot2::element_text(size=8),
        axis.line = ggplot2::element_line(colour = "black"),
        panel.border = ggplot2::element_rect(colour = "black", fill=NA, size=1),
        plot.title = ggplot2::element_text(hjust = 0.5, size = 12)
    )

FNbase <- paste0(tag, VersionPdfExt)
FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
FNrel <- paste0("report_figures/", FNbase)
    
pdf(FN)
    print(plotList[[tag]])
dev.off()
##                                                                       ##
###########################################################################
    
figCap <- paste0(
    '**Figure ',
    figureCount,
    'Sample Dendrogram:**  Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>.'
    
)
 
figureCount <- figureCount + 1
    
NewChnk <- paste0(
    paste0(
        "### Cluster Dendrogram \n"
    ),
    "\n```{r SampleDendrogram, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
        "\n",
        "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
)

chnkVec <- c(
    chnkVec,
    NewChnk
)



## Done creating clusterdendrogram                                           ##
###############################################################################


###########################################################################
## Add Coefficient of variation plot                                     ##

if (length(grep("CoVar", names(dfMainData))) > 0){
    tag <- "CoVar_Plot"
    
    figureCol = "DEseq2RV"
    dfDat <- unique(
        dfMainData[,c( geneIDcolumn, "DEseq2RV", "CoVar")]
    )
    dfDat[["Var"]] <- dfDat[,figureCol]
    dfDat <- dfDat[order(dfDat$Var, decreasing = TRUE),]

    dfDat <- dfDat[dfDat$Var > 0, ]
    dfDat[["CoVarOrder"]] <- 1:nrow(dfDat)
    
    

    if (!exists("NtopGene")){
         NtopGene <- length(mostVarIDs)
    }

    plotList[[tag]] <- ggplot2::ggplot(
    data=dfDat,
    ggplot2::aes(x=CoVarOrder, y=Var)
) + ggplot2::geom_line( ) + ggplot2::geom_vline(xintercept = NtopGene, col="red"
) +  ggplot2::theme_bw() + ggplot2::theme(
    axis.text.y   = ggplot2::element_text(size=8),
    axis.text.x   = ggplot2::element_text(size=8),
    axis.title.y  = ggplot2::element_text(size=8),
    axis.title.x  = ggplot2::element_text(size=8),
    axis.line = ggplot2::element_line(colour = "black"),
    panel.border = ggplot2::element_rect(colour = "black", fill=NA, size=1),
    plot.title = ggplot2::element_text(hjust = 0.5, size = 12)
) + ggplot2::labs(title = paste0("Variation Seen Across all Genes")
)

    ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0("CoVar", VersionPdfExt)
    FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)

    pdf(FN)
        print(plotList[[tag]])
    dev.off()
    ##                                                                       ##
    ###########################################################################

    link <- paste0(
              'An interactive version of this figure can be found ',
              '<a href="https://', urlString,'/',Obio@projectDetailList$project_id,'/scatterplot?x_axis=CoVarOrder&y_axis=CoVar&headline=2D+Scatterplot" target="_blank">here</a>', '. ')  
    
    figLegend <- paste0(
        '**Figure ', 
        figureCount, 
        ':** ',
        ' Coefficient of variation per gene. The red line indicates the cut-off for the most variable genes in this experiment. The most variable genes are the basis for the PCA analysis and heatmap displays. Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. ',
     link
)
    
    

    figureCount <- figureCount + 1

    NewChnk <- paste0(
        paste0("### Coefficient of Variation \n"),
            "\n```{r CoVarPlot, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figLegend,"'}\n",
            "\n",
            "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )


}

## Done adding coefficient of variation                                  ##
###########################################################################
if (length(plotList) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}
```

# Sample Characterization {`r tabVar`}
```{r, echo=FALSE, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knitr::knit(text = chnkVec, quiet = T), collapse = '\n'))
```

<!--chapter:end:10-B.8.sample.characterization.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B.9.pca."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

library(gplots)
library(RColorBrewer)
library(lattice)
library(genefilter)
library(tidyr)
library(ggplot2)
```

```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}

dfMainData <- Obio@databaseTable
geneIDcolumn <- Obio@parameterList$geneIDcolumn

if (geneIDcolumn != "hgnc_symbol" | geneIDcolumn != "mgi_symbol"){
    geneSelCol <- "hgnc_symbol"
} else {
    geneSelCol <- geneIDColumn
}

Ntop4pcaGeneSelection <- Obio@dataTableList$Ntop4pcaGeneSelection
HmDisplayCatsFromDb <- Obio@parameterList$HmDisplayCatsFromDb
project_id <- Obio@parameterList$project_id
alignmentGeneID <- Obio@parameterList$primaryAlignmentGeneID
lab.categories.table <- Obio@parameterList$lab.categories.table
ref.cat.db.table = lab.categories.table
reportFigDir <- Obio@parameterList$reportFigDir

labname <- Obio@parameterList$labname
dfDesign <- Obio@dfDesign
dfPCA <- Obio@dfPCA

## Use provided PCA file if available ##
if (!is.null(Obio@projectDetailList$PcaFN)){
    dfPCA <- read.delim(
        Obio@projectDetailList$PcaFN,
        header = T, 
        sep="\t",
        stringsAsFactors = F
    )
    
    names(dfPCA) <- gsub("\\.", "_", names(dfPCA))
    
    Obio@dfPCA <- data.frame(NULL)
    Obio@dfPCA <- dfPCA
}


dds <- Obio@ObjDds
```



```{r, echo=TRUE, eval=TRUE, warning=FALSE, results="hide"}
###############################################################################
## Add PCA plot                                                              ##
if (!exists("project_id")){
    project_id <- gsub("_designTable", "", designTB)
}


if (!exists("VersionPdfExt")){
    VersionPdfExt <- paste0(".V", gsub("-", "", Sys.Date()), ".pdf")
}

if (!exists("labname")){
    labname <- "TBD"
}

if (!exists("reportFigDir") || is.null(reportFigDir)){
    reportFigDir <- ""
}

chnkVec <- as.vector(NULL, mode = "character")
plotList <- list()
tag <- "PCAvariationPerDimension"


if (exists("Obio")){
    pos <- grep("PCApercentVar", slotNames(Obio))
    if (!is.null(Obio@PCApercentVar)){
        PCApercentVar <- Obio@PCApercentVar
    }
} else {
    PCApercentVar <- NULL
}


## Use custom PCA colors if specified ##

## Just in case we still have dots instead of underscores
names(dfPCA) <- gsub("\\.", "_", names(dfPCA))
pcaSampleGroups <- unique(sort(dfPCA$sample_group))

## If sample.group colors are set use those, otherwise set default.
pos <- grep("^sample.group_color$", names(dfDesign))

if (length(pos) == 0){
    ## Create default ##
    sample.group <- unique(dfDesign$sample.group)
    sample.group_color <- sample.group
            #library(scales)
    sample.group_color = scales::hue_pal()(length(sample.group_color))
            #sample.group_color = c("#990000", "#009900")
    
    ## set sample group colors manually
    
    dfGroupColors <- unique(data.frame(sample.group, sample.group_color))
    dfDesign <- merge(dfDesign, dfGroupColors, by.x = "sample.group", "sample.group")
    
}

dfColor <- unique(
        Obio@dfDesign[,c("sample.group", "sample.group_color")]
)

if (nrow(dfColor) == length(pcaSampleGroups)){
  
    namedColors <- dfColor$sample.group_color
    names(namedColors) <- dfColor$sample.group
  
    plotList[[tag]] <- ggplot2::ggplot(
        data = dfPCA,
        ggplot2::aes(x=PC1, y=PC2, fill = sample_group)
    ) + ggplot2::geom_vline(xintercept = 0, color = "grey", size=0.5
    ) + ggplot2::geom_hline(yintercept = 0, color = "grey", size=0.5
    ) + ggplot2::geom_point(
        size=2,
        shape = 21
    ) + ggplot2::scale_fill_manual("Sample Groups", values = namedColors
    )
} else {
    plotList[[tag]] <- ggplot2::ggplot(
        data = dfPCA,
        ggplot2::aes(x=PC1, y=PC2, fill = sample_group)
    ) + ggplot2::geom_vline(xintercept = 0, color = "grey", size=0.5
    ) + ggplot2::geom_hline(yintercept = 0, color = "grey", size=0.5
    ) + ggplot2::geom_point(
        size=2,
        shape = 21
    ) 
}




if (!is.null(PCApercentVar)){
    plotList[[tag]] <- plotList[[tag]] + ggplot2::labs(
        title = "PCA Plot", 
        x = paste0("PC1 \n ",round(100* Obio@PCApercentVar[1]),"% variability explained"),
        y = paste0("PC2 \n ",round(100* Obio@PCApercentVar[2]),"% variability explained")
    )
} else {
    plotList[[tag]] <- plotList[[tag]] + ggplot2::labs(
        title = "PCA Plot", 
        x = paste0("PC1"),
        y = paste0("PC2")
    )
}

plotList[[tag]] <- plotList[[tag]] +  ggplot2::theme_bw() + ggplot2::theme(
        axis.text.y   = ggplot2::element_text(size=8),
        axis.text.x   = ggplot2::element_text(size=8),
        axis.title.y  = ggplot2::element_text(size=12),
        axis.title.x  = ggplot2::element_text(size=12),
        axis.line = ggplot2::element_line(colour = "black"),
        panel.border = ggplot2::element_rect(colour = "black", fill=NA, size=1),
        plot.title = ggplot2::element_text(hjust = 0.5, size = 12)
)


###########################################################################
## Save plot to file                                                     ##
FNbase <- paste0("PCA12", VersionPdfExt)
FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
FNrel <- paste0("report_figures/", FNbase)
FNrelT <- paste0("report_tables/", FNbase)
    
pdf(FN)
    print(plotList[[tag]])
dev.off()
##                                                                       ##
###########################################################################
    


link <- paste0('<a href="https://biologic.crick.ac.uk/',project_id,'/pca?x_axis=PC1&y_axis=PC2', '" target="_blank">here</a>')

figCap <- paste0(
    "**Figure ",
    figureCount,
    ":** Variation in the first two PCA Dimensions. Download a pdf of this figure [here](", FNrel, "). ",
    "Further PCA dimensions are available interacively ", link, ". " 
)
 
figureCount <- figureCount + 1
    
NewChnk <- paste0(
paste0("### PCA_Plot \n"),
            "\n```{r ReferencePCA1, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
)

chnkVec <- c(
    chnkVec,
    NewChnk
)

            

## Done with PCA plot                                                        ##
###############################################################################


```


```{r, echo=TRUE, eval=TRUE, warning=FALSE, results="asis", message=F}

###############################################################################
## Add Variation estimate plot                                               ##

if (length(unique(dfDesign$dataseries)) > 1){
    independentDesignColSector <- c(
        "dataseries"
    )
} else {
    independentDesignColSector <- as.vector(NULL, mode = "character")
}

if (length(dfDesign$sample.group) > 1){
    independentDesignColSector <- c(
        independentDesignColSector,
        "sample.group"
    )
}

if (length(dfDesign$replicate) > 1){
    independentDesignColSector <- c(
        independentDesignColSector,
        "replicate"
    )
}

pos <- grep("^f_", names(dfDesign))
if (length(pos) > 0){
  independentDesignColSector <- c(
    names(dfDesign)[grep("^f_", names(dfDesign))]
  )

} else if (length(unique(dfDesign$dataseries)) > 1){
    independentDesignColSector <- c(
      "dataseries"
    )
}

###############################################################################
## Create independent variations plot                                        ##

designColSelector = unique(c(independentDesignColSector, "sample.id"))    

if (length(unique(dfDesign$sample.id)) > 42) {
    rld <- vst(dds)    
} else {
    rld <- rlog(dds)    
}
rv = rowVars(assay(rld))

## Select most variable genes
select = order(rv, decreasing = TRUE)[seq_len(length(mostVarIDs))]
dfTemp = t(assay(rld)[select, ])

pc <- prcomp(dfTemp, center=TRUE, scale=FALSE)

colDatMin = unique(dfDesign[, designColSelector])
rownames(colDatMin) = as.vector(colDatMin$sample.id)

colDatMin$sample.id <- NULL
#colnames(colData)[1] = "condition"

###############################################################################
## Get PCA Loadings                                                          ##

dfBase <- t(dfTemp)
pcaGenes = prcomp(scale(dfBase))

dfPcaGenes = data.frame(pcaGenes$x)

if (ncol(dfPcaGenes) > 10){
    dfPcaGenes <- dfPcaGenes[,1:10]
}

dfPcaGenes[[ alignmentGeneID]] <- row.names(dfPcaGenes)

#Obio@dfPCAgenes <- dfPcaGenes
dfPcaGenes <- Obio@dfPCAgenes

## Retrieve pca loadings from previous step


## Add Gene Annotation
dfAnno <- unique(Obio@dfGeneAnnotation[,c( alignmentGeneID, geneIDcolumn)])
dfAnno <- dfAnno[dfAnno[,alignmentGeneID] %in% dfPcaGenes[,alignmentGeneID], ]
dfLoad <- merge(
    dfAnno, 
    dfPcaGenes, 
    by.x = alignmentGeneID, 
    by.y = alignmentGeneID, 
    all = TRUE
)

dfLoad[is.na(dfLoad)] <- 0
dfLoad[dfLoad[,geneIDcolumn] == 0, geneIDcolumn] <- dfLoad[dfLoad[,geneIDcolumn] == 0, alignmentGeneID]

## Make Loadings Plot ##
## Plot ##
selXY <- c("contrast_P_PCA_estimatePCA1", "contrast_P_PCA_estimatePCA2", geneIDcolumn)
dfSel <- unique(dfLoad[,selXY])
#row.names(dfSel) <- dfSel$gene
dfSel[["highlight"]] <- ""
dfSel[["cat"]] <- ""
dfSel[["selX"]] <- ""
dfSel[["selY"]] <- ""
dfSel <- dfSel[order(dfSel[,selXY[1]], decreasing = FALSE), ]
dfSel[1:15, "highlight"] <- "+"
    
## Use two standard deviations for enrichment ##
twoSD <- 2*sd(dfSel[,selXY[1]])
twoSDxLine <- 2*sd(dfSel[,selXY[1]])
gSvec <- dfSel[dfSel[,selXY[1]] < -1* twoSD, geneIDcolumn]
    

dfSel <- dfSel[order(dfSel[,selXY[1]], decreasing = TRUE), ]
dfSel[1:15, "highlight"] <- "+"
gSvec <- dfSel[dfSel[,selXY[1]] >  twoSD, geneIDcolumn]
    
    
    
    ## Now dim 2
    dfSel <- dfSel[order(dfSel[,selXY[2]], decreasing = FALSE), ]
    dfSel[1:15, "highlight"] <- "+"
    
    twoSD <- 2*sd(dfSel[,selXY[2]])
    twoSDyLine <- 2*sd(dfSel[,selXY[2]])
    gSvec <- dfSel[dfSel[,selXY[2]] < -1* twoSD, geneIDcolumn]
    
    
    
    
    dfSel <- dfSel[order(dfSel[,selXY[2]], decreasing = TRUE), ]
    dfSel[1:15, "highlight"] <- "+"
    gSvec <- dfSel[dfSel[,selXY[2]] >  twoSD, geneIDcolumn]
    
    dfSel[["label"]] <- ""
    dfSel[dfSel$highlight == "+", "label"] <- dfSel[dfSel$highlight == "+", geneIDcolumn]
    
    ## Done
    tag <- "PCA_Loadings"
    
    colVec <- c("grey", "black")
    names(colVec) <- c("", "Selected")
    
    plotList[[tag]] <- ggplot2::ggplot(data=dfSel, aes_string(x=selXY[1],y=selXY[2], label="label")
    ) + geom_vline(xintercept = 0, color = "grey", size=0.5
    ) + geom_hline(yintercept = 0, color = "grey", size=0.5
    ) + geom_vline(xintercept = c(twoSDxLine, -1* twoSDxLine), color = "red", lty=2,size=0.5
    ) + geom_hline(yintercept = c(twoSDyLine, -1* twoSDyLine), color = "red", lty=2,size=0.5
    ) + geom_hline(yintercept = 0, color = "grey", size=0.5
    ) + geom_point(col="black") + scale_color_manual(values=colVec
    #) + ggtitle(paste0("PCA - Cell Level")
    ) + theme_bw(
    ) +  theme(
        #axis.text.y   = element_blank(), # element_text(size=8),
        #axis.text.x   = element_blank(), #element_text(size=8),
        #axis.title.y  = element_blank(), #element_text(size=8),
        #axis.title.x  = element_blank(), #element_text(size=8),
        axis.line = element_line(colour = "black"),
        legend.position = "none",
        panel.border = element_rect(colour = "black", fill=NA, size=1),
        #plot.title = element_text(hjust = 0.5, size = 12)
    )  #+ guides(col = guide_legend(override.aes = list(shape = 16, size = legendDotSize)))
    
    #points <-  as.vector(unique(dfSel[dfSel$highlight=="+", geneIDcolumn]))
    #plotListGene[[tag]] <- LabelPoints(plot = plotListGene[[tag]], points =points, repel = TRUE, xnudge = 0, ynudge = 0)
    
    plotList[[tag]] <-  plotList[[tag]]  + ggrepel::geom_text_repel(size = 3)
    
    
    ## Save to file ##
    FNbase <- paste0(tag, ".", selXY[1],".", selXY[2], VersionPdfExt)
    FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        plot(plotList[[tag]])
    dev.off()
    
    # dim1 <- gsub("PC_", "", xVec[i])
    # dim2 <- gsub("PC_", "", yVec[i])
    link <- paste0(
        '<a href="https://',urlString,'/',
        project_id,
        '/scatterplot?x_axis=contrast_P_PCA_estimatePCA1&y_axis=contrast_P_PCA_estimatePCA2&highlight_gene=&cat_id=ag_lab_categories__10',
        '" target="_blank">here</a>'
    )
    
    figCap <- paste0(
        "**Figure, " ,figureCount,":**Gene-level PCA plot for dimensions ", selXY[1], " and ", selXY[2], ". ",
        ". An interactive version of this figure can be found ", link, ". "
    )
   
    
    NewChnk <- paste0(
        "### PCA_Loadings \n",
        "\n```{r PCA_gene_level , results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",
        figCap,"'}\n",
        "\n",
        "\n print(plotList[['",tag,"']])",
        "\n cat(  '\n')",
        "\n\n\n```\n"   
    )
    
    chnkVec <- c(
        chnkVec,
        NewChnk
    )
    
    ## Done with genes                                                       ##
    ###########################################################################
    figureCount <- figureCount + 1


###############################################################################
## Add percent variaton per dimension plot                                   ##

tag <- "Variation_Per_PCA_Dimension"
    
## Add percent variation plot ##
PercentVariation <- round(100*Obio@PCApercentVar,1)
PCdimension <- paste0("PC", 1:length(PercentVariation))  
    
df <- data.frame(
    PercentVariation,
    PCdimension
)

legendString <- ""
if (nrow(df) > 20){
    legendString <- paste0("Only the first 20 principal components out of ",nrow(df)," are shown in the figure. ")
    df <- df[1:20,]
    PCdimension <- PCdimension[1:20]
    
}

df <- df[df$PercentVariation > 0,]

plotList[[tag]] <- ggplot(
    df, 
    aes(PCdimension, PercentVariation)
) + geom_col(
) + scale_x_discrete(limits=PCdimension) +  theme(
    axis.text.y   = element_text(size=8),
    axis.text.x   = element_text(size=8),
    axis.title.y  = element_text(size=8),
    axis.title.x  = element_text(size=8),
    axis.line = element_line(colour = "black"),
    panel.border = element_rect(colour = "black", fill=NA, size=1),
    plot.title = element_text(hjust = 0.5, size = 12)
) + theme_bw()
   
###########################################################################
## Save plot to file                                                     ##
FNbase <- paste0(tag, VersionPdfExt)
FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
FNrel <- paste0("report_figures/", FNbase)
    
pdf(FN)
    plotList[[tag]]
dev.off()
##                                                                       ##
###########################################################################
    
figCap <- paste0(
    '**Figure ',
    figureCount,
    ':** Percent of variaton explained by each principal component. ',
    legendString,
    'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. '
)
 
figureCount <- figureCount + 1
   
NewChnk <- paste0(
    "### Amount of variation explained by each PCA Dimension ",
    "\n```{r, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
    "\n",
    "\n print(plotList[['",tag,"']])",
    "\n cat(  '\n')",
    "\n\n\n```\n"   
)

chnkVec <- c(
        chnkVec,
        NewChnk
)
       
    
     
## Done                                                                      ##
###############################################################################





covar_PC_frame <- rbind(
    data.frame(
        Component=1:(nrow(pc$x)-1),
        spread(
            data.frame(
                v=names(colDatMin),
                val=NA_real_
            ),
            key=v, 
            value=val
        )
    )
)


tag <- "independentVariation"

#if (mode == "independentVariation"){        
    covar_PC_frame <- covar_PC_frame[c("Component", names(colDatMin))]
            for (i in 1:nrow(covar_PC_frame)) {
                ## old code from gavin below ##
                fit <- lm(pc$x[,i]~., data=colDatMin)
                covar_PC_frame[i,-1] <- drop1(fit, test="F")[names(covar_PC_frame)[-1],"Pr(>F)"]
                
                ## replaced 25032019 ##
                # Fit each variable individually @
            }
    
    
    plotFrame <- gather(covar_PC_frame, key=Covariate, value=p, -Component)
        plotFrame <- plotFrame[order(plotFrame$Component, decreasing = FALSE),]
        
        if (nrow(plotFrame) > 20) {
            plotFrame <- plotFrame[1:(length(names(colDatMin)) * 20), ]
        }
        
        ## Cut to 10 dimensions ##
        
        plotList[[tag]] <- ggplot(
            plotFrame, 
            aes(x=Component, y=Covariate, fill=-log10(p))) +
            geom_raster() +
            scale_fill_gradient(low="grey90", high="red") +
            theme_classic() + 
            coord_fixed() +
            scale_x_continuous( labels = unique(plotFrame$Component), breaks = unique(plotFrame$Component)
            )
        
        ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0("Independent.variation.per.pca.dimension", VersionPdfExt)
    FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(plotList[[tag]])
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    figCap <- paste0(
        '**Figure ',
        figureCount,
        ':** Independent sources of Variation per principal component. ',
        'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. '
    )
 
    figureCount <- figureCount + 1
   
    NewChnk <- paste0(
            "### Independent Source of Variation Per PCA Component ",
            "\n```{r var-per-pca-independent, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )
        
###############################################################################
## Now the plot tolarating dependent variations                              ##

tag <- "dependentVariation"
    
dependentDesignColSelector<- c(
    independentDesignColSector,
    names(Obio@dfDesign)[grep("comp_", names(dfDesign))],
    names(Obio@dfDesign)[grep("LRT_", names(dfDesign))]
)    
    
covar_PC_frame <- rbind(
            data.frame(
                Component=1:(nrow(pc$x)-1),
                spread(
                    data.frame(
                        v=names(colDatMin),
                        val=NA_real_
                    ),
                    key=v, 
                    value=val
                )
            )
        )

mode <- "dependentVariation"
    ## Do fitting individually ##
    ## Check that all selVec entries exist
        fitVars <- names(covar_PC_frame)
        fitVars <- fitVars[fitVars != "Component"]
        covar_PC_frame <- covar_PC_frame[c("Component", names(colDatMin))]


        for (i in 1:nrow(covar_PC_frame)) {
            ## old code from gavin below ##
            for (j in 1:length(fitVars)){
                corVar <- fitVars[j]

                if (length(unique(dfDesign[, corVar])) > 1) {
                    pcDim <- paste0("pc$x[,",i,"]")
                    regressionFormula <- as.formula(paste(pcDim, corVar, sep="~"))
                    fit <- lm(regressionFormula, data=colDatMin)
                    pVal <- as.vector(summary(fit)$coefficients[,4][2])
                    covar_PC_frame[i, corVar] <- pVal
                }
            }
        }    
        
    plotFrame <- gather(covar_PC_frame, key=Covariate, value=p, -Component)
    plotFrame <- plotFrame[order(plotFrame$Component, decreasing = FALSE),]

    if (nrow(plotFrame) > 20) {
        plotFrame <- plotFrame[1:(length(names(colDatMin)) * 20), ]
    }
    
       
    ## Cut to 10 dimensions ##
    
    plotList[[tag]] <- ggplot(
        plotFrame, 
        aes(x=Component, y=Covariate, fill=-log10(p))) +
        geom_raster() +
        scale_fill_gradient(low="grey90", high="red") +
        theme_classic() + 
        coord_fixed() +
        scale_x_continuous( labels = unique(plotFrame$Component), breaks = unique(plotFrame$Component)
        ) +  ggplot2::theme(
        axis.text.y   = ggplot2::element_text(size=8),
        axis.text.x   = ggplot2::element_text(size=8),
        axis.title.y  = ggplot2::element_text(size=8),
        axis.title.x  = ggplot2::element_text(size=8),
        axis.line = ggplot2::element_line(colour = "black"),
        panel.border = ggplot2::element_rect(colour = "black", fill=NA, size=1),
        plot.title = ggplot2::element_text(hjust = 0.5, size = 12)
    ) + ggplot2::labs(title = "Independent Sources of Variation per PCA Component")
        
        ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0("Dependent.permissive.variation.per.pca.dimension", VersionPdfExt)
    FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        plotList[[tag]]
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    figCap <- paste0(
        '**Figure ',
        figureCount,
        ':** Dependent-tolerant sources of Variation per principal component. ',
        'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. '
    )
 
    figureCount <- figureCount + 1
   
    NewChnk <- paste0(
            "### Dependent-tolerant Source of Variation Per PCA Component ",
            "\n```{r, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )
       
    
    
## Done                                                                      ##
###############################################################################
        

## Add PCA loadings


    ## Add genes driving this PCA dimension ## 
#     if (!is.null(Obio@plotCollection$PCA1_PCA_fitting)){
#         
#         pFit <- Obio@plotCollection$PCA1_PCA_fitting
#         
#         
#         ###########################################################################
#         ## Save plot to file                                                     ##
#         FNbase <- paste0("Variation.per.pca.dimension.", VersionPdfExt)
#         FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
#         FNrel <- paste0("report_figures/", FNbase)
#     
#         pdf(FN)
#             print(pFit)
#         dev.off()
#         ##                                                                       ##
#         ###########################################################################
#         link <- paste0(
#             "https://biologic.crick.ac.uk/",
#             project_id,
#             "/scatterplot?x_axis=contrast_P_PCA_estimatePCA1&y_axis=contrast_P_lg10p_PCA1&highlight_gene=&cat_id=ag_lab_categories__10")
#     figCap <- paste0(
#         "**Figure ",
#         figureCount,
#         ":** Genes driving principal components. ",
#         "Download a pdf of this figure [here](", FNrel, "). ",
#         "Genes driving this - and other PCA dimensions can be accessed interactively [here](", link, "). " 
#     )
#  
#     figureCount <- figureCount + 1
#    
#     NewChnk <- paste0(
#             "### Genes Driving PCA Components ",
#             "\n```{r var-per-pca-genes, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
#             "\n",
#             "\n print(pFit)",
#             "\n cat(  '\n')",
#             "\n\n\n```\n"   
#     )
#     chnkVec <- c(
#         chnkVec,
#         NewChnk
#     )
#         
#     }
# }
## Done adding PCA plots                                                     ##
###############################################################################
if (length(plotList) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}

```

## Principal Component Analysis (PCA) {`r tabVar`}

A birds eye view of your data can be obtained by looking at the results of the principal component analysis (PCA). The principal component analysis looks at your count dataset as a whole and determines how 'close' two samples are in terms of overall data structure. First of all, you want your replicated to cluster together. After that, you will be able to determine how different various sets of sample groups are.

A more detailed explanation on PCA is give in this [PCA video](https://www.youtube.com/watch?v=_UVHneBUBW0&feature=youtu.be).

```{r, echo=FALSE, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knitr::knit(text = chnkVec, quiet = T), collapse = '\n'))
```

<!--chapter:end:11-B.9.pca.characterization.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B10.Heatmap."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")
```

```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}

###############################################################################
## Load Obio object                                                          ##

## Done Loading Obio object                                                  ##
###############################################################################

dfMainData <- Obio@databaseTable
geneIDcolumn <- Obio@parameterList$geneIDcolumn
if (geneIDcolumn != "hgnc_symbol" | geneIDcolumn != "mgi_symbol"){
    geneSelCol <- "hgnc_symbol"
} else {
    geneSelCol <- geneIDColumn
}
Ntop4pcaGeneSelection <- Obio@dataTableList$Ntop4pcaGeneSelection
HmDisplayCatsFromDb <- Obio@parameterList$HmDisplayCatsFromDb
project_id <- Obio@parameterList$project_id
alignmentGeneID <- Obio@parameterList$primaryAlignmentGeneID
lab.categories.table <- Obio@parameterList$lab.categories.table



ref.cat.db.table = lab.categories.table
reportFigDir <- Obio@parameterList$reportFigDir
labname <- Obio@parameterList$labname
dfDesign <- Obio@dfDesign

############################################################################### 
## Check if lab.categories.table exists, and create if it does not           ##
dbDB <- DBI::dbConnect(
    drv = RMySQL::MySQL(), 
    user = Obio@dbDetailList$db.user, 
    password = db.pwd, 
    host = Obio@dbDetailList$host, 
    dbname = Obio@dbDetailList$ref.cat.db
)
        
query <- paste0(
    'SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = DATABASE() AND table_name = "',lab.categories.table,'";'
)
        
dfOut <-  DBI::dbGetQuery(dbDB, query)
DBI::dbDisconnect(dbDB)
        
## Create lab table if it doesn't exists ##
if (dfOut[1,1] == 0){
      dbDB <- DBI::dbConnect(
      drv = RMySQL::MySQL(), 
      user = Obio@dbDetailList$db.user, 
      password = db.pwd, 
      host = Obio@dbDetailList$host, 
      dbname = Obio@dbDetailList$ref.cat.db
  )
          
      cat_id_string <- paste0(lab.categories.table, "__1")
        
  query1 <- paste0(
      "CREATE TABLE ",lab.categories.table," AS SELECT * FROM ag_lab_categories WHERE row_names = 10"
  )
  res <-  DBI::dbGetQuery(dbDB, query1)
  
  query2 <- paste0(
      "UPDATE ",lab.categories.table," SET row_names = 1 WHERE row_names = 10;"
  )
  res <-  DBI::dbGetQuery(dbDB, query2)
  query3 <- paste0(
      "UPDATE ",lab.categories.table," SET cat_id = '",cat_id_string,"' WHERE row_names = 1;"
  )
  res <-  DBI::dbGetQuery(dbDB, query3)
  
  
  DBI::dbDisconnect(dbDB)
}
## Done                                                                      ##
###############################################################################
```


```{r, echo=T, eval=TRUE, warning=FALSE, results=F}
## Make heatmap gene list
logFCselections <- names(dfMainData)[grep("_logFC_", names(dfMainData))]
padjSelections <- gsub("_logFC_", "_padj_", logFCselections)
dfSelections <- data.frame(logFCselections, padjSelections)
dfSelections <- dfSelections[dfSelections[,"padjSelections"] %in% names(dfMainData),]
if (nrow(dfSelections) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}
```

## Gene Expression Overview {`r tabVar`}
```{r, echo=TRUE, eval=TRUE, warning=FALSE, results=F, message=F}
## Make heatmap gene list
logFCselections <- names(dfMainData)[grep("_logFC_", names(dfMainData))]
padjSelections <- gsub("_logFC_", "_padj_", logFCselections)
dfSelections <- data.frame(logFCselections, padjSelections)
dfSelections <- dfSelections[dfSelections[,"padjSelections"] %in% names(dfMainData),]
if (!exists("project_id")){
    project_id <- gsub("_designTable", "", designTB)
}
if (!exists("VersionPdfExt")){
    VersionPdfExt <- paste0(".V", gsub("-", "", Sys.Date()), ".pdf")
}
if (!exists("labname")){
    labname <- "TBD"
}
if (!exists("reportFigDir") || is.null(reportFigDir)){
    reportFigDir <- ""
}
###############################################################################
## First heatmap: Most variable genes                                        ##
HMplotList <- list()
chnkVec <- as.vector(NULL, mode="character")
if (geneIDcolumn == "mgi_symbol" | geneIDcolumn == "hgnc_symbol"){
    geneSelCol <- geneIDcolumn
} else {
    geneSelCol <- "hgnc_symbol"
}
# if (is.null(HmDisplayCatsFromDb)){
    HmDisplayCatsFromDb <- list()
# }
    
## Start with Nmost variable genes ##
if (exists("Ntop4pcaGeneSelection") && !is.null(Ntop4pcaGeneSelection) | 
    length(Ntop4pcaGeneSelection) > 3){
    dfDataTable <- dfMainData
    
    geneVec <- as.vector(unique(dfDataTable[dfDataTable[,alignmentGeneID] %in% Ntop4pcaGeneSelection,geneIDcolumn]))
} else {
    geneVec <- unique(dfMainData[dfMainData$logFC_cut_off == 1, geneIDcolumn])
    Ntop4pcaGeneSelection <- geneVec
}
cat.name <- paste0("Experiment_",project_id, "_",length(Ntop4pcaGeneSelection),"_most_variable_genes")
cat.description.text <- paste0(
    "In this gene set the ",
    length(geneVec),
    " most variable genes from ",
    labname,
    " lab experiment \\<a href=\\'https:\\/\\/biologic.crick.ac.uk\\/",
    project_id,"\\'\\>",project_id, "\\<\\/a\\> are compiled."
)
HmDisplayCatsFromDb[[cat.name]] <- list(
      "cat_type" = paste0("temp_", project_id),
      "data_source" = paste0(labname, " Lab") ,
      "cat.description.text" = cat.description.text,
      "geneVec" = geneVec,
      "catID" = NULL,
      "comparisonID" = NULL
)
###########################################################################
## Make one heatmap per comparison                                       ##
    
numextract <- function(string){ 
    stringr::str_extract(string, "contrast_\\-*\\d+\\.*\\d*_")
} 

dfSelections[["designColumn"]] <- sapply(dfSelections$padjSelections, function(x) unlist(strsplit(x, "padj_"))[2]) 

## Get design column from model file ##
designColNames <- sapply(dfSelections$padjSelections, function(x) unlist(strsplit(x, "padj_"))[2])

modelComp <- as.vector(dfModel$comparison)
designColNames[!(designColNames %in% modelComp)] <- ""

dfModelSel <- dfModel[dfModel$comparison %in% designColNames,]

dfSelections[["designColumn"]] <- ""

    if (nrow(dfModelSel) > 0){
    ## replace all entries found in dfModel to comparisonID
    for (i in 1:nrow(dfModelSel)){
        designColNames <- gsub(paste0("^", as.vector(dfModel[i, "comparison"]), "$"), as.vector(dfModel[i, "comparisonID"]),designColNames )
    }
    
    dfSelections[["designColumn"]]  <-  designColNames 
} 



for (k in 1:nrow(dfSelections)){
    dfDataTable <- dfMainData
    padjCutOff <- 0.05
        
    geneVec <- as.vector(
        unique(
            dfDataTable[dfDataTable[,as.vector(dfSelections$padjSelections[k])] < 0.05 & dfDataTable[,as.vector(dfSelections$logFCselections[k])] != 0,geneIDcolumn]
            )
    )
        
    if (length(geneVec) > 1500){
        padjCutOff <- 0.01
        
        geneVec <- as.vector(
            unique(
                dfDataTable[dfDataTable[,as.vector(dfSelections$padjSelections[k])] < 0.01 & 
                                    dfDataTable[,as.vector(dfSelections$logFCselections[k])] != 0,geneIDcolumn
                ]
            )
        )
    }
        
    ## Insert gene set into database ##
    cat.name <- paste0(
        "Experiment_",project_id, "_",dfSelections$padjSelections[k],"_smaller_than_", gsub("[.]", "_", padjCutOff)
    )
    
    cat.description.text <- paste0(
        "In this gene set the genes that exhibited an adjusted p value of less than ", 
        padjCutOff, 
        " in the differential gene expression comparsion ", 
        as.vector(dfSelections$logFCselections[k]),
        " in ",
        labname,
        " lab experiment \\<a href=\\'https:\\/\\/biologic.crick.ac.uk\\/",project_id,"\\'\\>",project_id, "\\<\\/a\\> are compiled."
      )
        
      comparisonID <- as.vector(dfSelections[k, "designColumn"])
      if (comparisonID == ""){
          comparisonID <- NULL
      }
    
      HmDisplayCatsFromDb[[cat.name]] <- list(
          "cat_type" = paste0("temp_", project_id),
          "data_source" = paste0(labname, " Lab") ,
          "cat.description.text" = cat.description.text,
          "geneVec" = geneVec,
          "catID" = NULL,
          "comparisonID" = comparisonID
      )
            
}
## Done with making heatmap list                                         ##
###########################################################################
```

```{r, echo=F, eval=TRUE, warning=FALSE, results="asis"}
###########################################################################
## Upload to database                                                    ##
## New gene categories to upload list ##
if (is.null(Obio@projectDetailList[["projectGeneCategories"]])){
    Obio@projectDetailList[["projectGeneCategories"]] <- list()
} 
Obio@projectDetailList[["projectGeneCategories"]] <- c(
    Obio@projectDetailList[["projectGeneCategories"]],
    HmDisplayCatsFromDb
)
createProjectRefDbTables <- T
if (createProjectRefDbTables){
    ## Assign category IDs ##
    ## First check if categories exist already
    ## if they do - delete those and re-assign cat id
    ## if they don't find next available cat id
    for (i in 1:length(HmDisplayCatsFromDb)){
        dbDB <- DBI::dbConnect(
            drv = RMySQL::MySQL(), 
            user = Obio@dbDetailList$db.user, 
            password = db.pwd, 
            host = Obio@dbDetailList$host, 
            dbname = Obio@dbDetailList$ref.cat.db
        )
        
        query <- paste0("SELECT * FROM ",lab.categories.table," WHERE cat_name = '", names(HmDisplayCatsFromDb)[i], "' and cat_type = '", HmDisplayCatsFromDb[[i]]$cat_type, "';")
        dfOut <-  dbGetQuery(dbDB, query)
        dbDisconnect(dbDB)
        
        if (nrow(dfOut) == 1){
            HmDisplayCatsFromDb[[i]][["cat_id"]] <- dfOut$cat_id
        } else {
          HmDisplayCatsFromDb[[i]][["cat_id"]] <- NULL
        }
        
    }
    
    
    
    ## Delete all existing tables for this project ##
    dbDB <- DBI::dbConnect(
            drv = RMySQL::MySQL(), 
            user = Obio@dbDetailList$db.user, 
            password = db.pwd, 
            host = Obio@dbDetailList$host, 
            dbname = Obio@dbDetailList$ref.cat.db
    )
    
    ## Insert categories ##
    
    UploadList <- HmDisplayCatsFromDb
    
    ## Translate geneIDs to human for non-standard species ##
    rmVec <- as.vector(NULL, mode="numeric")
    
    if (geneIDcolumn != geneSelCol){
        for (d in 1:length(UploadList)){
            convertedGeneVec <- dfMainData[dfMainData[,geneIDcolumn] %in% UploadList[[d]]$geneVec ,geneSelCol]
            convertedGeneVec <- unique(convertedGeneVec)
            convertedGeneVec <- convertedGeneVec[convertedGeneVec != ""]
            convertedGeneVec <- convertedGeneVec[convertedGeneVec != 0]
            
            if (length(convertedGeneVec > 0)){
                UploadList[[d]]$geneVec <- convertedGeneVec
            } else {
                rmVec <- c(
                  rmVec, 
                  d
                )
            }
            
        }
    }
    
    if (length(rmVec) > 0){
        UploadList <- UploadList[-rmVec]
    }
    
        
    ## Upload to database ##
    createProjectRefDbTables <- T
    if (createProjectRefDbTables){  
        for (i in 1:length(UploadList)){
            ###########################################################################
        ## check if cat name exist and delete if it does                         ##
        #library(RMySQL)
        dbDB <- DBI::dbConnect(
            drv = RMySQL::MySQL(), 
            user = Obio@dbDetailList$db.user, 
            password = db.pwd, 
            host = Obio@dbDetailList$host, 
            dbname = Obio@dbDetailList$ref.cat.db
        )
        
        query <- paste0("SELECT cat_id, cat_name FROM ",lab.categories.table, " WHERE cat_name = '",names(UploadList)[i],"'")
        
        dfTest <- dbGetQuery(dbDB, query)
        dbDisconnect(dbDB)
        ## Done                                                                  ##
        ###########################################################################
        if (nrow(dfTest) ==1){
            catID = as.vector(dfTest[1,"cat_id"])
        } else {
        
            catID <- biologicSeqTools2::add.category.to.lab.reference.table.hs(
            host = Obio@dbDetailList$host,
            pwd = db.pwd,
            user = Obio@dbDetailList$db.user,
            cat.ref.db = "reference_categories_db_new",
            cat.ref.db.table = lab.categories.table,
            gene.vector = UploadList[[i]]$geneVec,
            gene.id = geneSelCol, #options hgnc_symbol, mgi_symbol
            mm.hs.conversion.file =  paste0(hpc.mount, "Projects/reference_data/20160303.homologene.data.txt"),
            cat_name = names(UploadList)[i],
            cat_type = UploadList[[i]]$cat_type,
            data_source = UploadList[[i]]$data_source,
            comments_1 = "",
            comments_2 = "",
            new.lab.category.table = F,
            cat.description.db  = "internal_categories",
            cat.description.db.table = "category_description",
            cat.description.text = UploadList[[i]]$cat.description.text,
            lab.name = labname
        )
        }
        
        UploadList[[i]][["cat_id"]] <- catID
        
        ## Add cat id to main list
        HmDisplayCatsFromDb[[names(UploadList)[i]]][["cat_id"]] <- catID
      
        }
    }
}
## Upload to database                                                        ##
###############################################################################
```

```{r, echo=TRUE, eval=TRUE, warning=FALSE, results="asis"}
## Create Heatmaps ##
###############################################################################
## Reorder Obio@parameterList$HmDisplayCatsFromDb so that 500 var is on top  ##
pos <- grep("most_variable_genes", names(HmDisplayCatsFromDb))
if (length(pos) > 0){
  pos <- pos[1]
  newOrder <- c(
    names(HmDisplayCatsFromDb)[pos],
    names(HmDisplayCatsFromDb)[-pos]
  )
  HmDisplayCatsFromDb <- HmDisplayCatsFromDb[newOrder]
}
##                                                                           ##
###############################################################################
## Begin heatmap plotting loop ##
for (k in 1:length(HmDisplayCatsFromDb)){
    
    ## Select samples to display ##
    if (!is.null(HmDisplayCatsFromDb[[k]]$comparisonID)){
        dfSel <- unique(dfDesign[,c("sample.id", HmDisplayCatsFromDb[[k]]$comparisonID)])
        dfSel <- dfSel[dfSel[,HmDisplayCatsFromDb[[k]]$comparisonID] != "",]
        
        if (nrow(dfSel) > 1){
            sampleSelection <- paste0("norm_counts_", unique(dfSel$sample.id))    
        } else {
            sampleSelection <- paste0("norm_counts_", unique(dfDesign$sample.id))
        }
        
    } else {
        sampleSelection <- paste0("norm_counts_", unique(dfDesign$sample.id))
    }
  
    ## Check ##
    sampleSelection <- names(dfMainData)[unlist(sapply(sampleSelection, function(x) grep(x, names(dfMainData))))]
    selVec <- c(geneIDcolumn, sampleSelection )
    ## Get gene selection 
    geneSel <- HmDisplayCatsFromDb[[k]]$geneVec
    
    geneSel <- unique(geneSel)
    
    if (length(geneSel) > 2){
        dfDataTable <- dfMainData
        dfDataTable <- unique(dfDataTable[dfDataTable[, geneIDcolumn] %in% geneSel, selVec])
        
        dfHmBase <- unique(dfDataTable[,selVec])
        
        while (sum(duplicated(dfHmBase[, geneIDcolumn])) > 0){
            dfHmBase[duplicated(dfHmBase[, geneIDcolumn]), geneIDcolumn] <- paste0(
                dfHmBase[duplicated(dfHmBase[, geneIDcolumn]), 
                geneIDcolumn], "_", i
            )
            i=i+1
        }
        
        row.names(dfHmBase) <- dfHmBase[, geneIDcolumn]
        dfHmBase[, geneIDcolumn] <- NULL
        
        ## calculate row-means ##
        rowMeans <- apply(
            dfHmBase,
            1,
            function(x) mean(x)
        )
            
        rowMeans[rowMeans ==0] <- 0.001
            
        hmMax <- 4
        for (i in 1:ncol(dfHmBase)){
            dfHmBase[,i] <- log2(dfHmBase[,i] / rowMeans)
        }
            
        dfHmBase[dfHmBase > hmMax] <- hmMax
        dfHmBase[dfHmBase < -1*hmMax] <- -1*hmMax
            
            
        names(dfHmBase) <- gsub("norm_counts_", "", names(dfHmBase))
        names(dfHmBase) <- gsub("_TPM", "", names(dfHmBase))
            
        mHmBase <- data.matrix(dfHmBase)
            
        if ( nrow(mHmBase) < 51){
            showRowNames <- TRUE
        } else {
            showRowNames <- FALSE
        }
        
        ## Create heatmap plot ##
        #library(ComplexHeatmap)
       
        f1 = circlize::colorRamp2(seq(-4, 4, length = 3), c("#3060cf", "#fffbbc","#c4463a"))    
    
        anno <- as.data.frame(colnames(mHmBase))
        colnames(anno) <- "Sample"
        anno$Group <- sapply(as.vector(anno[,1]), function(x) paste0(unlist(strsplit(x, "_"))[1], "_",unlist(strsplit(x, "_"))[2]))
        
        ## Color sample groups in line with the designated sample group color ##
        #######################################################################
        ## Add sample group colors if needed
        pos <- grep("sample.group_color", names(dfDesign))
        
        if (length(pos) == 0){
            sample.group <- unique(dfDesign$sample.group)
            sample.group_color <- sample.group
            #library(scales)
            sample.group_color = scales::hue_pal()(length(sample.group_color))
            #sample.group_color = c("#990000", "#009900")
            dfGroupColors <- unique(data.frame(sample.group, sample.group_color))
            dfDesign <- merge(dfDesign, dfGroupColors, by.x = "sample.group", "sample.group")
            if (exists("Obio")){
                Obio@dfDesign <- dfDesign
            }
            
        }
        
        
        
        #library(scales)
        #hue_pal()(2)
        df <- unique(data.frame(dfDesign[,c("sample.id", "sample.group", "sample.group_color")]))
        df <- df[df$sample.id %in% colnames(mHmBase),]
        df2 <- data.frame(df[,"sample.group"])
        names(df2) <- "Group"
        
                
        GroupVec <- as.vector(unique(df$sample.group_color))
        names(GroupVec) <- as.vector(unique(df$sample.group))
        
        
        
        #df2 <- unique(data.frame(Obio@dfDesign[,c("sample.id","sample.group", "sample.group_color")]))
        #df2 <- data.frame(df2[,c("sample.group")])
        
        
        
        ha = ComplexHeatmap::HeatmapAnnotation(df = df2, col = list(Group = GroupVec))
    
        ComplexHeatmap::ht_opt(
            legend_border = "black",
            heatmap_border = TRUE,
            annotation_border = TRUE
        )
        
        hmTitle <- unlist(strsplit(names(HmDisplayCatsFromDb)[k], "_padj_"))
        if (length(hmTitle) == 2){
            hmTitle <- paste0("padj_", hmTitle[2])
        } else {
            hmTitle <- names(HmDisplayCatsFromDb)[k]
        }
        
        HMplotList[[names(HmDisplayCatsFromDb)[k]]] = ComplexHeatmap::Heatmap(
            mHmBase,
            column_title = gsub(
                    "_", 
                    " ", 
                    hmTitle
            ),
            name = paste0("HM_", k), 
            #row_km = 5,
            col = f1,
           
            show_column_names = T,
            show_row_names = showRowNames,
            border = TRUE,
            
            #Dendrogram configurations: columns
            clustering_distance_columns="euclidean",
            clustering_method_columns="complete",
            column_dend_height=unit(10,"mm"),
            
            #Dendrogram configurations: rows
            clustering_distance_rows="euclidean",
            clustering_method_rows="complete",
            row_dend_width=unit(10,"mm"),
            top_annotation = ha,
            show_heatmap_legend = TRUE
            #row_title = NULL,
            #show_row_dend = FALSE
        ) 
        
    ComplexHeatmap::ht_opt(RESET = TRUE)
        
    if (! is.null(HmDisplayCatsFromDb[[k]]$cat_id)){
        link <- paste0(
            'An interactive version of this heatmap with an option for further filtering can be found <a href="',
            "https://biologic.crick.ac.uk/",
            project_id,"/category-view/",
            HmDisplayCatsFromDb[[k]]$cat_id,'" target="_blank">here</a>.'
        )
        
    } else {
        link <- ""
    }
    
    ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0("Heatmap.", names(HmDisplayCatsFromDb)[k],VersionPdfExt)
    FN <- paste0(reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(HMplotList[[names(HmDisplayCatsFromDb)[k]]])
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    figCap <- paste0(
    '**Figure ',
    figureCount,
    ':** Heatmap showing the gene category ', gsub('_', ' ', names(HmDisplayCatsFromDb)[k]), '. ',
        'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. ',
        link
    )
    
    figureCount <- figureCount + 1 
    
    NewChnk <- paste0(
            "### HM_", names(HmDisplayCatsFromDb)[k],
            "\n```{r, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(HMplotList[['",names(HmDisplayCatsFromDb)[k],"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )
    
    chnkVec <- c(
        chnkVec,
        NewChnk
    )
    
    } ## End making heatmap 
    
## Done making heatmaps                                                      ##
###############################################################################
}
## End heatmap plotting loop
## Done                                                                      ##
###############################################################################
```



```{r, echo=FALSE, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knitr::knit(text = chnkVec, quiet = T), collapse = '\n'))
```

<!--chapter:end:12-B.10.heatmaps.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B11.DGE."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```


```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}

dfMainData <- Obio@databaseTable
geneIDcolumn <- Obio@parameterList$geneIDcolumn

if (geneIDcolumn != "hgnc_symbol" | geneIDcolumn != "mgi_symbol"){
    geneSelCol <- "hgnc_symbol"
} else {
    geneSelCol <- geneIDColumn
}

Ntop4pcaGeneSelection <- Obio@dataTableList$Ntop4pcaGeneSelection
HmDisplayCatsFromDb <- Obio@parameterList$HmDisplayCatsFromDb
project_id <- Obio@parameterList$project_id
alignmentGeneID <- Obio@parameterList$primaryAlignmentGeneID
lab.categories.table <- Obio@parameterList$lab.categories.table
ref.cat.db.table = lab.categories.table
reportFigDir <- Obio@parameterList$reportFigDir

labname <- Obio@parameterList$labname
dfDesign <- Obio@dfDesign

```


```{r, echo=T, eval=TRUE, warning=FALSE, results="asis"}
## Make heatmap gene list
logFCselections <- names(dfMainData)[grep("_logFC_", names(dfMainData))]
padjSelections <- gsub("_logFC_", "_padj_", logFCselections)

dfSelections <- data.frame(logFCselections, padjSelections)
dfSelections <- dfSelections[dfSelections[,"padjSelections"] %in% names(dfMainData),]

if (!exists("project_id")){
    project_id <- gsub("_designTable", "", designTB)
}

if (!exists("labname")){
    labname <- "TBD"
}

if (!exists("reportFigDir") || is.null(reportFigDir)){
    reportFigDir <- ""
}

if (!exists("VersionPdfExt")){
    VersionPdfExt <- paste0(".V", gsub("-", "", Sys.Date()), ".pdf")
}


if (nrow(dfSelections) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}

```

## Differential Gene Expression Analysis (DGE) {`r tabVar`}
```{r, echo=TRUE, eval=TRUE, warning=FALSE, results=F}

if (!exists("sdCutOff")){
  sdCutOff <- 2  
}

chnkVec <- as.vector(NULL, mode = "character")

MAplotList <- list()
VplotList <- list()

## Create dfMAplots ##
contrastSel <- c(
  names(dfMainData)[grep("contrast_[0-9]{1,2}", names(dfMainData))],
  names(dfMainData)[grep("contrast_D[0-9]{1,2}", names(dfMainData))]
)
MAselVec <- c(
    contrastSel[grep("lg2BaseMean", contrastSel)],
    contrastSel[grep("logFC", contrastSel)]
)

VolcanoSelVec <- c(
    contrastSel[grep("logFC", contrastSel)],
    contrastSel[grep("lg10p", contrastSel)]
)

contrastVec <- as.vector(sapply(
    contrastSel[grep("logFC", contrastSel)],
    function(x) unlist(strsplit(x, "logFC_"))[2]
))


###############################################################################
## Make MA plot function                                                     ##


makeMAplot <- function(
    dfPlotData,
    geneIDcolumn,
    topNgenes = 5,
    dotsize = 1,
    legendDotSize = 5,
    sdCutOff = 1
){
    headline <- names(dfPlotData)[grep("logFC", names(dfPlotData))]
    headline <- unlist(strsplit(headline, "logFC_"))[2]
    
    names(dfPlotData) <- gsub("contrast_[0-9]{1,2}_", "", names(dfPlotData))
    
    logFCcolName <- names(dfPlotData)[grep("logFC", names(dfPlotData))]
    padjColName <- names(dfPlotData)[grep("padj", names(dfPlotData))]
    lg2BaseMeanColName <- names(dfPlotData)[grep("lg2BaseMean", names(dfPlotData))]
    
    
    ## Now let's get these data columns out of the main data table.
    dfPlotData <- dfPlotData[dfPlotData[,lg2BaseMeanColName] > 0, ]
    
    
    ## For plotting we are using the R-package ggplot. This is a widely used, comprehensive package to make beautiful plots. More information on that here: https://ggplot2.tidyverse.org/
    
    library(ggplot2)
    
    ## Let's add an example for custom coloring here. We are going to highlight the most variable genes in this scatterplot. To do that, we need to add a color column to the plot data dataframe.
    
    ## Now let's color by significantly up-regulated genes in red, and significantly downregulated genes in blue
    
    dfPlotData[["color"]] <- "NS"
    dfPlotData[dfPlotData[, logFCcolName] > 0 & dfPlotData[, padjColName] < 0.05, "color"] <-  "Up"
    
    dfPlotData[dfPlotData[, logFCcolName] < 0 & dfPlotData[, padjColName] < 0.05, "color"] <-  "Down"
    
    ## Re-order dfPlotData for better results
    
    ## Let's have a look at the color vector
    
    
    colorVec <- c("blue", "red","black")
    
    names(colorVec) <- c("Down", "Up", "NS")
    
    
    ## And here is the resulting color vector
    colorVec <- colorVec[names(colorVec) %in% dfPlotData$color]
    
    dfPlotData$color <- factor(dfPlotData$color, levels = names(colorVec))
    dfPlotData <- dfPlotData[order(dfPlotData$color, decreasing = F), ]
    
    ## Now let's also add a label for the 10 most significantly up- and down-regulated genes.This number can be changed in the variable Nsel. Here we use the R package ggrepel.
    
    library(ggrepel)
    
    ## Let's order the data frame by log-fold change
    dfPlotData <- dfPlotData[order(dfPlotData[,logFCcolName], decreasing = T), ]
    topGenes <- as.vector(dfPlotData[1:topNgenes,geneIDcolumn])
    
    dfPlotData <- dfPlotData[order(dfPlotData[,logFCcolName], decreasing = F), ]
    bottomGenes <- as.vector(dfPlotData[1:topNgenes,geneIDcolumn])
    
    dfPlotData[["label"]] <- ""
    dfPlotData[dfPlotData[,geneIDcolumn] %in% c(topGenes, bottomGenes), "label"] <- dfPlotData[dfPlotData[,geneIDcolumn] %in% c(topGenes, bottomGenes), geneIDcolumn]
    
    yScaleMax <- max(abs(dfPlotData[,logFCcolName]))
    
    lgFCsel <- sdCutOff * sd(dfPlotData[, logFCcolName])
    ## Now let's first make the MA-plot without lables
    
    plotNoLabels <- ggplot(
        data = dfPlotData, 
        aes_string(x=lg2BaseMeanColName, y=logFCcolName, color = "color", label = "label")
    ) + geom_hline(yintercept = 0, color = "black", size=0.5
    ) + geom_hline(yintercept = c(-1*lgFCsel,lgFCsel), color = "grey", size=0.5, linetype = 2               
    ) + geom_point( shape=16, size = dotsize
    ) + scale_colour_manual(name = "Significant" ,values = colorVec
    ) + theme_bw(
    )  +  theme(
        axis.text.y   = element_text(size=8),
        axis.text.x   = element_text(size=8),
        axis.title.y  = element_text(size=8),
        axis.title.x  = element_text(size=8),
        axis.line = element_line(colour = "black"),
        panel.border = element_rect(colour = "black", fill=NA, size=1),
        plot.title = element_text(hjust = 0.5, size = 12)
    ) + ylim(-1*yScaleMax, yScaleMax
    ) + ggtitle(paste0("MA-Plot ", contrastVec[i])            
    ) + xlab(gsub("_", " ", logFCcolName)
    ) + ylab(gsub("_", " ", logFCcolName)            
    ) + guides(col = guide_legend(override.aes = list(shape = 16, size = legendDotSize))
    ) 
         
    
    ## And now let's add the labels:
    plotWithLabels <- plotNoLabels + geom_text_repel(size = 3)
    
    return(plotWithLabels)  
}

## End Make MA plot function                                                 ##
###############################################################################

###############################################################################
## Make Volcanoplot                                                          ##
makeVolcanoPlot <- function(
    dfPlotData,
    geneIDcolumn,
    topNgenes = 5,
    dotsize = 1,
    legendDotSize = 5,
    sdCutOff = 1
){
    headline <- names(dfPlotData)[grep("logFC", names(dfPlotData))]
    headline <- unlist(strsplit(headline, "logFC_"))[2]
    
    names(dfPlotData) <- gsub("contrast_[0-9]{1,2}_", "", names(dfPlotData))
    
    logFCcolName <- names(dfPlotData)[grep("logFC", names(dfPlotData))]
    lg10pColName <- names(dfPlotData)[grep("lg10p", names(dfPlotData))]
    padjColName <- names(dfPlotData)[grep("padj", names(dfPlotData))]
    
    ## Now let's get these data columns out of the main data table.
    dfPlotData <- dfPlotData[dfPlotData[,logFCcolName] != 0, ]
    
    ## Determine logFC cut-off for the Volcano Plot ##
    lgFCsel <- sdCutOff * sd(dfPlotData[, logFCcolName])
    
    dfPlotData[["color"]] <- "NS"
    dfPlotData[dfPlotData[, logFCcolName] > lgFCsel & dfPlotData[, padjColName] < 0.05, "color"] <-  "Up"
    
    dfPlotData[dfPlotData[, logFCcolName] < -1*lgFCsel & dfPlotData[, padjColName] < 0.05, "color"] <-  "Down"
    
    ## Re-order dfPlotData for better results
    
    ## Let's have a look at the color vector
    
    
    colorVec <- c("blue", "red","black")
    
    names(colorVec) <- c("Down", "Up", "NS")
    
    
    ## And here is the resulting color vector
    colorVec <- colorVec[names(colorVec) %in% dfPlotData$color]
    
    dfPlotData$color <- factor(dfPlotData$color, levels = names(colorVec))
    dfPlotData <- dfPlotData[order(dfPlotData$color, decreasing = F), ]
    
    ## And here is the resulting color vector
    colorVec <- colorVec[names(colorVec) %in% dfPlotData$color]
    
    dfPlotData$color <- factor(dfPlotData$color, levels = names(colorVec))
    dfPlotData <- dfPlotData[order(dfPlotData$color, decreasing = F), ]
    
    ## Now let's also add a label for the 10 most significantly up- and down-regulated genes.This number can be changed in the variable Nsel. Here we use the R package ggrepel.
    
    library(ggrepel)
    
    ## Let's order the data frame by log-fold change
    dfPlotData <- dfPlotData[order(dfPlotData[,logFCcolName], decreasing = T), ]
    topGenes <- as.vector(dfPlotData[1:topNgenes,geneIDcolumn])
    
    dfPlotData <- dfPlotData[order(dfPlotData[,logFCcolName], decreasing = F), ]
    bottomGenes <- as.vector(dfPlotData[1:topNgenes,geneIDcolumn])
    
    dfPlotData[["label"]] <- ""
    dfPlotData[dfPlotData[,geneIDcolumn] %in% c(topGenes, bottomGenes), "label"] <- dfPlotData[dfPlotData[,geneIDcolumn] %in% c(topGenes, bottomGenes), geneIDcolumn]
    
xMaxVal <- max(abs(dfPlotData[,logFCcolName]))
    
pVolcano <- ggplot(
        data = dfPlotData, 
        aes_string(x=logFCcolName, y=lg10pColName, color = "color",label = "label")
    ) + geom_hline(yintercept = 0, color = "black", size=0.5
    ) + geom_hline(yintercept = -1*log10(0.05), color = "grey", size=0.5, linetype = 2
    ) + geom_vline(xintercept = 0, color = "black", size=0.5
    ) + geom_vline(xintercept = c(-1*lgFCsel,lgFCsel), color = "grey", size=0.5, linetype = 2      ) + geom_point( shape=16, size = dotsize
    ) + scale_colour_manual(name = "Variability" ,values = colorVec
    
    ) + theme_bw(
    )  +  theme(
        axis.text.y   = element_text(size=8),
        axis.text.x   = element_text(size=8),
        axis.title.y  = element_text(size=8),
        axis.title.x  = element_text(size=8),
        axis.line = element_line(colour = "black"),
        panel.border = element_rect(colour = "black", fill=NA, size=1),
        plot.title = element_text(hjust = 0.5, size = 12)
    ) + xlim(-1*xMaxVal,xMaxVal
    ) + ggtitle(paste0("Volcano Plot ", contrastVec[i]) 
    ) + xlab(gsub("_", " ", logFCcolName)
    ) + ylab(gsub("_", " ", lg10pColName)            
    ) + guides(col = guide_legend(override.aes = list(shape = 16, size = legendDotSize))
    ) 

    plotVolcanoWithLabels <- pVolcano + geom_text_repel(size = 3)

return(plotVolcanoWithLabels)
}
## Done Volcanoplot                                                          ##
###############################################################################

for (i in 1:length(contrastVec)){
    ## Make MA-plot ##
    contrastVec <- as.vector(sapply(
    contrastSel[grep("logFC", contrastSel)],
    function(x) unlist(strsplit(x, "logFC_"))[2]
))
    
    selVec <- c(
        geneIDcolumn,
        names(dfMainData)[grep(paste0("_", contrastVec[i], "$"), names(dfMainData))]
    )
    
    dfPlotData <- unique(dfMainData[,selVec])
    
    tagMA <- paste0("MA_", contrastVec[i])
    
    MAplotList[[tagMA]] <- makeMAplot(
        dfPlotData = dfPlotData,
        geneIDcolumn = geneIDcolumn,
        topNgenes = 5,
        dotsize = 1,
        legendDotSize = 5,
        sdCutOff = sdCutOff
    )
    
    ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0(contrastVec[i], ".MA.plot", VersionPdfExt)
    FN <- paste0(reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(MAplotList[[tagMA]])
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    selLg2BM <- selVec[grep("lg2BaseMean_", names(dfPlotData))]
    selLogFC <- selVec[grep("_logFC_", names(dfPlotData))]
    
     
    xAxis <- selLg2BM[grep(contrastVec[i], selLg2BM)]
    yAxis <- selLogFC[grep(contrastVec[i], selLogFC)]
    
    link1 <- paste0('<a href="https://biologic.crick.ac.uk/',project_id,'/scatterplot?x_axis=',xAxis,'&y_axis=',yAxis,'&cat_id=ag_lab_categories__10" target="_blank">here</a>.')
    
    
    figCap <- paste0(
        '**Figure ',
        figureCount,
        'A:** Volcano and MA-plot Plot ',gsub('MA_', '', tagMA),'. ',
        'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. ',
        'An interactive version of this plot can be found ', link1
    )
 
    figureCount <- figureCount + 1
   
    NewChnk <- paste0(
            "### MA-Plot ",contrastVec[i],
            "\n```{r ",contrastVec[i],", results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(MAplotList[['",tagMA,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )
    
    
    ## Now the Volcano Plot ##
    tagV <- paste0("Volcano_", contrastVec[i])
    
    VplotList[[tagV]] <- makeVolcanoPlot(
        dfPlotData,
        geneIDcolumn,
        topNgenes = 5,
        dotsize = 1,
        legendDotSize = 5,
        sdCutOff = sdCutOff
    )
    
    ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0(contrastVec[i], ".Volcano.plot", VersionPdfExt)
    FN <- paste0(reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(VplotList[[tagV]])
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    selLg10p <- selVec[grep("_lg10p_", names(dfPlotData))]
    selLogFC <- selVec[grep("_logFC_", names(dfPlotData))]
    
   
    xAxis <- selLogFC[grep(contrastVec[i], selLogFC)]
    yAxis <- selLg10p[grep(contrastVec[i], selLg10p)]
    
    link2 <- paste0('<a href="https://biologic.crick.ac.uk/',project_id,'/scatterplot?x_axis=',xAxis,'&y_axis=',yAxis,'&cat_id=ag_lab_categories__10" target="_blank">here</a>.')
    
    
    figCap <- paste0(
        '**Figure ',
        figureCount,
        'B:** Volcanoplot ',contrastVec[i],'. ',
        'Download a pdf of this figure <a href="',FNrel,'" target = "_blank">here</a>. ',
        'An interactive version of this plot can be found ' , link2, '.'
    )
 
    figureCount <- figureCount + 1
   
    NewChnk <- paste0(
            "\n```{r V_",contrastVec[i],", results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(VplotList[['",tagV,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )
}

if (length(contrastVec) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}

```



```{r, echo=FALSE, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knitr::knit(text = chnkVec, quiet = T), collapse = '\n'))
```

<!--chapter:end:13-B.11.volcanoplots.ma.plots.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r partC_C10_cat_init, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "C10.catEnrHG."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```


```{r create-pca-enrichment-data, echo=T, eval=TRUE, warning=FALSE, results=F}
if (!exists("sdCutOff")){
  sdCutOff <- 2  
}


## Create enriched genes list ##
EnrichedGenesList <- list()

contrastSel <- c(
    names(dfMainData)[grep("contrast_[0-9]{1,2}", names(dfMainData))],
    names(dfMainData)[grep("contrast_D[0-9]{1,2}", names(dfMainData))]
)

DGEtagVec <- as.vector(sapply(
    contrastSel[grep("logFC", contrastSel)],
    function(x) unlist(strsplit(x, "logFC_"))[2]
))

selVec <- c(
    geneIDcolumn,
    contrastSel
)

dfAllPlots <- dfMainData[,selVec]

if (geneIDcolumn != "mgi_symbol" & geneIDcolumn != "hgnc_symbol") {
    queryGS <- "hgnc_symbol" 
} else {
    queryGS <- Obio@parameterList$geneIDcolumn
}

for (i in 1:length(DGEtagVec)){
    tag <- paste0("Enrichments_HG_", DGEtagVec[i])  
    tagGLpos <- paste0(DGEtagVec[i], "_pos") 
    tagGLneg <- paste0(DGEtagVec[i], "_neg") 
    
    selVec <- c(
        geneIDcolumn,
        names(dfAllPlots)[grep(paste0(DGEtagVec[i],"$"), names(dfAllPlots))]
    )
    
    dfPlot <- dfAllPlots[,selVec]
    pos <- grep("included", names(dfPlot))
    if (length(pos) == 0){
        dfPlot[["included"]] <- "+"
    }
    
    lgFCsel <- sdCutOff * sd(dfPlot[,grep("_logFC_", names(dfPlot))])
    
    
    dfPlot[["DGE_Status"]] <- "Unchanged"
    dfPlot[dfPlot[,grep("_logFC_", names(dfPlot))] > lgFCsel & dfPlot[,grep("_padj_", names(dfPlot))] < 0.05, "DGE_Status"] <- "Up"
    EnrichedGenesList[[tagGLpos]] <- unique(dfPlot[dfPlot$DGE_Status == "Up", geneIDcolumn])
    
    dfPlot[dfPlot[,grep("_logFC_", names(dfPlot))] < -1 *lgFCsel & dfPlot[,grep("_padj_", names(dfPlot))] < 0.05, "DGE_Status"] <- "Down"
    EnrichedGenesList[[tagGLneg]] <- unique(dfPlot[dfPlot$DGE_Status == "Down", geneIDcolumn])
} 

library(knitr)
library(ggplot2)

#save.image("temp.RData")
library(clusterProfiler)

    gmtList <- list()
     dbtableList <- list(
          # "GO-MF" = "mysigdb_c5_MF",
          "Pathways" = "mysigdb_c2_1329_canonical_pathways",
          "HallMarks" = "mysigdb_h_hallmarks"
      )
    
    
    
   
    
    for (i in 1:length(dbtableList)){
        
        dfTemp <- unique(import.db.table.from.db(
            host = Obio@dbDetailList$host,
            dbname = Obio@dbDetailList$ref.cat.db,
            dbtable = dbtableList[[i]],
            password = db.pwd,
            user = Obio@dbDetailList$db.user
        ))
        
        ## Remove duplicated entries ##
        dfTemp <- dfTemp[!(duplicated(dfTemp$cat_name)),]
        
        rmVec <- grep("temp_", dfTemp$cat_type)
        if (length(rmVec) > 0){
            dfTemp <- dfTemp[-rmVec, ]
        }
        
        dfTemp <- unique(dbcat2gmt(
            df.cat = dfTemp, # As downloaded from reference_categories_db_new database
            gene.id.column = queryGS
        ))
        
        dfTemp <- unique(dfTemp[!duplicated(as.vector(dfTemp[,1])), ])
        
        write.table(
            dfTemp,
            "temp.gmt.txt",
            row.names = F, 
            sep = "\t",
            col.names = F,
            quote = F
        )
        
        CPgmt <- read.gmt("temp.gmt.txt")
        unlink("temp.gmt.txt")
        CPgmt <- unique(CPgmt[CPgmt$gene != "", ])
        
        gmtList[[dbtableList[[i]]]] <- CPgmt
    }
    
    ## Edit collection names for plot
    names(gmtList) <- gsub("mysigdb_h_hallmarks", "HallMarkCats",names(gmtList))
    names(gmtList) <- gsub("mysigdb_", "",names(gmtList))
    names(gmtList) <- gsub("c2_1329_canonical_p", "P",names(gmtList))
    names(gmtList) <- gsub("sc_sig", "CellSig",names(gmtList))
    names(gmtList) <- gsub("cibersort_L22", "CellSig",names(gmtList))
    names(gmtList) <- gsub("c5_", "GO_",names(gmtList))
    names(gmtList) <- gsub("networkcategories", "Complexes",names(gmtList))
    
    ## Done creating gmt list
    ###########################
    
    ## Select colors ##
    library(scales)
    enrCols <- hue_pal()(length(gmtList))
    names(enrCols) <- substr(names(gmtList),1,10)



plotList <- list()
chnkVec <- as.vector(NULL, mode = "character")



for (j in 1:length(DGEtagVec)){
    posTestGeneSet <- as.vector(
        unique(
            EnrichedGenesList[[paste0(DGEtagVec[j], "_pos")]]
        )
    )
    
    
    negTestGeneSet <- as.vector(
        unique(
            EnrichedGenesList[[paste0(DGEtagVec[j], "_neg")]]
        )
    )
   
    
    ###########################################################################
    ## Create GMT file for category enrichment                               ##
    
    ###########################
    ## Create gmt list
    ## Retrieve gmt files from database
    ## Add custom gmt files
    
    
    
    
    ## Done                                                                  ##
    ###########################################################################
     
    library(clusterProfiler)
    library(ggplot2)
    library(tidyr)
        
        if (geneIDcolumn != "mgi_symbol" & geneIDcolumn != "hgnc_symbol") {
            queryGS <- "hgnc_symbol" 
        } else {
            queryGS <- geneIDcolumn
        }
        
        if (Obio@dbDetailList$host == "10.27.241.234"){
            urlString <- "biologic.thecrick.org"
        } else {
            urlString <- "biologic.crick.ac.uk"
        }
    
    colVec <- c("red", "blue")
    pvalueCutoff <- 0.5
    topMaxCat <- 10
    
    ## Get background gene set ##
    #backgroundGeneVec <- row.names(OsC[["RNA"]]@counts)
    if ((length(posTestGeneSet) >= 3) | (length(negTestGeneSet) >= 3)){
        ## Do enrichment ##
        first <- TRUE
        if (length(posTestGeneSet) >= 3){
            for (k in 1:length(gmtList)){
                    egmt <- data.frame(
                        enricher(
                            negTestGeneSet, 
                            TERM2GENE=gmtList[[k]],
                            pvalueCutoff = pvalueCutoff
                        )
                    )
                    if (!is.null(egmt)){
                        if (nrow(egmt) > 0){
                            egmt[["Collection"]] <- substr(names(gmtList)[k], 1,10)
                        }
                        if (first){
                            dfTempEnriched <- egmt    
                            first <- FALSE
                        } else {
                            dfTempEnriched <- rbind(
                                dfTempEnriched, 
                                egmt
                            )    
                        }
                        
                    }
            }
            if (nrow(dfTempEnriched) > 0){
                dfTempEnriched[["direction"]] <- "positive"
                dfTempEnriched[["log10FDR"]] <- log10(dfTempEnriched$p.adjust)
                dfTempEnriched <- dfTempEnriched[order(dfTempEnriched$log10FDR, decreasing = F),]
                dfTempEnriched <- na.omit(dfTempEnriched)
                
                if (nrow(dfTempEnriched) > topMaxCat){
                    dfTempEnriched <- dfTempEnriched[1:topMaxCat, ]
                }
            }
          
            
        } # end positive
            
            ## Now the negative side ##
            if (length(negTestGeneSet) >= 3){
            first <- TRUE
            for (k in 1:length(gmtList)){
                    egmt <- data.frame(
                        enricher(
                            posTestGeneSet, 
                            TERM2GENE=gmtList[[k]],
                            pvalueCutoff = pvalueCutoff
                        )
                    )
                    if (!is.null(egmt)){
                        if (nrow(egmt) > 0){
                            egmt[["Collection"]] <- substr(names(gmtList)[k], 1,10)
                        }
                        if (first){
                            dfTempEnrichedNeg <- egmt    
                            first <- FALSE
                        } else {
                            dfTempEnrichedNeg <- rbind(
                                dfTempEnrichedNeg, 
                                egmt
                            )    
                        }
                        
                    } 
            }
            if (nrow(dfTempEnrichedNeg) > 0){
                dfTempEnrichedNeg[["direction"]] <- "negative"
                dfTempEnrichedNeg[["log10FDR"]] <- -1*log10(dfTempEnrichedNeg$p.adjust)
                dfTempEnrichedNeg <- dfTempEnrichedNeg[order(dfTempEnrichedNeg$log10FDR, decreasing = T),]
                dfTempEnrichedNeg <- na.omit(dfTempEnrichedNeg)
                
                if (nrow(dfTempEnrichedNeg) > topMaxCat){
                    dfTempEnrichedNeg <- dfTempEnrichedNeg[1:topMaxCat, ]
                }
            }
            } # end negative
        
            
            
            ## Make plot 
            if ((nrow(dfTempEnriched) > 0) | (nrow(dfTempEnrichedNeg) > 0)){
            
            
            
            
            dfSel <- rbind(
                dfTempEnriched,
                dfTempEnrichedNeg
            )
            
            dfSel <- na.omit(dfSel)
            dfSel <- dfSel[order(dfSel$log10FDR),]
            dfSel$log10FDR <- round(dfSel$log10FDR, 2)
            
            dfSel[["Category"]] <- ""
            dfSel[dfSel$log10FDR >= 0, "Category"] <- "Enr."
            dfSel[dfSel$log10FDR < 0, "Category"] <- "Depl."
            
            for (l in 1:nrow(dfSel)){
                if (nchar(dfSel[l, "ID"]) > 30){
                    part1 <- substr(dfSel[l, "ID"], 1, 30)
                    part2 <- substr(dfSel[l, "ID"], 31, 60)
                    dfSel[l, "ID"] <- paste0(part1, " \\n", part2)
                  
                }
            }
            
            
            #dfSel$Term <- gsub("\\(GO", "\\\n\\(GO", dfSel$Term)
            
            dfSel$ID <- factor(dfSel$ID, levels = unique(dfSel$ID))
            
            
            
            plotList[[paste0("PCA_ENR_", j)]] <- ggplot(
                data=dfSel, aes(x= ID, y=log10FDR, fill=Collection, order=log10FDR)
            ) + geom_bar(stat="identity", colour="black"
            ) + coord_flip() +scale_fill_manual(values=enrCols
            ) + theme_bw(
            )  +  theme(
                axis.text.y   = element_text(size=8),
                axis.text.x   = element_text(size=8),
                axis.title.y  = element_text(size=8),
                axis.title.x  = element_text(size=8),
                axis.line = element_line(colour = "black"),
                panel.border = element_rect(colour = "black", fill=NA, size=1),
                plot.title = element_text(hjust = 0.5, size = 12)
            )  + labs(title = paste0("Comparison ", DGEtagVec[j]," enriched genes") ,y = "-log10(FDR)", x = ""
            ) + geom_hline(yintercept = c(-log10(0.05), log10(0.05)), color = "grey", size=0.5, lty=2
            ) + geom_hline(yintercept = 0, color = "black", size=0.5
            ) 
            cat("  \n")
            
            
            
            ## Save to file ##
            FNbase <- paste0("DGE_comparison_", DGEtagVec[j],".enriched.genes", VersionPdfExt)
            FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
            FNrel <- paste0("report_figures/", FNbase)
            
           
            pdf(FN)
            print(plotList[[paste0("PCA_ENR_", j)]])
            dev.off()
            
            link <- paste0(
                '<a href="https://', urlString, '/',
                Obio@parameterList$project_id,
                '/category-view?category_type=GO-BP" target="_blank">CategoryView</a>'
            )
            
            ## Create R markdown chunk ##
            figLegend <- paste0(
                '**Figure ', 
                figureCount, 
                '**: Category enrichment analysis for the top genes that have  <font color = "',colVec[2],'"> the most positive </font> and <font color = "',colVec[1],'">the most negative</font> PCA loading values in dimension ', 
               DGEtagVec[j],
                ' associated with them. Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. To view these gene sets in the context of your data, go to ',link,' and find these categories using the search box.'
            )
            figureCount <- figureCount + 1 
            
            NewChnk <- paste0(
                "### ", DGEtagVec[j],
                "\n```{r enrichr_",
                j,", results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",
                figLegend,"'}\n",
                "\n",
                "\n print(plotList[['",paste0("PCA_ENR_", j),"']])",
                "\n cat(  '\n')",
                "\n\n\n```\n"   
            )
            
            chnkVec <- c(
                chnkVec,
                NewChnk
            )
        }
            
            
            ## done with plot 
            
    } ## Done with per dimension loops
}        
      
 

if (length(plotList) > 3){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}
```

# Category Enrichments - Hypergeometric Test {`r tabVar`} 
```{r create-cat-enrichment-plot, echo=T, eval=TRUE, warning=FALSE, results='asis'}
###############################################################################
## Do category enrichment on clusters                                        ##
cat(paste(knit(text = chnkVec, quiet = T), collapse = '\n'))
## Done doing enrichment on clusters                                         ##
###############################################################################


```

<!--chapter:end:14-B.12.cat.enrichment.HG.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
# Gene Set Enrichment Analysis (GSEA) {.tabset .tabset-fade .tabset-pills}
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r partC_C11B_pca_init, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "C11.GSE."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

#library(magrittr)

```

```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}
workdir <- Obio@parameterList$workdir
reportTableDir <- Obio@parameterList$reportTableDir
reportFigDir <- Obio@parameterList$reportFigDir

project_id <- project_id
```

```{r, echo=T, eval=TRUE, warning=FALSE, results="asis"}

if (!exists("project_id")){
    project_id <- gsub("_designTable", "", designTB)
}

if (!exists("labname")){
    labname <- "TBD"
}

if (!exists("reportFigDir") || is.null(reportFigDir)){
    reportFigDir <- ""
}

if (!exists("reportTableDir") || is.null(reportTableDir)){
    reportTableDir <- ""
}

if (!exists("VersionPdfExt")){
    VersionPdfExt <- paste0(".V", gsub("-", "", Sys.Date()), ".pdf")
}
```

Find furter background information on the Gene Set Enrichment Analysis (GSEA) and the interpretation of results can be found [here](https://www.gsea-msigdb.org/gsea/doc/GSEAUserGuideFrame.html?_Interpreting_GSEA_Results). Here the improved [fgsea algorithm](https://bioinformatics.stackexchange.com/questions/149/are-fgsea-and-broad-institute-gsea-equivalent) will be used to calculate enrichment scores. 

```{r GSEA_section_1, echo=TRUE, eval=TRUE, warning=FALSE, results=F}
if (!exists("VersionPdfExt")){
    VersionPdfExt <- paste0(".V", gsub("-", "", Sys.Date()), ".pdf")
}

if (!exists("Obio") || is.null(Obio@parameterList$workdir)){
    workdir <- getwd()
}

chnkVec <- as.vector(NULL, mode = "character")
plotList <- list()

plotListER <- list()
chnkVecER <- list()


###############################################################################
## Prepare GMT file                                                          ##

## Option A - from database ##
if (exists("Obio") && !is.null(Obio@parameterList$GSEAtables)){
  tables <- Obio@parameterList$GSEAtables
  print(
      paste0(
        "The following gene sets have been used in the GSEA analysis: ",   
        sort(paste0(names(Obio@referenceTableList), collapse = ",")), 
        "."
      )
    )
} else {
  tables <- c(
    "mysigdb_h_hallmarks",
    "mysigdb_c5_BP" #,
    #Obio@parameterList$lab.categories.table
  )
}


# #
dfRefGmt <- create.gmt.file.from.ref.data.table(
     host = Obio@dbDetailList$host,
     dbname = "reference_categories_db_new",
     dataTable = tables,
     pwd = db.pwd,
     user=Obio@dbDetailList$db.user,
     gene.id.column = "hgnc_symbol"
 )


localGmtDir <- paste0(
    Obio@parameterList$workdir,
    "GSEA/"
)

if (!exists(localGmtDir)){
  dir.create(localGmtDir)
}

#
gmtDir<- paste0(
    Obio@parameterList$workdir,
    "GSEA/"
)

gmtFileName <- paste0(
    project_id,
    ".",
    "projectGmtFile.gmt"
)

dfRefGmt <- dfRefGmt[!(duplicated(dfRefGmt[,1])),]

dfPathwayAnno <- unique(data.frame(cat_id = row.names(dfRefGmt), cat_name = dfRefGmt[,1]), url=dfRefGmt[,2])
dfRefGmt[,2] <- NULL


## transform all columns
empty_as_na <- function(x){
    if("factor" %in% class(x)) x <- as.character(x) ## since ifelse wont work with factors
    ifelse(as.character(x)!="", x, NA)
}

dfRefGmt <- dfRefGmt %>% dplyr::mutate_each(dplyr::funs(empty_as_na))


write.table(
    dfRefGmt,
    paste0(localGmtDir, gmtFileName),
    col.names = FALSE,
    row.names = FALSE,
    sep="\t",
    quote = F
)

## Done creating project gmt. file                                           ##
###############################################################################

## Option B: Load a gmt file created by other means
# FN <- "/Volumes/babs/working/boeings/Projects/goulda/adrien.franchet/472_brains_from_drosophila_larvae_RN21220/workdir/GSEA/RN21220.projectGmtFile.gmt"
# 
# dfRefGmt <- read.delim(
#     FN, 
#     header = F,
#     sep = "\t",
#     stringsAsFactors = F
# )

###############################################################################
## Run fGSEA on all log-fold changes                                         ##

selVec <- c(
    "hgnc_symbol",
    names(dfMainData)[grep(paste0("contrast_[0-9]{1,2}_logFC"), names(dfMainData))],
    names(dfMainData)[grep(paste0("contrast_D[0-9]{1,2}_logFC"), names(dfMainData))]
)

dfGSEAdata <- unique(dfMainData[, selVec])
dfGSEAdata <- na.omit(dfGSEAdata)
dfGSEAdata <- dfGSEAdata[rowSums(dfGSEAdata[,2:ncol(dfGSEAdata)]) != 0,]


## Delete old rnk files ##
if (!exists("localGmtDir")){
  localGmtDir <- "GSEA/"
}

unlink(paste0(localGmtDir, "*.rnk"))

biologicSeqTools2::create.gsea.rnk.files(
     workdir,
     df.dataTable = dfGSEAdata,
     GSEA.colum.type = "logFC",
     gene.symbol.column.name = "hgnc_symbol",
     GSEADir = localGmtDir
 )

rnkFileVec <- paste0(localGmtDir,list.files(localGmtDir)[grep(".rnk$", list.files(localGmtDir))])

plotList <- list()
chnkVec <- as.vector(NULL, mode="character")

## Create Excel output ##
fullOutFN <- paste0(project_id, "_GSEA.xlsx")
outFN <- paste0(project_id, "_GSEA.xlsx")
wb <- openxlsx::createWorkbook()

for (i in 1:length(rnkFileVec)){
    logFCcol <- unlist(strsplit(rnkFileVec[i], "GSEA/"))[2]
    logFCcol <- gsub(".rnk", "",logFCcol)
    lg10pCol <- gsub("logFC","lg10p", logFCcol)
    lg2BaseMeanCol <- gsub("logFC", "lg2BaseMean", logFCcol)
    
    tag <- gsub("contrast_[0-9]{1,2}_", "", logFCcol)
    tag <- paste0("GSEA_", tag)
    
    dfRnk <- read.delim(
        rnkFileVec[i],
        header=T, 
        sep = "\t"
    )
    
    GSEAranks <- dfRnk$logFC
    names(GSEAranks) <- dfRnk$hgnc_symbol
    
    pathways <- fgsea::gmtPathways(paste0(localGmtDir, gmtFileName))
    
    set.seed(42)
    fgseaRes <- fgsea::fgsea(
        pathways = pathways, 
        stats    = GSEAranks,
        minSize  = 10,
        maxSize  = 2500
    )
    
    
    ###########################################################################
    ## Make top-bottom 10 plot                                               ##
    N <- 10
    ## Top N up NES ##
    topNup <- as.vector(unlist(fgseaRes[order(fgseaRes$NES, decreasing = T),"pathway"]))[1:N]
    
    ## Top N down NES
    topNdown <- as.vector(unlist(fgseaRes[order(fgseaRes$NES, decreasing = F),"pathway"]))[1:N]
    
    topPathways <- c(topNup,rev(topNdown))
    
    ## Necessary to load fgsea to get the gridExtra package loaded ##
    dfTable <- fgseaRes
    dfTable$pathway <- substr(gsub("_", " ", dfTable$pathway),1,60)
    
    library(fgsea)
    pdf("temp.pdf")
   plotList[[tag]] <- plotGseaTable(
        pathways = pathways[topPathways], 
        stats = GSEAranks, 
        fgseaRes = dfTable, 
        gseaParam=0.5,
        colwidths = c(5, 3, 0, 0, 0), 
        render = FALSE
    ) 
   
   dev.off()
   unlink("temp.pdf")
    
   ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0("GSEAsummary.", tag,VersionPdfExt)
    FN <- paste0(reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(grid::grid.draw(plotList[[tag]]))
        
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    figCap <- paste0(
    '**Figure ',
    figureCount,
    ':** Top up- and downregulated GSEA gene categories for the log-FC comparison ', tag, '. ',
        'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. '
    )
    
    figureCount <- figureCount + 1 
    
    NewChnk <- paste0(
            "### ", tag,
            "\n```{r ",tag,", results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(grid::grid.draw(plotList[['",tag,"']]))",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )
    
    chnkVec <- c(
        chnkVec,
        NewChnk
    )
   
    ## Done                                                                  ##
    ###########################################################################
    
    ###########################################################################
    ## Make category plots 
    ## stump ##
    # library(fgsea)
    # plotListER[[tag]] <- plotEnrichment(pathways[[topNup[1]]],
    #            exampleRanks) + labs(title=gsub("_", " ", topNup[1]))
    ##
    ###########################################################################
    
    fgseaRes <- unique(fgseaRes[,c("pathway", "NES", "padj")])
    #fgseaRes <- fgseaRes[fgseaRes$padj < 0.05,]
    
    dfTempAnno <- dfPathwayAnno[dfPathwayAnno$cat_name %in% fgseaRes$pathway,]
    
    fgseaRes <- merge(
        dfTempAnno, 
        fgseaRes, 
        by.x = "cat_name",
        by.y = "pathway"
    )
    
    fgseaRes[["GSEA"]] <- tag
    
    fgseaRes[["Volcanoplot_Link"]] <- paste0(
        'https://biologic.crick.ac.uk/', 
        Obio@parameterList$project_id, 
        '/scatterplot?x_axis=',
        logFCcol, 
        '&y_axis=',
        lg10pCol,
        '&cat_id=',
        fgseaRes$cat_id
    )
    
    fgseaRes[["MAplot_Link"]] <- paste0(
        'https://biologic.crick.ac.uk/', 
        Obio@parameterList$project_id, 
        '/scatterplot?x_axis=',
        lg2BaseMeanCol, 
        '&y_axis=',
        logFCcol, 
        '&cat_id=',
        fgseaRes$cat_id
    )
    
    ###############################################################################
    ## Add scatterplot and heatmap urls                                          ##
    fgseaRes[["Heatmap_Link"]] <- paste0('https://biologic.crick.ac.uk/', Obio@parameterList$project_id, '/category-view/', fgseaRes$cat_id)
    
    ## Done                                                                      ##
    ###############################################################################

    
    ###########################################################################
    ## Save plot to file                                                     ##
    #library(openxlsx)
    
    FNTbase <- outFN
    FNT <- paste0(Obio@parameterList$reportTableDir, FNTbase)
    FNTrel <- paste0("report_tables/", FNTbase)
        
    
    
    sn <- gsub("GSEA_", "", substr( paste0(tag, "_GSEA"), 1, 27))
    sn <- paste0(i, "_", sn)
    openxlsx::addWorksheet(wb, sn)
    openxlsx::freezePane(wb, sn ,  firstActiveRow = 2)
    
    hs1 <- openxlsx::createStyle(
        fontColour = "#ffffff",
        fgFill = "#000000", 
        halign = "CENTER", 
        textDecoration = "Bold"
    )
    
    openxlsx::writeData(wb, sheet=sn, fgseaRes, startRow = 1, startCol = 1, headerStyle = hs1)
  
    ##                                                                       ##
    ###########################################################################        

    
    if (i==1){
        dfRes <- fgseaRes
    } else {
        dfRes <- rbind(
            dfRes, 
            fgseaRes
        )
    }
    print(paste0(tag, " done."))
}


 openxlsx::saveWorkbook(
        wb, 
        FNT,
        overwrite = TRUE
    )




if (length(plotList) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}

```
   
## Top up-/down-regulated GSEA categories {`r tabVar`}

```{r, echo=F, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knitr::knit(text = chnkVec, quiet = T), collapse = '\n'))
```
  
  

```{r GSEA_volcano, echo=TRUE, eval=TRUE, warning=FALSE, results=F}
###############################################################################
## Make Volcanoplot                                                          ##
makeVolcanoPlotGSEA <- function(
    dfPlotData,
    geneIDcolumn,
    topNgenes = 5,
    dotsize = 1,
    legendDotSize = 5,
    sdCutOff = 1
){
    headline <- names(dfPlotData)[grep("GSEA", names(dfPlotData))]
    #headline <- unlist(strsplit(headline, "logFC_"))[2]
    
    #names(dfPlotData) <- gsub("contrast_[0-9]{1,2}_", "", names(dfPlotData))
    
    logFCcolName <- names(dfPlotData)[grep("NES", names(dfPlotData))]
    lg10pColName <- names(dfPlotData)[grep("lg10p", names(dfPlotData))]
    padjColName <- names(dfPlotData)[grep("^padj$", names(dfPlotData))]
    
    ## Now let's get these data columns out of the main data table.
    dfPlotData <- dfPlotData[dfPlotData[,logFCcolName] != 0, ]
    dfPlotData[,geneIDcolumn] <- as.character(dfPlotData[,geneIDcolumn] )
    
    ## Determine logFC cut-off for the Volcano Plot ##
    lgFCsel <- sdCutOff * sd(dfPlotData[, logFCcolName])
    
    dfPlotData[["color"]] <- "NS"
    dfPlotData[dfPlotData[, logFCcolName] > lgFCsel & dfPlotData[, padjColName] < 0.05, "color"] <-  "Up"
    
    dfPlotData[dfPlotData[, logFCcolName] < -1*lgFCsel & dfPlotData[, padjColName] < 0.05, "color"] <-  "Down"
    
    ## Re-order dfPlotData for better results
    
    ## Let's have a look at the color vector
    
    
    colorVec <- c("blue", "red","black")
    
    names(colorVec) <- c("Down", "Up", "NS")
    
    
    ## And here is the resulting color vector
    colorVec <- colorVec[names(colorVec) %in% dfPlotData$color]
    
    dfPlotData$color <- factor(dfPlotData$color, levels = names(colorVec))
    dfPlotData <- dfPlotData[order(dfPlotData$color, decreasing = F), ]
    
    ## And here is the resulting color vector
    colorVec <- colorVec[names(colorVec) %in% dfPlotData$color]
    
    dfPlotData$color <- factor(dfPlotData$color, levels = names(colorVec))
    dfPlotData <- dfPlotData[order(dfPlotData$color, decreasing = F), ]
    
    ## Now let's also add a label for the 10 most significantly up- and down-regulated genes.This number can be changed in the variable Nsel. Here we use the R package ggrepel.
    
    library(ggrepel)
    
    ## Let's order the data frame by log-fold change
    dfPlotData <- dfPlotData[order(dfPlotData[,logFCcolName], decreasing = T), ]
    topGenes <- as.vector(dfPlotData[1:topNgenes,geneIDcolumn])
    
    dfPlotData <- dfPlotData[order(dfPlotData[,logFCcolName], decreasing = F), ]
    bottomGenes <- as.vector(dfPlotData[1:topNgenes,geneIDcolumn])
    
    dfPlotData[["label"]] <- ""
    dfPlotData[dfPlotData[,geneIDcolumn] %in% c(topGenes, bottomGenes), "label"] <- dfPlotData[dfPlotData[,geneIDcolumn] %in% c(topGenes, bottomGenes), geneIDcolumn]
    
xMaxVal <- max(abs(dfPlotData[,logFCcolName]))
    
pVolcano <- ggplot(
        data = dfPlotData, 
        aes_string(x=logFCcolName, y=lg10pColName, color = "color",label = "label")
    ) + geom_hline(yintercept = 0, color = "black", size=0.5
    ) + geom_hline(yintercept = -1*log10(0.05), color = "grey", size=0.5, linetype = 2
    ) + geom_vline(xintercept = 0, color = "black", size=0.5
    ) + geom_vline(xintercept = c(-1*lgFCsel,lgFCsel), color = "grey", size=0.5, linetype = 2      ) + geom_point( shape=16, size = dotsize
    ) + scale_colour_manual(name = "Variability" ,values = colorVec
    
    ) + theme_bw(
    )  +  theme(
        axis.text.y   = element_text(size=8),
        axis.text.x   = element_text(size=8),
        axis.title.y  = element_text(size=8),
        axis.title.x  = element_text(size=8),
        axis.line = element_line(colour = "black"),
        panel.border = element_rect(colour = "black", fill=NA, size=1),
        plot.title = element_text(hjust = 0.5, size = 12)
    ) + xlim(-1*xMaxVal,xMaxVal
    ) + ggtitle(paste0("GSEA NES Volcano Plot ", contrastVec[i]) 
    ) + xlab(gsub("_", " ", logFCcolName)
    ) + ylab(gsub("_", " ", lg10pColName)            
    ) + guides(col = guide_legend(override.aes = list(shape = 16, size = legendDotSize))
    ) 

    plotVolcanoWithLabels <- pVolcano + geom_text_repel(size = 3)

return(plotVolcanoWithLabels)
}
## Done Volcanoplot                                                          ##
###############################################################################


chnkVec <- as.vector(NULL, mode = "character")
plotList <- list()

tagVec <-  unique(dfRes$GSEA)

for (i in 1:length(tagVec)){
    tag <- paste0("V_",tagVec[i])
    dfPlot <- dfRes[dfRes$GSEA == tagVec[i], c("GSEA", "cat_id", "cat_name", "NES", "padj")]
    dfPlot <- na.omit(dfPlot)
    #dfPlot[["label"]] <- ""
    dfPlot <- dfPlot[order(dfPlot$NES, decreasing = T), ]
    minP <- min(dfPlot$padj[dfPlot$padj != 0])
    dfPlot[["lg10padj"]] <- 0
    dfPlot[dfPlot$padj != 0, "lg10padj"] <- -1*log10(dfPlot$padj)
    
    ## Function is defined in module C9.
    plotList[[tag]] <- makeVolcanoPlotGSEA(
        dfPlotData = dfPlot,
        geneIDcolumn = "cat_name",
        topNgenes = 5,
        dotsize = 1,
        legendDotSize = 5,
        sdCutOff = 1
    )
    
    ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0(tag, ".volcano.plot", VersionPdfExt)
    FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(plotList[[tag]])
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    # selLg2BM<- selVec[grep("lg2BaseMean_", names(dfPlotData))]
    # selLogFC <- selVec[grep("_logFC_", names(dfPlotData))]
    # 
    #  
    # xAxis <- selLg2BM[grep(contrastVec[i], selLg2BM)]
    # yAxis <- selLogFC[grep(contrastVec[i], selLogFC)]
    # 
    # link1 <- paste0('<a href="https://biologic.crick.ac.uk/',Obio@parameterList$project_id,'/scatterplot?x_axis=',xAxis,'&y_axis=',yAxis,'&cat_id=ag_lab_categories__10" target="_blank">here</a>.')
    
    
    figCap <- paste0(
        '**Figure ',
        figureCount,
        'A:** GSEA NES Volcano Plot ',tag,'. This may plot might help to determine the overall significance of GSEA category enrichments in this experiment.',
        'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. '
        #'An interactive version of this plot can be found ', link1
    )
 
    figureCount <- figureCount + 1
   
    NewChnk <- paste0(
            "### GSEAV-Plot ",tag,
            "\n```{r ",tag,", results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )
    
      
}

if (length(plotList) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}

```
   
## Diagnotstic GSEA Volcano Plots {`r tabVar`}

```{r plot_GSEA_cat_overview, echo=FALSE, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knit(text = chnkVec, quiet = T), collapse = '\n'))
```
  
  
    
```{r GSEA_section, echo=TRUE, eval=TRUE, warning=FALSE, results=F}        
###############################################################################
## Retrieve GSEA Table                                                       ##

dfGdat <- dfRes




###############################################################################
## Plot top-scoring categories                                               ##

## Select top 10 categories from each ##


dfGdatS <- dfGdat
## Write table as Excel into outputs ##


    

tableCap <- paste0(
'**GSEA Result Table:** Find the GSEA normalized enrichment score (NES) and the enrichment p-value in the above table. Plot entries mean that for this category and comparison a GSEA plot is readily available for download. Download the full GSEA result table as Excel file <a href = "',FNTrel,'" target="_blank">here</a>'
)

dfGdat <- dfGdatS

```


## GSEA Result Table
```{r GSEA_table, echo=TRUE, eval=TRUE, warning=FALSE, results=T, fig.cap=tableCap}
chnkVec <- as.vector(NULL, mode = "character")

## Add sample group color ##

dfDataTable <- dfGdat
dfDataTable <- dfDataTable[dfDataTable$padj < 0.25,]

dfDataTable[["Volcanoplot_Link"]] <- paste0(
    '<a href="',
    dfDataTable[["Volcanoplot_Link"]],
    '" target="_blank">Cat Volcano Plot Link</a>'
)

dfDataTable[["MAplot_Link"]] <- paste0(
    '<a href="',
    dfDataTable[["MAplot_Link"]],
    '" target="_blank">Cat_MA Plot Link</a>'
)

dfDataTable[["Heatmap_Link"]] <- paste0(
    '<a href="',
    dfDataTable[["Heatmap_Link"]],
    '" target="_blank">Cat Heatmap Link</a>'
)


dfDataTable$cat_name <- gsub("_", " ", dfDataTable$cat_name)
dfDataTable$NES <- round(dfDataTable$NES, 3)
dfDataTable$padj <- scales::scientific(dfDataTable$padj, digits = 3)


GSEAcol <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Pastel1"))(length(unique(dfDataTable$GSEA)))

dfCol <- data.frame(GSEA=unique(dfDataTable$GSEA), contrastCol=GSEAcol)

dfDataTable <- merge(
    dfDataTable, 
    dfCol, 
    by.x = "GSEA",
    by.y = "GSEA"
)

dfDataTable$GSEA <- paste0(
        '<p style="background-color:',dfDataTable$contrastCol,';text-align:center">',dfDataTable$GSEA,'</p>'
    ) 

selVec <- c(
    "GSEA",
    "cat_name",         
    "NES",              
    "padj",            
    "Volcanoplot_Link", 
    "MAplot_Link",      
    "Heatmap_Link"  
)

selVec <- selVec[selVec %in% names(dfDataTable)]
dfDataTable <- unique(dfDataTable[,selVec])

dfDataTable <- dfDataTable[order(dfDataTable$NES, decreasing=F), ]

DT::datatable(
    dfDataTable,
    colnames = gsub("_", " ", names(dfDataTable)),
    rownames = FALSE,
    escape = FALSE,
    options = list(
        initComplete = htmlwidgets::JS(
            "function(settings, json) {",
            "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
            "}"
        ),
    order = list( list(3, 'desc'), list(4, 'asc'))
    )
) 




```





<!--chapter:end:15-B.13.cat.enrichment.fGSEA.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set Parameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r LRT_module, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "C12.LRT."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")


```



```{r LRT_section, echo=TRUE, eval=TRUE, warning=FALSE, results=F}
chnkVec <- as.vector(NULL, mode = "character")
plotList <- list()
lrtVec <- names(Obio@DEseq2LRTtable)[grep("LRT_",names(Obio@DEseq2LRTtable))]
lrtVec <- names(Obio@DEseq2LRTtable)
lrtVec <- lrtVec[grep("lg10p", lrtVec)]


if (length(lrtVec) > 0){
for (i in 1:length(lrtVec)){
    lrtVec[i] <- unlist(strsplit(lrtVec[i], "lg10p"))[2]
    tag <- lrtVec[i]
    selVec <- c(
      Obio@parameterList$geneIDcolumn,
      paste0("contrast_L_lg2BaseMean", lrtVec[i]),
      paste0("contrast_L_lg10p", lrtVec[i])
    )
      
    dfTemp <- unique(dfMainData[,selVec])  
    names(dfTemp)[2] <- "X"
    names(dfTemp)[3] <- "Y"
    
    dfTemp <- dfTemp[!(dfTemp[,2] ==0),]
    dfTemp <- dfTemp[!(dfTemp[,3] ==0),]
    
    dfTemp <- dfTemp[order(dfTemp$Y, decreasing=T),]
    
    dfTemp[["label"]] <- ""
    dfTemp[1:10,"label"] <- dfTemp[1:10,geneIDcolumn]
    
    ###########################################################################
    ## Make plot                                                             ##
    dsize <- 1
    alpha <- I(0.5)
    shape <- 21
    legendDotSize <- 5
    
    plotList[[tag]] <- ggplot(
        data = dfTemp,
        aes(x=X, y=Y, label = label)
    #) + geom_vline(xintercept = 0, color = "grey", size=0.5
    ) + geom_hline(yintercept = c(2), color = "red", size=0.5,linetype = 2
    ) + geom_hline(yintercept = 0, color = "grey", size=0.5
    ) + geom_point(
        size=dsize,
        shape = shape,
        alpha = alpha,
        fill = "grey"
    ) + labs(
        title = paste0("LRT padj vs. BaseMean ", lrtVec[i]), 
        x = paste0("Base Mean/Intensity", lrtVec[i],")"),
        y = paste0("-log10(LRT-pval ", lrtVec[i],")") 
    ) + theme_bw(
    ) +  theme(
        axis.text.y   = element_text(size=8),
        axis.text.x   = element_text(size=8),
        axis.title.y  = element_text(size=12),
        axis.title.x  = element_text(size=12),
        axis.line = element_line(colour = "black"),
        panel.border = element_rect(colour = "black", fill=NA, size=1),
        plot.title = element_text(hjust = 0.5, size = 12)
        #) + scale_fill_manual(values=c("#999999", "#E69F00")
    ) + guides(col = guide_legend(override.aes = list(shape = 16, size = legendDotSize))
    ) 
         
    
    ## And now let's add the labels:
    plotList[[tag]] <- plotList[[tag]] + ggrepel::geom_text_repel(size = 3)
    ## Done making plot 
    ###########################################################################
  
    ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0(lrtVec[i], ".LRTplot", VersionPdfExt)
    FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(plotList[[tag]])
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
   link <- paste0("https://biologic.crick.ac.uk/",Obio@parameterList$project_id,"/scatterplot?x_axis=",selVec[2],"&y_axis=",selVec[3],"&cat_id=ag_lab_categories__10")
    
    figCap <- paste0(
        '**Figure ',
        figureCount,
        '** -log10 p-value of the likelihood ratio rest vs. Base Mean/Intensity plot. Donwolad a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>',
        'An interactive version of this figure can be found <a href="',link,'" target="_blank">here</a>. '
    )
 
    figureCount <- figureCount + 1
    
    NewChnk <- paste0(
        paste0("### ",tag," \n"),
            "\n```{r, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )
}
}

if (length(lrtVec) > 0){
    if (length(plotList) > 2){
        tabVar <- ".tabset .tabset-fade .tabset-dropdown"
    } else {
        tabVar <- ".tabset .tabset-fade .tabset-pills"
    }
    
    sectionDisplay <- paste0("# Likelyhood-ratio Test Results (LRT) {",tabVar, "}")
    
} else {
    sectionDisplay <- ""
}

```


`r sectionDisplay`

```{r lrt_plot, echo=FALSE, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knitr::knit(text = chnkVec, quiet = T), collapse = '\n'))
```


<!--chapter:end:16-B.14.LRT.plots.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set Parameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r docu_module, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B15.Documentation."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```

# Project Summary


```{r display_text_2, eval=T, results="asis"}
cat(paste0('## Check Positive Controls - Individual Genes','\n','\n',
'In order to get an overview over your latest sequencing results, you might want to look for the performance of individual genes that may serve as a positive control. You can do this by entering an official gene name into the search box in the  [GeneView section](https://biologic.crick.ac.uk/',Obio@parameterList$project_id,'/gene-view). Genes that were detected in this experiment will be suggested to you after starting to type. If a gene is not suggested, it was not detected in this experiment. The gene result on display will give you information on the amount of reads detected for the gene in question (TPM value plot. TPM values give you read-counts, normalized for the gene length and the library size - see slideshow for a detailed definition).','\n','\n',
           
'## Check Positive Controls - Gene Categories
Next you may wish to view your latest dataset through the lens of a gene category that captures all genes relevant to the process you are investigating. A number of gene categories represented in your experiment can be found in the CategoryView section, lower panel. Reference categories are organized by category class and for most reference category a weblink is given to inform you about the origin of that gene category dataset (Category Description column). Click to the category name in order to view the performance of the genes in that category in the context of your experiment. You will be presented by default with a heatmap, but you may change this to a 2D scatterplot in which the category genes are highlighted by using the pull-down menu given underneath the heatmap depiction. In addition, a table is given informing you about the log-fold changes recorded for genes in this category. You may click on individual tiles in the heatmap to be taken to the individual results for the gene.','\n','\n',
           
'It might make sense to review your data in the context of results your lab has obtained in the past or in the context of published data. In order to that bioinformatics will add gene categories to either your lab categories selection or to the selection "this experiment" in CategoryView, lower table.','\n','\n',
           
'## Result Table Download',
'\n','\n',

'<a href="report_tables/"',Obio@parameterList$project_id,'_GSEA.xlsx"  target="_blank">Download Result Table</a>','\n','\n',
'<a href="report_tables/"',Obio@parameterList$project_id,'.result.table.xlsx"  target="_blank">Download Metacore Input File</a>','\n','\n',


'## Bioinformatics Method Summary ','\n',
'Sequencing was performed on an ',Obio@parameterList$machine,' machine. The "Trim Galore!" utility version 0.4.2 was used to remove sequencing adaptors and to quality trim individual reads with the q-parameter set to 20 (1). Then sequencing reads were aligned to the mouse genome and transcriptome (Ensembl ', Obio@parameterList$genome, Obio@parameterList$release,') using RSEM version 1.3.0 (2) in conjunction with the STAR aligner version 2.5.2 (3). Sequencing quality of individual samples was assessed using FASTQC version 0.11.5 (4) and RNA-SeQC version 1.1.8 (5). Differential gene expression was determined using the R-bioconductor package DESeq2 version 1.14.1(6,7). Gene set enrichment analysis (GSEA) was conducted as described in Subramanian et al (8).','\n','\n',
           
           
           
'REF 1: https://www.bioinformatics.babraham.ac.uk/projects/trim_galore/ (retrieved 03-05-2017)','\n','\n',
           
'REF 2: Bo Li and Colin N Dewey (2011). RSEM: accurate transcript quantification from RNA-Seq data with or without a reference genome. BMC Bioinformatics 12:323','\n','\n',
           
'REF 3 : Dobin A, Davis CA, Schlesinger F, Drenkow J, Zaleski C, Jha S, Batut P, Chaisson M and Gineras TR. (2012) STAR: ultrafast universal RNASEQ aligner. Bioinformatics. 29. 15-21','\n','\n',
           
'REF 4: https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ (retrieved 03-05-2017)','\n','\n',
           
'REF 5: DeLuca et al (2012). RNA-SeQC: RNA-seq metrics for quality control and process optimization. Bioinformatics (28) 1530-1532','\n','\n',
           
'REF 6: Love MI, Huber W and Anders S (2014). Moderated estimation of fold change and dispersion for RNA-seq data with DESeq2. Genome Biology, 15, pp. 550.','\n','\n',
           
'REF 7: R Development Core Team (2008). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. ISBN 3-900051-07-0, URL http://www.R-project.org.','\n','\n',
           
'REF 8: Subramanian et al.(2005), Gene set enrichment analysi: A knowledge-based approach for interpreting genome-wide expression profiles. PNAS (43) 15545-15550.','\n','\n'
))
```

<!--chapter:end:17-B.15.bulkRNAseq.documentation.Rmd-->

---
output: 
    html_document:
        code_folding: hide
        df_print: tibble
        highlight: default
        theme: paper
        toc: true
        toc_depth: 5
        toc_float: true
        css: src/style/style.css

always_allow_html: yes
---
```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```

```{r setup, include=FALSE}
###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
# 
# remotes::install_github("rstudio/renv")

if (!file.exists("renv.lock")){
    renv::init(
    )
} else {
    renv::restore(
        #project = "../../",
        prompt=FALSE
    )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################


###############################################################################
## Set knitr options                                                         ##

knitr::opts_chunk$set(
    tidy = F,
    tidy.opts = list(width.cutoff = 120),
    message = FALSE,
    warning = FALSE,
    #dev="png"
    dev = "png", dev.args = list(type = "cairo-png"),
    fig.width=7,  # default setting is 7 
    fig.height=5,  # default setting is 5
    fig.retina=1  # default setting is 1
    #fig.path = "images/"
)

##                                                                           ##
###############################################################################
```

```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}
###############################################################################
## load biologic object                                                      ##

source("load.biologic.robj.R")

## Done                                                                      ##
###############################################################################

###############################################################################
## Set report variables                                                      ##

# Obio@parameterList$workdir - available 
Obio@parameterList[["figureCount"]] <- 1
Obio@parameterList[["tableCount"]] <- 1
Obio@parameterList[["upload.results.to.database"]] <- TRUE
Obio@parameterList[["shinyBaseServerURL"]] <- "shiny-bioinformatics.crick.ac.uk"
Obio@parameterList[["urlString"]] <- "biologic.crick.ac.uk"

## Done setting report variables                                             ##
###############################################################################

###############################################################################
## In this case - set project params                                         ##
Obio@documentationParams <- list(
    "title" = "Transcriptomic analysis of Sh2d2a knockout regulatory T cells following a time-course of anti-CD3 stimulation",
    "subtitle" = "David M Briscoe Lab; Literature Bulk-rna Seq GSE134515",
    "abstract" = "CD4+CD25high regulatory T cells were FACS-sorted from Sh2d2a knockout and wild type mice and activated with 1 µg/ml anti-CD3 (clone: 145-2C11) for 2, 8 and 24 hours. Experiments were performed in duplicate conditions."
)

## Done                                                                      ##
###############################################################################

###############################################################################
## Set password for database access                                          ##
###############################################################################
## Set database password                                                     ##
# Get database password from file

if (dir.exists("/Volumes/babs/working/boeings/")){
    hpc.mount <- "/Volumes/babs/working/boeings/"
} else if (dir.exists("Y:/working/boeings/")){
    hpc.mount <- "Y:/working/boeings/"
} else if (dir.exists("/camp/stp/babs/working/boeings/")){
    hpc.mount <- "/camp/stp/babs/working/boeings/"
} else {
    hpc.mount <- ""
}

## Loading the BABS password ##
if (Obio@parameterList[["upload.results.to.database"]]){
    FN <- paste0(hpc.mount, "Projects/reference_data/pwd_folder/babs.txt")
    dbTable <- read.delim(
      FN,
      header = F,
      sep = "\t",
      stringsAsFactors = F
    )
}

 Obio@dbDetailList[["db.pwd"]] <- as.vector(dbTable[1,1])
##                                                                           ##
###############################################################################
## Done                                                                      ##
###############################################################################

###############################################################################
## Save biologic object with additional variables                            ##

source("save.biologic.robj.R")

## Done                                                                      ##
###############################################################################

```


<!-- Essential: Load Obio Data Object ---------------------------------------->
```{r child = '01-B.1.set.parameters.Rmd', eval=TRUE}
```

<!-- Optional set data access parameters for R-users ------------------------->
```{r child = '02-B.1.2.set.data.access.parameters.for.R.data.import.Rmd', eval=TRUE}
```

<!-- Optional: Retrieve reference gene sets----------------------------------->
```{r child = '03-B.2.retrieve.reference.gene.sets.Rmd', eval=TRUE}
```

<!-- Essential: Add RSEM count matrix and TPM matrix ------------------------->
```{r child = '04-A.1.add.data.to.analysis.object.Rmd', eval=TRUE}
```

<!-- Optional: Add alignment summary to report-------------------------------->
<!-- Modify - copy nf-core outputs            -------------------------------->
```{r child = '05-B.3.alignment.summary.Rmd', eval=TRUE}
```

<!-- Optional 4: (creates output only): Analysis Guide -->
```{r child = '06-B.4.analysis.guide.Rmd', eval=TRUE}
```

<!-- Optional 5: (creates output only): Display design table -->
```{r child = '07-B.5.display.design.table.and.formula.table.Rmd', eval=TRUE}
```

<!-- Essential: DEseq2 analysis -->
<!-- Creates PCA -->
```{r child = '08-B.6.DEseq2.PCA.Rmd', eval=TRUE}
```

<!-- Essential: DEseq2 analysis -->
<!-- Creates LRT and DGE analyses -->
```{r child = '09-B.7.DEseq2.LRT.DGE.Rmd', eval=TRUE}
```

<!-- Optional 8: (creates output only): Sample Characterization -->
<!-- Coefficient of variation and cluster dendrogram -->
```{r child = '10-B.8.sample.characterization.Rmd', eval=TRUE}
```

<!-- Optional 9: (output only): PCA sample characterization Chapter/Module -->
```{r child = '11-B.9.pca.characterization.Rmd', eval=TRUE}
```

<!-- Optional 10: (output only): Gene Category Heatmaps Chapter/Module -->
```{r child = '12-B.10.heatmaps.Rmd', eval=TRUE}
```

<!-- Optional 11: (output only): MA- and Volcanoplot Chapter/Module -->
```{r child = '13-B.11.volcanoplots.ma.plots.Rmd', eval=TRUE}
```

<!-- Optional 12: (output only): Category Enrichment Hypergeometric Test Chapter/Module -->
```{r child = '14-B.12.cat.enrichment.HG.Rmd', eval=TRUE}
```

<!-- Optional 13: (output only): Category Enrichment fGSEA Method Chapter/Module -->
```{r child = '15-B.13.cat.enrichment.fGSEA.Rmd', eval=TRUE}
```


<!-- Optional 12: (output only): LRT Analysis Chapter/Module -->
```{r child = '16-B.14.LRT.plots.Rmd', eval=TRUE}
```

<!-- Optional 13: (output only): Documentation Chapter/Module -->
```{r child = '17-B.15.bulkRNAseq.documentation.Rmd', eval=TRUE}
```

```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}
###############################################################################
## Save Obio Object                                                          ##

## Remove password from file
Obio@dbDetailList[["db.pwd"]] <- NULL

source("save.biologic.robj.R")

##                                                                           ##
###############################################################################


```






```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}

## Try to retrieve project data from db ##
db.pwd2 <- "zU3ufd9L"
db.user2 <- "reader"
host2 <- "clvd1-db-u-p-17.thecrick.org"
projectParams <- Obio@documentationParams

tryCatch({
    dbDB = DBI::dbConnect(
        drv = RMySQL::MySQL(), 
        user = db.user2, 
        password = db.pwd2, 
        host = host2, 
        dbname = "clarity_shadow"
    )
    dfProposal <-  DBI::dbGetQuery(
        dbDB, 
        paste0("SELECT * FROM clarify_asf_proposals WHERE project_name ='",Obio@projectDetailList$lims.id,"'")
    )
    dbDisconnect(dbDB)
}, error = function(x) {
    message("Project Database could not be reached or has no entry in Obio@parameterList$lims.id for this analysis.")
})

###############################################################################
## Helper
firstup <- function(x) {
    substr(x, 1, 1) <- toupper(substr(x, 1, 1))
    x
}
##
###############################################################################


if (exists("dfProposal")){
    if (!is.na(dfProposal[1,"ProjectAlias"]) & dfProposal[1,"ProjectAlias"] != ""){
        projectParams[["title"]] = paste0(dfProposal[1,"ProjectAlias"], " - ", dfProposal[1,"project_name"])
    }
    
    if (!is.na(dfProposal[1,"project_user"]) & dfProposal[1,"project_user"] != ""){
        labString <- firstup(dfProposal[1,"user_lab"])
        labString <- substr(labString, 1, (nchar(labString) - 1))
      
        projectParams[["subtitle"]] = paste0(labString, " Lab - ", dfProposal[1,"project_user"])
        projectParams[["subtitle"]] <- gsub("^ Lab - ", "", projectParams[["subtitle"]])
        
    }
    
    if (!is.na(dfProposal[1,"proposal_text"]) & dfProposal[1,"proposal_text"] != ""){
        projectParams[["abstract"]] = dfProposal[1,"proposal_text"]
       
        
    }
}
   
## Escape all special characters
projectParams <- lapply(
  projectParams, function(x) 
  #gsub("([.|()\\^{}+$*?]|\\[|\\])", "\\\\\1", x)
  gsub("([.|()/\\^{}+$*?]|\\[|\\])", " ", x)
) 

projectParams <- lapply(
  projectParams, function(x) 
  #gsub("([.|()\\^{}+$*?]|\\[|\\])", "\\\\\1", x)
  gsub("\\\n", " ", x)
) 


```



## Documentation
```{r documentation, eval=TRUE, echo=F, results=T, error=F}
#renv::snapshot(prompt=FALSE)

sessionInfo()
```

---
title: "`r projectParams$title`"
subtitle:  "`r projectParams$subtitle`"
author:
    - Bioinformatics: Stefan Boeing^[The Francis Crick Institute, stefan.boeing@crick.ac.uk]
date: 'Compiled: `r format(Sys.Date(), "%B %d, %Y")`'

abstract: |
    "`r projectParams$abstract`"


---

<!--chapter:end:Main_Analysis.Rmd-->

---
output:
  bookdown::html_document2:
    includes:
      in_header: header.html
  bookdown::gitbook:
    includes:
      in_header: header.html

---
```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```

# Bulk RNA-Seq Analysis

  This is a _sample_ book written in **Markdown**. You can use anything that Pandoc's Markdown supports, e.g., a math equation $a^2 + b^2 = c^2$.

The **bookdown** package can be installed from CRAN or Github:

```{r eval=FALSE}
install.packages("bookdown")
# or the development version
# devtools::install_github("rstudio/bookdown")
```

Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading `#`.

To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): <https://yihui.name/tinytex/>.

```{r include=FALSE}
# automatically create a bib database for R packages
knitr::write_bib(c(
  .packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
```

```{r create_report_params, eval=T, results="asis"}

## Try to retrieve project data from db ##
db.pwd2 <- "zU3ufd9L"
db.user2 <- "reader"
host2 <- "clvd1-db-u-p-17.thecrick.org"
projectParams <- Obio@documentationParams

tryCatch({
    dbDB = DBI::dbConnect(
        drv = RMySQL::MySQL(),
        user = db.user2,
        password = db.pwd2,
        host = host2,
        dbname = "clarity_shadow"
    )
    dfProposal <-  DBI::dbGetQuery(
        dbDB,
        paste0("SELECT * FROM clarify_asf_proposals WHERE project_name ='",Obio@projectDetailList$lims.id,"'")
    )
    dbDisconnect(dbDB)
}, error = function(x) {
    message("Project Database could not be reached or has no entry in Obio@parameterList$lims.id for this analysis.")
})

###############################################################################
## Helper
firstup <- function(x) {
    substr(x, 1, 1) <- toupper(substr(x, 1, 1))
    x
}
##
###############################################################################


if (exists("dfProposal")){
    if (!is.na(dfProposal[1,"ProjectAlias"]) & dfProposal[1,"ProjectAlias"] != ""){
        projectParams[["title"]] = paste0(dfProposal[1,"ProjectAlias"], " - ", dfProposal[1,"project_name"])
    }

    if (!is.na(dfProposal[1,"project_user"]) & dfProposal[1,"project_user"] != ""){
        labString <- firstup(dfProposal[1,"user_lab"])
        labString <- substr(labString, 1, (nchar(labString) - 1))

        projectParams[["subtitle"]] = paste0(labString, " Lab - ", dfProposal[1,"project_user"])
        projectParams[["subtitle"]] <- gsub("^ Lab - ", "", projectParams[["subtitle"]])

    }

    if (!is.na(dfProposal[1,"proposal_text"]) & dfProposal[1,"proposal_text"] != ""){
        projectParams[["abstract"]] = dfProposal[1,"proposal_text"]


    }
}

## Escape all special characters
projectParams <- lapply(
  projectParams, function(x)
  #gsub("([.|()\\^{}+$*?]|\\[|\\])", "\\\\\1", x)
  gsub("([.|()/\\^{}+$*?]|\\[|\\])", " ", x)
)

projectParams <- lapply(
  projectParams, function(x)
  #gsub("([.|()\\^{}+$*?]|\\[|\\])", "\\\\\1", x)
  gsub("\\\n", " ", x)
)


```



---
title: "`r projectParams$title`"
subtitle:  "`r projectParams$subtitle`"
author:
    - Bioinformatics: Stefan Boeing^[The Francis Crick Institute, stefan.boeing@crick.ac.uk]
date: 'Compiled: `r format(Sys.Date(), "%B %d, %Y")`'

abstract: |
    "`r projectParams$abstract`"

description: "This is a minimal example of using the bookdown package to write a book. The output format for this example is bookdown::gitbook."
---

<!--chapter:end:index.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
```{r set_parameters_init, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "partB.set.parameters."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```


```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}

## Create gene annotation if it is not present ##
## To be activated ##
if (is.null(Obio@parameterList$path2GeneIDtable)){
    dfAnno <- biologicSeqTools2::createGeneNameTable(
        obj = Obio,
        biomart = "ENSEMBL_MART_ENSEMBL",
        selString = "mmusculus_gene_ensembl",
        host= "http://may2017.archive.ensembl.org",
        primaryAlignmentGeneID = "ENSMUSG",
        geneIDcolumn = "mgi_symbol"
    )
}

## For now we expect a gene annotation file to be specified already
Obio <- setCrickGenomeAndGeneNameTable(Obio)

# In the future this will be done using the more general
# biologicSeqTools2::setGenomeAndGeneNameTable
# function

## Create analysis folders in the working directory
Obio <- createAnalysisFolders(
    Obio
)

## Set additional parameters
Obio <- setDataBaseParameters(Obio)

## This can be upgraded to web retrieval of annotation data 
Obio <- addGeneAnnotation(Obio)

 
## Create shiny path for figure outputs ##           
shinyURL <- paste0(
    "https://",
    Obio@parameterList[["shinyBaseServerURL"]],
    "/shiny/boeings/",
    Obio@parameterList$project_id,
    "_app/"
)            
        
    

## Create outputfolders ##
# if (!dir.exists(paste0(Obio@parameterList$localWorkDir,Obio@parameterList$project_id))){
#     dir.create(paste0(Obio@parameterList$localWorkDir,Obio@parameterList$project_id))
# }

Obio@parameterList[["html_local"]] <- paste0(Obio@parameterList$folder, "html_local/")

if (!dir.exists(Obio@parameterList[["html_local"]])){
    dir.create(Obio@parameterList[["html_local"]])
}

Obio@parameterList[["reportFigDir"]] <- paste0(Obio@parameterList$html_local, "report_figures/")
if (!dir.exists(Obio@parameterList$reportFigDir)){
    dir.create(Obio@parameterList$reportFigDir)
}

pdfTemp <- paste0(Obio@parameterList$reportFigDir, "temp.pdf")

Obio@parameterList[["reportTableDir"]] <- paste0(Obio@parameterList$html_local, "report_tables/")
if (!dir.exists(Obio@parameterList$reportTableDir)){
    dir.create(Obio@parameterList$reportTableDir)
}


## Create data dir
Obio@parameterList[["data_dir"]] <- paste0(Obio@parameterList$folder, "data/")

if (!dir.exists(Obio@parameterList$data_dir)){
    dir.create(Obio@parameterList$data_dir)
}


## Set default for database connections ##
pos <- grep("^host$", names(Obio@dbDetailList))
if (length(pos) ==0 ){
    Obio@dbDetailList$host <- NULL
    
    if (is.null(Obio@dbDetailList)){
        Obio@dbDetailList = list("host" = NULL)
    }
    
    upload.results.to.database <- FALSE
    print("No database server provided. upload.results.to.database set to FALSE")
    
}

if (!is.null(Obio@dbDetailList$host)){
    if (Obio@dbDetailList$host == "10.27.241.234"){
        urlString <- "biologic.thecrick.org"
    } else {
        urlString <- "biologic.crick.ac.uk"
    }    
} else {
    urlString <- ""
}


##                                                                           ##
###############################################################################

```




<!--chapter:end:01-B.1.set.parameters.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set Parameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "partB.set.parameters."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```


# Option to Load Data Into R
## Download variables
With the parmeters below, you can import the data relating to this RNA-Seq projet directly into a R-session. 
```{r, echo=F, eval=T, warning=FALSE}

## Check if project access file exists ##
projectAccessDir <- paste0(Obio@parameterList$workdir, "project_access/")
projectAccessFile <- paste0(Obio@parameterList$workdir, "project_access/project_access.txt")
if (file.exists(projectAccessFile)){
    df <- read.delim(
        projectAccessFile, 
        sep = "\t",
        stringsAsFactors = F
    )
    username <- df$username
    pass <- df$pass
    
    
} else {
    username <- substr(paste0(Obio@parameterList$project_id,"_da"), 1, 16)
    sPwd <-c(2:9,letters,LETTERS)
    pass <- paste(sample(sPwd,8),collapse="")
    df <- data.frame(username, pass)
    if (!dir.exists(projectAccessDir)){
        dir.create(projectAccessDir, recursive = T)
    }
    write.table(df, projectAccessFile, row.names=F, sep="\t")
}
    
Obio@dbDetailList[["RaccessUsername"]] <- username
Obio@dbDetailList[["RaccessPass"]] <- pass

## Assign project tables ##
## Design
if (is.null(Obio@parameterList$designdbTableName)){
  Obio@parameterList$designdbTableName <- paste0(Obio@parameterList$project_id, "_designTable")
}

designTB <- Obio@parameterList$designdbTableName



## Main
if (is.null(Obio@parameterList$rnaseqdbTableName)){
    Obio@parameterList$rnaseqdbTableName <- paste0(Obio@parameterList$project_id, "_bulk_rna_seq_table")
}
mainTB <- Obio@parameterList$rnaseqdbTableName
## PCA
if (is.null(Obio@parameterList$PCAdbTableName)){
    Obio@parameterList$PCAdbTableName <- paste0(Obio@parameterList$project_id, "_PCA")
}
pcaTB <- Obio@parameterList$PCAdbTableName

host <- Obio@dbDetailList$host
db <- Obio@dbDetailList$primDataDB
designString <- designTB
mainTBstring <- mainTB
pcaDbTable <- pcaTB
## Done installing package                                                   ##
###############################################################################
userString <- paste0('username <- "', username,'"')
passString <- paste0('pass <- "', pass,'"')
hostString <- paste0('host <- "', host,'"')
dbString <- paste0('db <- "', db,'"')
designString <- paste0('designTB <- "', designTB,'"')
mainTBstring <- paste0('mainTB <- "', mainTB,'"')
pcaDbTable <- paste0('pcaTB <- "', pcaTB,'"')
species <- Obio@parameterList$species
geneIDcolumn <- Obio@parameterList$geneIDcolumn
alignmentGeneID <- Obio@parameterList$primaryAlignmentGeneID
speciesString <- paste0('species <- "', species,'"')
alignmentGeneIDString <- paste0('alignmentGeneID <- "', alignmentGeneID,'"')
geneIDstring <- paste0('geneIDcolumn <- "', geneIDcolumn,'"')
pos <- grep("designTScol", names(Obio@parameterList))
if (length(pos) > 0){
    if (!is.null(Obio@parameterList$designTScol)){
        designTScol <- Obio@parameterList$designTScol
        timepointString <- paste0('designTScol <- "', designTScol,'"')
    } else {
        timepointString <- "" 
    }
} else {
    timepointString <- ""   
}
```

<style>
    div.grey pre { background-color:#f5f5f5; }
    div.grey pre.r { background-color:black; }
</style>
            
Here we set the database access variables so we can get your data in </br></br>
            
<div class = "grey">
```{r, echo=F, eval=T, warning=FALSE,comment=NA}
            
            oneString <- paste0(
                userString,
                "\n",
                passString,
                "\n",
                hostString,
                "\n",
                dbString,
                "\n"
            )
            
            cat(oneString)
            
            
```
</div>
                
Here we define the tables from which we draw the data:
<div class = "grey">
```{r, echo=F, eval=T, warning=FALSE,comment=NA}
            
            twoString <- paste0(
                designString,
                "\n",
                mainTBstring,
                "\n",
                pcaDbTable,
                "\n"
            )
            
            cat(twoString)
            
            
```
 </div>
                
                
And here we set a few more variables we'll need for plotting:
<div class = "grey">
```{r, echo=F, eval=T, warning=FALSE,comment=NA}
threeString <- paste0(
    speciesString,
    "\n",
    geneIDstring,
    "\n",
    alignmentGeneIDString,
    "\n",
    timepointString
)
cat(threeString)
```
</div>

## Load Data into R
Next, let's load your project data. We will need this as a basis for making the plots further down. 

```{r, echo=TRUE, eval=F, warning=FALSE, class.source = 'fold-show'}

## The line below will install an R-package that we need to connect to the  Crick database
devtools::install_github("decusinlabore/bioLOGIC")

library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples. 
dfDesign <- import.db.table.from.db(
    dbname = db,
    dbtable = designTB,
    host = host,
    user = username,
    password = pass
)
## Load main data table from database. In this table a lot of gene-level information for this project is assembled. 
dfMainData <- import.db.table.from.db(
    dbname = db,
    dbtable = mainTB,
    host = host,
    user = username,
    password = pass
)
## Load main pca table from database. This table contains cell-level PCA information.
dfPCA <- import.db.table.from.db(
    dbname = db,
    dbtable = pcaTB,
    host = host,
    user = username,
    password = pass
)
## For some plots we want to limit the number of genes to the most interesting, so let's get those in a vector:
# Most variable gene names
dfVar <- dfMainData[dfMainData$logFC_cut_off != 0 ,c(geneIDcolumn, alignmentGeneID)]
mostVarGenes <- as.vector(unique(sort(dfVar[,geneIDcolumn])))
mostVarGenes <- na.omit(mostVarGenes[mostVarGenes != ""])
# Most variable gene IDs
mostVarIDs <- as.vector(unique(sort(dfVar[,alignmentGeneID])))
mostVarIDs <- na.omit(mostVarIDs[mostVarIDs != ""])
```


```{r, echo=F, eval=T, warning=FALSE,comment=NA}
## In this section the data for this report is loaded from file in order to maintain version control. The data loaded in this section should be identical with the version of the proejct kept in the database. 
dfDesign <- Obio@dfDesign
# dfMainData <- Obio@databaseTable
# dfPCA <- Obio@dfPCA
dfModel <- Obio@dfModel
# dfVar <- dfMainData[dfMainData$logFC_cut_off != 0 ,c(geneIDcolumn, alignmentGeneID)]
# mostVarGenes <- as.vector(unique(sort(dfVar[,geneIDcolumn])))
# mostVarGenes <- na.omit(mostVarGenes[mostVarGenes != ""])
# Most variable gene IDs
# mostVarIDs <- as.vector(unique(sort(dfVar[,alignmentGeneID])))
#mostVarIDs <- na.omit(mostVarIDs[mostVarIDs != ""])
```

<!--chapter:end:02-B.1.2.set.data.access.parameters.for.R.data.import.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set Parameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r partB_retrieve_reference_gene_sets_init, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B2.ref.gmt."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")
```



```{r partB_create_sample_list, echo=FALSE, eval=TRUE, warning=FALSE, results=F}
###############################################################################
## Load reference datasets                                                   ##
Obio@dataTableList[["referenceList"]] <- NULL
if (!is.null(Obio@dbDetailList$host)){
    if (Obio@parameterList$geneIDcolumn != "mgi_symbol" & Obio@parameterList$geneIDcolumn != "hgnc_symbol") {
        queryGS <- "hgnc_symbol" 
    } else {
            queryGS <- Obio@parameterList$geneIDcolumn
    }
  
    Obio@dataTableList[["referenceList"]] <- list(
        # "s.genes" = retrieve.gene.category.from.db(
        #                 cat_id = "ag_lab_categories__41",
        #                 password = db.pwd,
        #                 gene.symbol = queryGS,
        #                 user = Obio@dbDetailList$db.user,
        #                 host = Obio@dbDetailList$host
        #             ),
        # "g2m.genes" = retrieve.gene.category.from.db(
        #                   cat_id = "ag_lab_categories__42",
        #                   password = db.pwd,
        #                   gene.symbol = queryGS,
        #                   user = Obio@dbDetailList$db.user,
        #                   host = Obio@dbDetailList$host
        #             ),
        "TFs" = retrieve.gene.category.from.db(
                          cat_id = "ag_lab_categories__10",
                          password = Obio@dbDetailList[["db.pwd"]],
                          gene.symbol = queryGS,
                          user = Obio@dbDetailList$db.user,
                          host = Obio@dbDetailList$host
        )
        
      )
}
## Done create cellRanger QC plots                                           ##
###############################################################################
```

<!--chapter:end:03-B.2.retrieve.reference.gene.sets.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=TRUE, eval=TRUE, warning=FALSE}
chnkPrefix <- "add.data"
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```




```{r, echo=F, eval=T, warning=FALSE}

###############################################################################
## Essential bits                                                            ##
###############################################################################


###############################################################################
## Add Design file and check                                                 ##

if (!is.null(Obio@projectDetailList$designFN)){
    dfDesign <- read.delim(
        Obio@projectDetailList$designFN, 
        header =T, 
        sep = "\t",
        stringsAsFactors = F
    )
    
    dfDesign[is.na(dfDesign)] <- ""
} else {
    stop("Error: Now design file specified")
}

## Make sure the design file has a sample.group_color column:
pos <- grep("^sample.group_color$", names(dfDesign))

if (length(pos) == 0){
    ## Create default ##
    sample.group <- unique(dfDesign$sample.group)
    sample.group_color <- sample.group
            #library(scales)
    sample.group_color = scales::hue_pal()(length(sample.group_color))
            #sample.group_color = c("#990000", "#009900")
    
    ## set sample group colors manually
    
    dfGroupColors <- unique(data.frame(sample.group, sample.group_color))
    dfDesign <- merge(dfDesign, dfGroupColors, by.x = "sample.group", "sample.group")
    
}



## Add: check for essential columns ##
Obio@dfDesign <- data.frame(NULL)
Obio@dfDesign <- dfDesign

##                                                                           ##
###############################################################################

###############################################################################
## Add model file and check                                                 ##
if (!is.null(Obio@projectDetailList$modelFN)){
    dfModel <- read.delim(
        Obio@projectDetailList$modelFN, 
        header =T, 
        sep = "\t",
        stringsAsFactors = F
    )
    dfModel[is.na(dfModel)] <- ""
    Obio@dfModel <- data.frame(NULL)
    Obio@dfModel <- dfModel
} 

## Add: check for essential columns ##


##                                                                           ##
###############################################################################

###############################################################################
## Optional section - if available                                           ##
###############################################################################

###############################################################################
## Add rsem file and check                                                   ##
# if (!is.null(Obio@projectDetailList$countTableFN)){
#     dfCount <- read.delim(
#         Obio@projectDetailList$countTableFN, 
#         header =T, 
#         sep = "\t",
#         stringsAsFactors = F
#     )
# } else {
#     print("Count file not found")
# }


###############################################################################
## Add rsem file if available                                                 ##
if (!is.null(Obio@parameterList$countTableFN)){
    dfRSEM <- read.delim(
        Obio@parameterList$countTableFN, 
        header =T, 
        sep = "\t",
        stringsAsFactors = F
    )
    
    
    names(dfRSEM) <- gsub("^X$", "gene_id", names(dfRSEM))
    names(dfRSEM) <- gsub("^x$", "gene_id", names(dfRSEM))
    names(dfRSEM) <- gsub(paste0("^",Obio@parameterList$primaryAlignmentGeneID, "$"), "gene_id", names(dfRSEM))
    
    row.names(dfRSEM) <- dfRSEM$gene_id
    
    dfRSEM$gene_id <- NULL
    
    selVec <- names(dfRSEM)
    selVec <- selVec[selVec %in% Obio@dfDesign$sample.id]
    dfRSEM <- dfRSEM[,selVec]
    
    Obio@RSEMcountMatrix <- data.matrix(round(dfRSEM))
    
    
    designSampleIDs <- unique(Obio@dfDesign$sample.id)
    dfRsemSampleIDs <- unique(colnames(Obio@RSEMcountMatrix))
    check <- !(designSampleIDs %in% dfRsemSampleIDs)

    if (sum(check) > 0){
        stop("Sample IDs in dfDesign don't match the column names in the count file")
    } else {
        print("RSEM file not (correctly) specified")
    }
}


## Done                                                                      ##
###############################################################################



###############################################################################
## Add tpm file if available                                                 ##
if (!is.null(Obio@projectDetailList$TpmTableFN)){
    dfTPM <- read.delim(
        Obio@projectDetailList$TpmTableFN, 
        header =T, 
        sep = "\t",
        stringsAsFactors = F
    )
    
    names(dfTPM) <- gsub("^X$", "gene_id", names(dfTPM))
    names(dfTPM) <- gsub("^x$", "gene_id", names(dfTPM))
    names(dfTPM) <- gsub(paste0("^",Obio@parameterList$primaryAlignmentGeneID, "$"), "gene_id", names(dfTPM))
    
    selVec <- names(dfTPM)
    selVec <- selVec[selVec != "gene_id"]
    
    ## Remove all samples from dfTPM that are not present in the design file specifications
    selVec <- selVec[selVec %in% dfDesign$sample.id]
    
    dfTPM <- dfTPM[rowSums(dfTPM[,selVec]) != 0,]

    Obio@dfTPM <- dfTPM


    designSampleIDs <- unique(Obio@dfDesign$sample.id)
    dfTPMSampleIDs <- gsub("_TPM", "",unique(names(Obio@dfTPM)))
    check <- !(designSampleIDs %in% dfTPMSampleIDs)

    if (sum(check) > 0){
      stop("Sample IDs in dfDesign don't match the column names in the count file")
    }
    
    

} else {
    print("TPM file not specified")
}


## Done                                                                      ##
###############################################################################

###############################################################################
## Check provided PCA file                                                   ##
if (!is.null(Obio@projectDetailList$PcaFN)){
    if (file.exists(Obio@projectDetailList$PcaFN)){
        dfPCA <- read.delim(
            Obio@projectDetailList$PcaFN, 
            header=T, 
            sep="\t", 
            stringsAsFactors = F
        )
        
        pos <- c(
            grep("^sample.id$", names(dfPCA)),
            grep("^sample_id$", names(dfPCA))
        )
        
        if (length(pos) == 0){
            Obio@projectDetailList$dfPcaFN <- NULL
            print("Provided PCA file not valid. The sample.id column is missing. Will use default calculation.")
        } 
        
        pos <- c(
            grep("^sample.group$", names(dfPCA)),
            grep("^sample_group$", names(dfPCA))
        )
        
        if (length(pos) == 0){
            Obio@projectDetailList$dfPcaFN <- NULL
            print("Provided PCA file not valid. The sample.group column is missing. Will use default calculation.")
        } 
        
        pos <- c(
            grep("^PC1$", names(dfPCA)),
            grep("^PC2$", names(dfPCA))
        )
        
        if (length(pos) != 2){
            Obio@projectDetailList$dfPcaFN <- NULL
            print("Provided PCA file not valid. Check format of PCx columns. It should be PC1, PC2, ... Will use default calculation.")
        } 
        
        if (!is.null(Obio@projectDetailList$dfPcaFN)){
            selVec <- c(
                "sample.id",
                "sample_id",
                "sample.group",
                "sample_group",
                names(dfPCA)[grep("^PC", names(dfPCA))]
            )
            
            selVec <- selVec[selVec %in% names(dfPCA)]
            dfPCA <- dfPCA[,selVec]
            names(dfPCA) <- gsub("\\.", "_", names(dfPCA))
            Obio@dfPCA <- data.frame(NULL)
            Obio@dfPCA <- dfPCA
        }
        
    } # End if file.exists
} # End dfPcaFN not null

## Done                                                                      ##
###############################################################################

###############################################################################
## Add DGE files, if available                                               ##


## Done                                                                      ##
###############################################################################

```


<!--chapter:end:04-A.1.add.data.to.analysis.object.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B3.alignment."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```


# Alignment Summary
For a summary of the alignment parameters, review the QC tab. 

The following tables form the basis for this analysis: 

<div class = "grey">
```{r, echo=F, eval=T, warning=FALSE,comment=NA}
            
            twoString <- paste0(
                "Read count table: \n", Obio@parameterList$countTableFN,
                "\n",
                "TPM table: \n",  Obio@parameterList$TpmTableFN,
                "\n"
            )
            
            cat(twoString)
            
            
```
 </div>


<!--chapter:end:05-B.3.alignment.summary.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "C4.guide.txt."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```


# RNA-Seq Analysis Guide

## TECHNICAL CHECKS

Quality Control (QC)

You may want to start by reviewing the quality of the underlying RNA and RNA-sequencing. This is done in the Quality control (QC) section. Things to look for are the percentage of reads that aligned to intergenic regions (indicating DNA contamination in your RNA) and the sequence duplication rate (which might be a PCR artefact introduced during sample amplification and may affect the complexity of the sequenced library).



```{r, eval=T, results="asis"}
cat(paste0("A summary of this experiment and its results so far is summarized in an editable [report](https://biologic.crick.ac.uk/",Obio@parameterList$project_id,"/report.php). The purpose of this section is to provide a brief summary of the experiment as well as of its results to a person who is interested in your dataset in the distant future. Ideally, this section contains all information necessary to understand the experiment as well as its results so far. You may download this presentation via the link at the bottom of the page, edit it in whatever way you deem suitable and send it back to bioinformatics for updating. You may also want to add a powerpoint presentation outlining the rationale for this experiment as a [slide show](https://biologic.crick.ac.uk/",Obio@parameterList$project_id,"/about.php)."))
```

<!--chapter:end:06-B.4.analysis.guide.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r partC_design_model_init, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B5.design.and.formula.table."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

figCap = paste0(
    "**Table ",
    Obio@parameterList$tableCount,
    ":** Design table for this experiment outlining original file names, sample names and group definitions for differential gene expression analysis."
)

Obio@parameterList$tableCount <- Obio@parameterList$tableCount + 1
```

# Parameter Tables
## Display Design File
```{r designFile, echo=TRUE, eval=TRUE, warning=FALSE, fig.cap=figCap}
dfDesign <- Obio@dfDesign


selVec <- c(
    names(dfDesign)[grep('sampleID', names(dfDesign))],
    names(dfDesign)[grep('original.sample.name', names(dfDesign))],
    names(dfDesign)[grep('sample.id', names(dfDesign))],
    names(dfDesign)[grep('^sample.group$', names(dfDesign))],
    names(dfDesign)[grep('^dataseries$', names(dfDesign))],
    names(dfDesign)[grep('^f_', names(dfDesign))],
    names(dfDesign)[grep('comp_', names(dfDesign))],
    names(dfDesign)[grep('LRT_', names(dfDesign))]
    
)


selVec <- selVec[selVec %in% names(Obio@dfDesign)]    


if (length(selVec) > 1){
    dfDesign <- unique(dfDesign[,selVec])
}
    
colnames <- gsub("_", " ", names(dfDesign))
colnames <- gsub("comp", "DGE", colnames)
colnames <- gsub("^f_", "Factor_", colnames)
colnames <- gsub("[.]", " ", colnames)
colnames <- gsub("original.sample.name", "original", colnames)



DT::datatable(
    dfDesign,
    colnames = colnames,
    rownames = FALSE,
    options = list(
        initComplete = htmlwidgets::JS(
            "function(settings, json) {",
            "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
            "}"
        ) #,
    #order = list(list(3, 'asc'), list(2, 'desc'))
    )
) 

figCap2 = paste0(
    "**Table ",
    Obio@parameterList$tableCount,
    ":** Design table for this experiment outlining original file names, sample names and group definitions for differential gene expression analysis"
)

```


## Display Formula Table
```{r formulaFile, echo=TRUE, eval=TRUE, warning=FALSE, fig.cap=figCap2}
dfModel <- Obio@dfModel
# selVec <- c(
#     names(dfDesign)[grep('sampleID', names(dfDesign))],
#     names(dfDesign)[grep('original.sample.name', names(dfDesign))],
#     names(dfDesign)[grep('sample.id', names(dfDesign))],
#     names(dfDesign)[grep('^f_', names(dfDesign))]
#     names(dfDesign)[grep('comp_', names(dfDesign))],
#     names(dfDesign)[grep('LRT_', names(dfDesign))]
#     
# )
# 
# selVec <- selVec[selVec %in% names(Obio@dfDesign)]
# 
# dfDesign <- unique(dfDesign[,selVec])
# colnames <- gsub("_", " ", names(dfDesign))
# colnames <- gsub("comp", "DGE", colnames)
# colnames <- gsub("[.]", " ", colnames)
# colnames <- gsub("original.sample.name", "original", colnames)


if (nrow(dfModel) > 0){
    DT::datatable(
        dfModel,
        #colnames = colnames,
        rownames = FALSE,
        options = list(
            initComplete = htmlwidgets::JS(
                "function(settings, json) {",
                "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
                "}"
            ),
        order = list(list(3, 'asc'), list(2, 'desc'))
        )
    ) 
}

```


<!--chapter:end:07-B.5.display.design.table.and.formula.table.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set Parameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "edit.RSEM.tpm."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```

# DESeq2 Analysis
## Create DESeq2 object
```{r, echo=TRUE, eval=TRUE, warning=FALSE, results="asis"}
###############################################################################
## Create and attach DDS object                                              ##

if (is.null( Obio@parameterList$parallelProcessing) || length(Obio@parameterList$parallelProcessing) == 0){
     Obio@parameterList$parallelProcessing <- FALSE
}

Obio <- biologicSeqTools2::createDdsObject(Obio)

## Done creating and attaching DDS objecs                                    ##
###############################################################################
```

## Variation and PCA
```{r, echo=TRUE, eval=TRUE, warning=FALSE, results="hide", message=FALSE}
###############################################################################
## Determine variation in the data set                                       ##

## This is a tempory fix until the PCA function has been fully equipped for
## batch correction
saveMode <- Obio@parameterList$batchMode
Obio@parameterList$batchMode <- FALSE

Obio <- biologicSeqTools2::addCoVar(
    obj = Obio,
    avgCountCutOffperSample = 1,
    selectionColName = "aboveCutOff",
    dfBaseData = Obio@DESeqNormReadCountsTable,
    rowNameID = Obio@parameterList$primaryAlignmentGeneID
    #options: "DEseq2RV" or "CoVar"
)

## Results are in slot Obio@dataTableList$dfRowVar ##

## Diagnostic plot ##
# library(ggplot2)
# countCutOff <- 0
# pCoVar <- ggplot(
#     data=Obio@dataTableList$dfRowVar[Obio@dataTableList$dfRowVar$avgCountsPerGenePerSample > countCutOff ,],
#     aes(
#         x=CoVar,
#         y=DEseq2RV
#     )) + geom_point(
#     )  + labs(title = "Variation" ,x = "CoVar", y = "DeSeq2Var"
#     ) +  theme(
#         axis.text.y   = element_text(size=8),
#         axis.text.x   = element_text(size=8),
#         axis.title.y  = element_text(size=8),
#         axis.title.x  = element_text(size=8),
#         axis.line = element_line(colour = "black"),
#         panel.border = element_rect(colour = "black", fill=NA, size=1),
#         plot.title = element_text(hjust = 0.5, size = 12)
#     )

## Done determine variation in the data set                                  ##
###############################################################################

###############################################################################
## Perform PCA, MV-analysis, and Clusterdendrogram                           ##

## Select elements for PCA explicityly ##
dfSel <- Obio@dataTableList$dfRowVar

## Remove low count values ##
dfSel <- dfSel[dfSel$avgCountsPerGenePerSample >= 1, ]

## Order by variation
dfSel <- dfSel[order(dfSel$DEseq2RV, decreasing = TRUE),]
# dfSel <- dfSel[order(dfSel$CoVar, decreasing = TRUE),]

rowSelVec <- as.vector(
    dfSel[1:Obio@parameterList$NtopGenes,Obio@parameterList$primaryAlignmentGeneID]
)

Obio@dataTableList[["Ntop4pcaGeneSelection"]] <- rowSelVec



Obio <- doPCA(
    obj = Obio,
    pcaDimensionsToInvestigate = c(1:5),
    Ntop4pca = Obio@parameterList$NtopGenes, #500,
    avgCountCutOffperSample = 0,
    pcaSelectionVec = rowSelVec
)

Obio@parameterList$batchMode <- saveMode
## Do linear fittings to available dimensions ##


# depdendent Variation mode: Variables can be dependent (individual fits)


if (length(unique(Obio@dfDesign$dataseries)) > 1){
    independentDesignColSector <- c(
        "dataseries"
    )
} else {
    independentDesignColSector <- as.vector(NULL, mode = "character")
}

if (length(Obio@dfDesign$sample.group) > 1){
    independentDesignColSector <- c(
        independentDesignColSector,
        "sample.group"
    )
}

if (length(Obio@dfDesign$replicate) > 1){
    independentDesignColSector <- c(
        independentDesignColSector,
        "replicate"
    )
}

pos <- grep("^f_", names(Obio@dfDesign))
if (length(pos) > 0){
  independentDesignColSector <- c(
    names(Obio@dfDesign)[grep("^f_", names(Obio@dfDesign))]
  )

} else if (length(unique(Obio@dfDesign$dataseries)) > 1){
    independentDesignColSector <- c(
      "dataseries"
    )
}


# indedendentVariation mode: Variables are required to be independent
## Do linear variable fittings to PCA ##
# variables need to be independent > culmulative fit #
Obio <- biologicSeqTools2::doLinearFittings(
    obj = Obio,
    designColSelector = independentDesignColSector,
    mode = "independentVariation", ## "independentVariation" or "dependentVariation"
    Ntop4pca = Obio@parameterList$NtopGenes,
    plotname = "P2_independentVariables"
)



## Do linear variable fittings to PCA ##

# individual fit
LRTvec <- names(Obio@dfDesign)[grep("f_", names(Obio@dfDesign))]
#LRTvec <- LRTvec[LRTvec != "LRT_replicate"]
#LRTvec <- "LRT_timepoint"

dependentDesignColSelector<- c(
    independentDesignColSector,
    LRTvec,
    names(Obio@dfDesign)[grep("comp_", names(Obio@dfDesign))],
    names(Obio@dfDesign)[grep("LRT_", names(Obio@dfDesign))]
)
Obio <- biologicSeqTools2::doLinearFittings(
    obj = Obio,
    designColSelector = dependentDesignColSelector,
    mode = "dependentVariation", ## "independentVariation" or "dependentVariation"
    Ntop4pca = Obio@parameterList$NtopGenes,
    plotname = "P2_dependentVariables"
)


## Create Plot dendrogram ##
# Obio <- createSampleDendrogram(
#     obj = Obio,
#     Ntop4pca = Obio@parameterList$NtopGenes,
#     plotname = "dendrogram10000"
# )

###############################################################################
## Do differential gene expression analysis                                  ##
#Obio@parameterList$batchMode <- F
## LRT tests for multiple sample groups ##

# if (!is.null(Obio@projectDetailList$DEseq2_DGE_result_folder) && Obio@projectDetailList$DEseq2_DGE_result_folder != ""){
#     mode = "load_DGE_from_file"
#     Obio <- loadDESeq2outputFromFile(
#         Obio,
#         replace = TRUE
#     )
# } else {


    
#}


############################################################
## Function load DGE results from file
loadDESeq2outputFromFile <- function(
    Obio,
    DEseq2resultDir = "Obio@parameterList$DEseq2External_DGE",
    replace = FALSE,
    mode = NULL # Can be DGE or LRT
){
    
    if (is.null(mode)){
        if (DEseq2resultDir == "DEseq2External_LRT"){
            mode = "LRT"
        } else {
            mode = "DGE"
        }
    }
  
    allfiles <- paste0(DEseq2resultDir, "/", list.files(DEseq2resultDir))
    #allfiles <- allfiles[grep(".txt", allfiles)]
    allfiles <- gsub("//", "/", allfiles)
    allfiles <- sort(allfiles)
    contrastNames <- gsub(gsub("//", "/", paste0(DEseq2resultDir, "/")), "", allfiles)
    contrastNames <- gsub(".txt", "", contrastNames)





    ###############################################################################
    ## For this project only: Add ENSMUSG column                                 ##
    dfAnno <- Obio@dfGeneAnnotation
    dfAnno <- unique(
      Obio@dfGeneAnnotation[,c(Obio@parameterList$primaryAlignmentGeneID, Obio@parameterList$geneIDcolumn)]
    )
    
    ## Done adding ENSMUSG column                                                ##
    ###############################################################################
    for (i in 1:length(allfiles)){
      colName <- contrastNames[i]
      res <- read.delim(allfiles[i], header = T, sep="\t")
      
      
      ## In case gene_ids were saved in row names
      pos <- grep("gene_id", names(res))
      if (length(pos) == 0){
          res[["gene_id"]] <- row.names(res)  
      } else if (length(pos) == 1){
          row.names(res) <- res$gene_id
      }
      
      ################################
      ## This project only 
      
      
      selVec <- c("gene_id", "baseMean", "log2FoldChange", "lfcSE",  "pvalue", "padj")
      
      if (!sum(selVec %in% names(res)) == length(selVec)){
          stop(paste0("Check DESeq2 input files. Mandantory columns: ", paste0(selVec, collapse = ", ")))
      }
      
      res <- unique(res[,selVec])
      
      res <- res[!(duplicated(res[,"gene_id"])),]
      
      ## Remove all log-fcs with an NA padj
      res <- res[!is.na(res$padj),]
      res <- res[!is.na(res$log2FoldChange),]
      
      
      res[is.na(res)] <- 0
      res <- res[res$baseMean > 0,]
      
      # Plus one to avoid negative log2 baseMeans
      res$baseMean <- log2((res$baseMean + 1))
      ## Done 
      ################################
      
      
      #row.names(res) <- res[,Obio@parameterList$primaryAlignmentGeneID]
      
      names(res) = paste(names(res), colName, sep="_")
      names(res) <- gsub(paste0("gene_id_", colName), "gene_id", names(res))
      names(res) <- gsub("^gene_id$", Obio@parameterList$primaryAlignmentGeneID, names(res))
      #res[[Obio@parameterList$primaryAlignmentGeneID]] = rownames(res)
      
      ## log2 the base mean for lrt applications
      
      
      if (mode == "DGE"){
          names(res) = gsub("log2FoldChange", "logFC", names(res))
          names(res) = gsub(
            "logFC",
            paste("contrast_D", i, "_logFC", sep=""),
            names(res)
          )
          
          names(res) = gsub(
            "padj",
            paste("contrast_D", i, "_padj", sep=""),
            names(res)
          )
          
          names(res) = gsub(
            "stat",
            paste("contrast_D", i, "_stat", sep=""),
            names(res)
          )
          
          names(res) = gsub(
            "baseMean",
            paste("contrast_D", i, "_lg2BaseMean", sep=""),
            names(res)
          )
          
          #Remove all rows without a padj
          padj.col = grep("padj", names(res))[1]
          res[,padj.col][is.na(res[,padj.col])] = ""
          res = res[res[,padj.col] != "", ]
          res[,padj.col] <- as.numeric(res[,padj.col])
          
          ## Add log10p column ##
          padj  <- names(res)[grep("_padj_", names(res))]
          lg10p <- gsub("padj", "lg10p", padj)
          
          for (z in 1:length(padj)){
            preprocess <- as.numeric(res[,padj[z]])
            minNum <- min(preprocess[preprocess != 0])
            preprocess[preprocess == 0] <- minNum
            
            # if (length(grep("padj_LRT", padj[i])) > 0){
            #     preprocess <- as.numeric(res[,padj[z]])
            #     minNum <- min(preprocess[preprocess != 0])
            #     preprocess[preprocess == 0] <- minNum
            # } else {
            #     preprocess <- as.numeric(res[,padj[z]])
            # }
            
            temp <- -1*log10(preprocess)
            #temp[temp >= 50] = 50
            res[,lg10p[z]] <- temp
          }
          
          col.vector = c(
            Obio@parameterList$primaryAlignmentGeneID,
            names(res)[grep("contrast", names(res))]
          )
          
          res = res[,col.vector]
          
          ## Make all numeric columns numeric ##
          res[,grep("contrast_", names(res))] <- apply(res[,grep("contrast_", names(res))], 2, as.numeric)
      }
      
      if (mode == "LRT"){
               #res[[Obio@parameterList$primaryAlignmentGeneID]] = rownames(res)

                res$stat <- NULL

                
                names(res) = gsub(
                    "baseMean",
                    paste0("contrast_L_lg2BaseMean_"),
                    names(res)
                )

                names(res) = gsub(
                    "padj",
                    paste0("contrast_L_padj_"),
                    names(res)
                )



                #Remove all rows without a padj
                padj.col = grep("padj", names(res))[1]
                res[,padj.col][is.na(res[,padj.col])] = ""
                res = res[res[,padj.col] != "", ]
                res[,padj.col] <- as.numeric(res[,padj.col])

                ## Add log10p column ##
                padj  <- names(res)[grep("_padj_", names(res))]
                lg10p <- gsub("padj", "lg10p", padj)

                for (z in 1:length(padj)){
                    preprocess <- as.numeric(res[,padj[z]])
                    minNum <- min(preprocess[preprocess != 0])
                    preprocess[preprocess == 0] <- minNum

                    # if (length(grep("padj_LRT", padj[i])) > 0){
                    #     preprocess <- as.numeric(res[,padj[z]])
                    #     minNum <- min(preprocess[preprocess != 0])
                    #     preprocess[preprocess == 0] <- minNum
                    # } else {
                    #     preprocess <- as.numeric(res[,padj[z]])
                    # }

                    temp <- -1*log10(preprocess)
                    #temp[temp >= 50] = 50
                    res[,lg10p[z]] <- temp
                }

                col.vector = c(
                    Obio@parameterList$primaryAlignmentGeneID,
                    names(res)[grep("contrast", names(res))]
                )

                res = res[,col.vector]

                ## Make all numeric columns numierc ##
                ## Make all numeric columns numierc ##
                res[,grep("contrast_", names(res))] <- apply(res[,grep("contrast_", names(res))], 2, as.numeric)
      } # end LRT mode
      
      if (i == 1){
        dfContrastTable <- res
      } else {
        dfContrastTable <- merge(
          dfContrastTable,
          res,
          by.x = Obio@parameterList$primaryAlignmentGeneID,
          by.y = Obio@parameterList$primaryAlignmentGeneID,
          all = TRUE
        )
        dfContrastTable[is.na(dfContrastTable)] <- 0
      }
    }
    
    
    # head(dfContrastTable)
    
    dfContrastTable<- dfContrastTable[rowSums(dfContrastTable[,2:ncol(dfContrastTable)]) != 0, ]
    names(dfContrastTable) <- gsub("__", "_", names(dfContrastTable))
    
    if (mode == "LRT"){
        if (replace){
            Obio@DEseq2LRTtable <- data.frame(NULL)
            Obio@DEseq2LRTtable <- dfContrastTable
        } else if (nrow(Obio@DEseq2LRTtable) > 0){
            Obio@DEseq2LRTtable <- merge(
                Obio@DEseq2LRTtable,
                dfContrastTable,
                by.x = Obio@parameterList$primaryAlignmentGeneID,
                by.y = Obio@parameterList$primaryAlignmentGeneID,
                all = TRUE
            )
            Obio@DEseq2LRTtable[is.na(Obio@DEseq2LRTtable)] <- 0 
        } else {
            Obio@DEseq2LRTtable <- dfContrastTable
        }
    }
    
    if (mode == "DGE"){
        if (replace){
            Obio@DEseq2contrastTable <- data.frame(NULL)
            Obio@DEseq2contrastTable <- dfContrastTable
        } else if (nrow(Obio@DEseq2contrastTable) > 0){
            Obio@DEseq2contrastTable <- merge(
                Obio@DEseq2contrastTable,
                dfContrastTable,
                by.x = Obio@parameterList$primaryAlignmentGeneID,
                by.y = Obio@parameterList$primaryAlignmentGeneID,
                all = TRUE
            )
            Obio@DEseq2contrastTable[is.na(Obio@DEseq2contrastTable)] <- 0 
        } else {
            Obio@DEseq2contrastTable <- dfContrastTable
        }
    }
    
    
    
    
    if (mode == "LRT"){
      print("DESeq2 results loaded into Obio@DEseq2LRTtable")
    } else {
      print("DESeq2 results loaded into Obio@DEseq2contrastTable")
    }
    
    return(Obio)
}

## Done with function                                                        ##
###############################################################################


    
###############################################################################
## Add or calculate LRT results                                              ##
if (!is.null(Obio@parameterList$calculate_DGE) && is.logical(Obio@parameterList$calculate_DGE)) {
    calculate_LRT <- Obio@parameterList$calculate_LRT
} else {
    calculate_LRT <- TRUE 
}




pos <- grep("LRT_", names(Obio@dfDesign))
if (length(pos) == 0){
    calculate_LRT <- FALSE
}

if (calculate_LRT){
  dfDGE <- Obio@dfModel
    dfDGE <- dfDGE[dfDGE$test == "LRT",]
  
    if (nrow(dfDGE) > 0){
        Obio <- biologicSeqTools2::LRTanalysis(
            obj = Obio,
            createNewResultTable = TRUE
        )
    }
} 

## Add additional, external LRT files, if available
lrtFilesToAdd <- NULL
if (!is.null(Obio@parameterList$DEseq2External_LRT)){
    lrtFilesToAdd <- list.files(Obio@parameterList$DEseq2External_LRT)
}    
    
if (length(lrtFilesToAdd) > 0){
    Obio <- loadDESeq2outputFromFile(
        Obio,
        replace = TRUE,
        mode = "LRT",
        DEseq2resultDir = Obio@parameterList$DEseq2External_LRT
    )
} 


## Done adding and/or calculating LRT results                                 ##
################################################################################
  

################################################################################
## Add calculate DGE results                                                  ##

if (!is.null(Obio@parameterList$calculate_DGE) && is.logical(Obio@parameterList$calculate_DGE)) {
    calculate_DGE <- Obio@parameterList$calculate_DGE
} else {
    calculate_DGE <- TRUE  
}


pos <- grep("comp_", names(Obio@dfDesign))
if (length(pos) == 0){
    calculate_DGE <- FALSE
}

if (calculate_DGE){
  ## Pairwise differential gene expression ##
    ## If working on projects prior to fall 2018, make sure
    ## Obio@parameterList$DEseq2betaPrior is set to true.
    dfDGE <- Obio@dfModel
    dfDGE <- dfDGE[dfDGE$test == "Wald",]

    if (nrow(dfDGE) > 0){
        Obio <- biologicSeqTools2::DGEanalysis(
            obj = Obio,
            createNewResultTable = TRUE
        )
    }
  
}    

## If mode is not calculate DGE, a dge table needs to be provided
dgeFilesToAdd <- NULL
if (!is.null(Obio@parameterList$DEseq2External_DGE)){
    dgeFilesToAdd <- list.files(Obio@parameterList$DEseq2External_DGE)
}    
    
if (length(dgeFilesToAdd) > 0){
    Obio <- loadDESeq2outputFromFile(
        Obio,
        replace = FALSE,
        mode = "DGE",
        DEseq2resultDir = Obio@parameterList$DEseq2External_DGE
    )
}     

## Done adding and/or calculating LRT results                                 ##
################################################################################



## Done differential gene expresison analysis                                ##
###############################################################################


```



<!--chapter:end:08-B.6.DEseq2.PCA.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set Parameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}
chnkPrefix <- "edit.RSEM.tpm."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")


figureCount <- Obio@parameterList[["figureCount"]]
db.pwd <- Obio@dbDetailList[["db.pwd"]]
```



# DEseq2 Differential Gene Expression Analysis
```{r, echo=TRUE, eval=TRUE, warning=FALSE, results="hide", message=FALSE}

###############################################################################
## Create dfSummary                                                          ##



dfDGE <- Obio@DEseq2contrastTable
## Temporary Fix ##
## Remove empty pase means
rmVec <- grep("lg2BaseMean$", names(dfDGE))
if (length(rmVec) > 0){
    dfDGE <- dfDGE[,-rmVec]
}
## lg2 base mean ##
lg2Vec <- grep("lg2BaseMean", names(dfDGE))
if (length(lg2Vec ) > 0){
    for (i in 1:length(lg2Vec ))
    dfDGE[,lg2Vec[i]] <- log2(dfDGE[,lg2Vec[i]])
}

dfLRT <- Obio@DEseq2LRTtable

dfPCA <- Obio@dfPCAgenes


df.summary <- dfDGE

###############################################################################
## Calculate correlations                                                    ##
## Adding annotation ##
dfAnno <- unique(Obio@dfGeneAnnotation[,c(Obio@parameterList$primaryAlignmentGeneID, Obio@parameterList$geneIDcolumn)])
dfAnno <- dfAnno[dfAnno[,Obio@parameterList$primaryAlignmentGeneID] %in% df.summary[,Obio@parameterList$primaryAlignmentGeneID],]


pos <- grep("corGeneVec", names(Obio@parameterList))

if (length(pos) == 0){
    Obio@parameterList[["corGeneVec"]] <- NULL
}

if (!is.null(Obio@parameterList$corGeneVec)){
    hVec <- Obio@parameterList$corGeneVec
    dfAnnoCor <- dfAnno[dfAnno[,Obio@parameterList$geneIDcolumn] %in% hVec, ]

    Obio@parameterList$corGeneVec <- as.vector(dfAnnoCor[,Obio@parameterList$geneIDcolumn])
}

if (exists("dfAnnoCor")){
    if (nrow(dfAnnoCor) > 0){
        dfTPM <- Obio@dfTPM
        names(dfTPM) <- gsub("^X$", Obio@parameterList$primaryAlignmentGeneID, names(dfTPM))
        names(dfTPM) <- gsub("^gene_id$", Obio@parameterList$primaryAlignmentGeneID, names(dfTPM))

        names(dfTPM) <- paste0("norm_counts_", names(dfTPM ))
        names(dfTPM) <- gsub(
        paste0(
          "norm_counts_", Obio@parameterList$primaryAlignmentGeneID),
          Obio@parameterList$primaryAlignmentGeneID,
          names(dfTPM)
        )
        
        row.names(dfTPM) <- dfTPM[,Obio@parameterList$primaryAlignmentGeneID]
        dfTPM[,Obio@parameterList$primaryAlignmentGeneID] <- NULL
        for (k in 1:nrow(dfAnnoCor)){
            ###############################################################################
            ## do correlation analysis                                                   ##
    
            pValueCor = rep(1, nrow(dfTPM))
            corCoef = rep(0, nrow(dfTPM))
            cor.method = "pearson"
    
            geneSel <- as.vector(dfAnnoCor[k, Obio@parameterList$primaryAlignmentGeneID])
            pattern <- as.numeric(dfTPM[geneSel, ])
    
            #Find best correlation with kinase expression
            print("Starting to calculate correlations...")
            for (i in 1:nrow(dfTPM)){
                samplePattern <- as.numeric(t(dfTPM[i,]))
    
                if (sum(samplePattern) != 0){
                    cor.test.result = cor.test(samplePattern, pattern, method=cor.method)
                    pValueCor[i] = cor.test.result$p.value
                    corCoef[i] = cor.test.result$estimate
                }
                if (i%%1000 == 0){
                    print(i)
                }
            }
            print("...done.")
    
            dfTPM[["pValueCor"]] <- pValueCor
            dfTPM[["corCoef"]] <- corCoef
    
            dfTPM <- dfTPM[order(dfTPM$corCoef, decreasing = TRUE),]
            dfTempRes <- dfTPM
            dfTempRes[[Obio@parameterList$primaryAlignmentGeneID]] <- row.names(dfTempRes)
            dfTempRes <- dfTempRes[,c("corCoef", Obio@parameterList$primaryAlignmentGeneID)]
            names(dfTempRes) <- gsub("corCoef", paste0("corCoef_", as.vector(dfAnnoCor[k, Obio@parameterList$geneIDcolumn])), names(dfTempRes))
    
            if (k==1){
                dfTRes <- dfTempRes
            } else {
                dfTRes <- merge(
                    dfTRes,
                    dfTempRes,
                    by.x = Obio@parameterList$primaryAlignmentGeneID,
                    by.y = Obio@parameterList$primaryAlignmentGeneID,
                    all =TRUE
                )
                dfTRes[is.na(dfTRes)] <- 0
            }
    
    
            ## Done correlation analysis                                                 ##
            ###############################################################################
        }
    
    
        Obio@dataTableList[["geneCorTables"]] <- dfTRes
    }
}

## Done calculate correlations                                               ##
###############################################################################




###############################################################################
## Adding annotation to df.summary                                           ##
dfNormCounts <- Obio@DESeqNormReadCountsTable
names(dfNormCounts) <- paste0("DEseq2NormalizedReadCounts_", names(dfNormCounts))
dfNormCounts[[Obio@parameterList$primaryAlignmentGeneID]] <- row.names(dfNormCounts)

dfTPM <- Obio@dfTPM

## In case other names are used as col names
names(dfTPM) <- gsub("^X$", Obio@parameterList$primaryAlignmentGeneID, names(dfTPM))
names(dfTPM) <- gsub("^gene_id$", Obio@parameterList$primaryAlignmentGeneID, names(dfTPM))

names(dfTPM) <- paste0("norm_counts_", names(dfTPM ))
names(dfTPM) <- gsub(
    paste0("norm_counts_", Obio@parameterList$primaryAlignmentGeneID),
    Obio@parameterList$primaryAlignmentGeneID,
    names(dfTPM)
)

## Done adding annotation                                                    ##
###############################################################################

if (nrow(dfLRT) > 0){
  df.summary <- merge(
      df.summary,
      dfLRT,
      by.x = Obio@parameterList$primaryAlignmentGeneID,
      by.y = Obio@parameterList$primaryAlignmentGeneID,
      all = TRUE
  )
  df.summary[is.na(df.summary)] <- 0
}

df.summary <- merge(
    df.summary,
    dfTPM,
    by.x = Obio@parameterList$primaryAlignmentGeneID,
    by.y = Obio@parameterList$primaryAlignmentGeneID,
    all = TRUE
)
df.summary[is.na(df.summary)] <- 0


df.summary <- merge(
    df.summary,
    dfNormCounts,
    by.x = Obio@parameterList$primaryAlignmentGeneID,
    by.y = Obio@parameterList$primaryAlignmentGeneID,
    all = TRUE
)
df.summary[is.na(df.summary)] <- 0

df.summary <- merge(
    df.summary,
    dfPCA,
    by.x = Obio@parameterList$primaryAlignmentGeneID,
    by.y = Obio@parameterList$primaryAlignmentGeneID,
    all = TRUE
)
df.summary[is.na(df.summary)] <- 0

###############################################################################
## Add correlation bits, if they exist                                       ##

## Check gene level correlations ##
if (length(grep("geneCorTables", names(Obio@dataTableList))) > 0){
    dfAdd <- Obio@dataTableList$geneCorTables
    names(dfAdd)[grep("corCoef_", names(dfAdd))] <- paste0("add_venn_X_", names(dfAdd)[grep("corCoef_", names(dfAdd))])

    df.summary <- merge(
      df.summary,
      dfAdd,
      by.x = Obio@parameterList$primaryAlignmentGeneID,
      by.y = Obio@parameterList$primaryAlignmentGeneID,
      all = TRUE
    )
    df.summary[is.na(df.summary)] <- 0
}

## Check ts correlations.
if (length(grep("tsCorTables", names(Obio@dataTableList))) > 0){
    dfAdd <- Obio@dataTableList$tsCorTables

    df.summary <- merge(
      df.summary,
      dfAdd,
      by.x = Obio@parameterList$primaryAlignmentGeneID,
      by.y = Obio@parameterList$primaryAlignmentGeneID,
      all = TRUE
    )
    df.summary[is.na(df.summary)] <- 0
}

## Done with correlations                                                    ##
###############################################################################



## Adding annotation ##
dfAnno <- Obio@dfGeneAnnotation
dfAnno <- dfAnno[dfAnno[,Obio@parameterList$primaryAlignmentGeneID] %in% df.summary[,Obio@parameterList$primaryAlignmentGeneID],]

df.summary <- merge(
    df.summary,
    dfAnno,
    by.x = Obio@parameterList$primaryAlignmentGeneID,
    by.y = Obio@parameterList$primaryAlignmentGeneID,
    all = TRUE
)
df.summary[is.na(df.summary)] <- 0

df.summary[df.summary[,Obio@parameterList$geneIDcolumn] == 0, Obio@parameterList$geneIDcolumn] <- df.summary[df.summary[,Obio@parameterList$geneIDcolumn] == 0, Obio@parameterList$primaryAlignmentGeneID]

## Done creating dfSummary                                                   ##
###############################################################################

###############################################################################
## Add Variation measures                                                    ##

if (!is.null(Obio@dataTableList$dfRowVar)){
    dfVarMeasures <- Obio@dataTableList$dfRowVar

    df.summary <- merge(
        df.summary,
        dfVarMeasures,
        by.x = Obio@parameterList$primaryAlignmentGeneID,
        by.y = Obio@parameterList$primaryAlignmentGeneID,
        all = TRUE
    )
    df.summary[is.na(df.summary)] <- 0

}


## Done with variations                                                      ##
###############################################################################


###############################################################################
# Upload to website                                                           #
###############################################################################
#library(SBwebtools)


###############################################################################
# Prepare database table                                                      #
###############################################################################

###############################################################################
## Default Heatmap option A Ntop most variable genes                         ##

###############################################################################
## Option A Select most variable genes                                       ##

df.summary[["logFC_cut_off"]] <- 0

# rowSelVec <- as.vector(
#     dfSel[1:Obio@parameterList$NtopGenes,Obio@parameterList$primaryAlignmentGeneID]
# )
df.summary[df.summary[, Obio@parameterList$primaryAlignmentGeneID] %in% rowSelVec, "logFC_cut_off"] <- 1


## Select for heatmap ##
# df.summary <- selectHeatmapGenes(
#     dfData = df.summary,
#     cutOff = 1.3,
#     zeroOneCol = "logFC_cut_off",
#     selCol = "contrast_1_lg10p",
#     geneID = Obio@parameterList$geneIDcolumn
# )

## Select for heatmap all genes with a TPM row sum of 2 or higher ##
# df.summary[["logFC_cut_off"]] <- 0
# df.summary[,"logFC_cut_off"] <- rowSums(df.summary[,grep("norm_counts_", names(df.summary))])
# nSamples <- length(unique(dfDesign$sample.id))
# df.summary[,"logFC_cut_off"] <- ifelse(df.summary$logFC_cut_off >= 5*nSamples, 1, 0)

## Select for heatmap: abs change of at least 0.5 in any contrast ##

###############################################################################
## Create main database table                                                ##

Obio@databaseTable <- biologicSeqTools2::datatable.to.website.ptm(
    df.data = df.summary,
    gene.id.column = Obio@parameterList$primaryAlignmentGeneID,
    heatmap.genes = "",
    n.cluster.genes = 2000,
    count.data = TRUE,
    logFC.cut.off = 1,
    #use.logFC.columns.for.heatmap = FALSE,
    selector4heatmap.cols = "norm_counts",
    heatmap.preprocessing = "lg2.row.avg", # possible: "lg2", "lg2.row.avg", "none"
    hm.cut.off = 4,
    n.hm.cluster = 10,
    count.cut.off.filter = 0
)


## Done creating main database table                                         ##
###############################################################################


###############################################################################
## Create Excel output files                                                 ##

addedOutputCols <- names(Obio@databaseTable)[grep("corCoef", names(Obio@databaseTable))]
if (Obio@parameterList$geneIDcolumn != "hgnc_symbol"){
    addedOutputCols <- c(
        addedOutputCols,
        "hgnc_symbol"
    )
}

createAndFormatExcelOutputFiles(
    obj = Obio,
    metaCoreCountFilter = 1,
    customOutputCols = NULL,
    addedOutputCols = addedOutputCols
)

## Done creating Excel output files                                          ##
###############################################################################

###############################################################################
## Add Covar figure                                                          ##

# figureCol is DEseq2RV or CoVar
figureCol <- "DEseq2RV"



dfDat <- unique(
    Obio@databaseTable[,c(Obio@parameterList$geneIDcolumn, "DEseq2RV", "CoVar")]
)
dfDat[["Var"]] <- dfDat[,figureCol]
dfDat <- dfDat[order(dfDat$Var, decreasing = TRUE),]

dfDat <- dfDat[dfDat$Var > 0, ]
dfDat[["CoVarOrder"]] <- 1:nrow(dfDat)

# Obio@plotCollection[["CoVar"]] <- ggplot(
#     data=dfDat,
#     aes(x=CoVarOrder, y=Var)
# ) + geom_line( ) + geom_vline(xintercept = Obio@parameterList$NtopGene, col="red"
# ) +  theme(
#     axis.text.y   = element_text(size=8),
#     axis.text.x   = element_text(size=8),
#     axis.title.y  = element_text(size=8),
#     axis.title.x  = element_text(size=8),
#     axis.line = element_line(colour = "black"),
#     panel.border = element_rect(colour = "black", fill=NA, size=1),
#     plot.title = element_text(hjust = 0.5, size = 12)
# ) + labs(title = paste0("Variation Seen Across all Genes")
# )

## Done adding Covar figure                                                  ##
###############################################################################

###############################################################################
## Add additional plot columns from database                                 ##

## Done adding additional plot columns                                       ##
###############################################################################



###############################################################################
# Do GSEA                                                                     #
###############################################################################

database.table2 <- Obio@databaseTable
rmVec <- c(
     #grep("contrast_2", names(database.table2))
     grep("contrast_P", names(database.table2)),
     grep("contrast_L", names(database.table2)),
     grep("LRT_", names(database.table2)),
     grep("PCA_", names(database.table2)),
     grep("norm_counts_", names(database.table2)),
     grep("intercept_", names(database.table2)),
     grep("r2_P", names(database.table2)),
     grep("DEseq2NormalizedReadCounts", names(database.table2)),
     grep("p_value_P", names(database.table2)),
     grep("lg2_avg_", names(database.table2))
)

if (length(rmVec) > 0){
     database.table2 <- database.table2[,-rmVec]
}
# #
# ## Remove unnecessary columns, if needed ##
# #
# ## Create GSEA rank files ##
biologicSeqTools2::create.gsea.rnk.files(
     Obio@parameterList$localWorkDir,
     df.dataTable = database.table2,
     GSEA.colum.type = "_logFC_",
     gene.symbol.column.name = "hgnc_symbol"
 )
# #
# # ## Remove last character from file ##
# # #truncate -s -2 file
# # #sed '$d' file # remove last line
# #
# # ## Remove last character from file ##
# # #truncate -s -2 file
# # #sed '$d' file # remove last line
# #
# ## Function to create gmt file ##

if (!is.null(Obio@parameterList$GSEAtables)){
  tables <- Obio@parameterList$GSEAtables
} else {
  tables <- c(
    "mysigdb_h_hallmarks",
    "mysigdb_c5_BP" #,
    #Obio@parameterList$lab.categories.table
  )
}


# #
dfRefGmt <- create.gmt.file.from.ref.data.table(
     host = Obio@dbDetailList$host,
     dbname = "reference_categories_db_new",
     dataTable = tables,
     pwd = db.pwd,
     user=Obio@dbDetailList$db.user,
     gene.id.column = "hgnc_symbol"
 )


###############################################################################
## If dfRefGmt is very large, reduce to most variable genes                  ##
## Define relevant genes for selection ##
relevant.genes <- as.vector(
  unique(
    Obio@databaseTable[Obio@databaseTable$cluster_order, "hgnc_symbol"]
  )
)

lr <- length(relevant.genes)

if (nrow(dfRefGmt) > 10000 & lr > 100){
  TF <- apply(dfRefGmt[,3:ncol(dfRefGmt)], 1, function(x) sum(as.vector(x) %in% relevant.genes) )
  selector <- 0
  selVec <- TF >= selector
  
  while(sum(selVec) > 10000){
    
    selVec <- TF > selector
    
    selector <- selector + 1
    
    
    if (selector > 199){
      stop()
    }
  }
  
  dfRefGmt <- dfRefGmt[selVec, ]
  print(paste0(selector, " gene cut-off set for dfRefGmt. ", sum(selVec), " categories used for GSEA per sample."))
  
  
}



## Done                                                                      ##
###############################################################################

# #
# # ###############################################################################
# # ## Save gmt file                                                             ##
# # #"/camp/stp/babs/working/boeings/Projects/reference_data/GSEA.gmt.files/20160508.rna.seq.txn.analysis.gmt"
# #
localGmtDir <- paste0(
    Obio@parameterList$localWorkDir,
    "GSEA/"
)

if (!exists(localGmtDir)){
  dir.create(localGmtDir)
}

#
gmtDir<- paste0(
    Obio@parameterList$workdir,
    "GSEA/"
)

gmtFileName <- paste0(
    Obio@parameterList$project_id,
    ".",
    "projectGmtFile.gmt"
)

dfRefGmt <- dfRefGmt[!(duplicated(dfRefGmt[,1])),]

write.table(
    dfRefGmt,
    paste0(localGmtDir, gmtFileName),
    col.names = FALSE,
    row.names = FALSE,
    sep="\t",
    quote = F
)
# #
contrasts <- names(database.table2)[grep("logFC",names(database.table2))]
contrasts <- contrasts[contrasts != "logFC_cut_off"]
contrasts

GSEAfn <- paste0(
    Obio@parameterList$localWorkDir,
    "/GSEA/GSEAcommands.sh"
)
sink(GSEAfn)

cat("module load Java/1.8.0_131");cat("\n");cat("\n")
for (i in 1:length(contrasts)){
    gmtFile <- paste0(gmtDir, gmtFileName)
    contrastNo <- unlist(strsplit(contrasts[i], "_"))[2]
    nTopPlots <- 50
    GSEAdir <- paste0(Obio@parameterList$workdir, "GSEA")
    rnkFile <- paste0(GSEAdir, "/",contrasts[i],".rnk")

    gseaCMD <- paste0(
        "sbatch --time=03:00:00 --wrap '",
        "module load Java/1.8.0_131;",
        "java -Xmx2512m -cp /camp/stp/babs/working/boeings/Projects/software/gsea-3.0.jar xtools.gsea.GseaPreranked -gmx ",
        gmtFile,
        " -rnk ",
        rnkFile,
        " -rpt_label ",
        "contrast_",
        contrastNo,
        "_rnaSeqTxnTest",
        " -out ",
        GSEAdir,
        " -collapse false -mode Max_probe -norm meandiv -nperm 1000 -scoring_scheme classic -include_only_symbols true -make_sets true -plot_top_x ",
        nTopPlots,
        " -rnd_seed timestamp -set_max 2500 -set_min 10 -zip_report false -gui false",
        "' --job-name='GSEA_",contrastNo,"' --mem=50G -o GSEA_",contrastNo,".slurm >> commands.txt"
    )
    cat(gseaCMD);cat("\n");cat("\n");


}
sink()
#
```


<!--chapter:end:09-B.7.DEseq2.LRT.DGE.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B8."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```

```{r, echo=F, eval=TRUE, warning=FALSE, results=F}
dfMainData <- Obio@databaseTable
geneIDcolumn <- Obio@parameterList$geneIDcolumn
mostVarIDs <- Obio@dataTableList[["Ntop4pcaGeneSelection"]]
alignmentGeneID <- Obio@parameterList$primaryAlignmentGeneID

```


```{r, echo=T, eval=TRUE, warning=FALSE, results=F}
chnkVec <- as.vector(NULL, mode = "character")
plotList <- list()


###############################################################################
## Create Clusterdendrogram                                                  ##
tag <- paste0("Clusterdendrogram")

colSelVec <- c(
    alignmentGeneID,
    names(dfMainData)[grep("norm_counts", names(dfMainData))]
)

geneSelVec <- Obio@dataTableList[["Ntop4pcaGeneSelection"]]
geneSelVec <- geneSelVec[geneSelVec != duplicated(geneSelVec)]

dfData <- unique(dfMainData[, colSelVec])
dfData <- dfData[dfData[,alignmentGeneID] %in% geneSelVec, ]

row.names(dfData) <- dfData[,alignmentGeneID]
dfData[,alignmentGeneID] <- NULL
names(dfData) <- gsub("norm_counts_", "", names(dfData))
names(dfData) <- gsub("_TPM", "", names(dfData))





c <- cor(as.matrix(dfData), method="pearson")
d <- as.dist(1-c)
hr <- hclust(d, method = "ward.D", members=NULL)

plotList[[tag]] <- ggdendro::ggdendrogram(
    hr, 
    rotate = TRUE, 
    size = 4, 
    theme_dendro = FALSE, 
    color = "tomato"
    ) + ggplot2::theme_bw(
    ) +  ggplot2::theme(
        axis.text.y   = ggplot2::element_text(size=8),
        axis.text.x   = ggplot2::element_text(size=8),
        axis.title.y  = ggplot2::element_text(size=8),
        axis.title.x  = ggplot2::element_text(size=8),
        axis.line = ggplot2::element_line(colour = "black"),
        panel.border = ggplot2::element_rect(colour = "black", fill=NA, size=1),
        plot.title = ggplot2::element_text(hjust = 0.5, size = 12)
    )

FNbase <- paste0(tag, VersionPdfExt)
FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
FNrel <- paste0("report_figures/", FNbase)
    
pdf(FN)
    print(plotList[[tag]])
dev.off()
##                                                                       ##
###########################################################################
    
figCap <- paste0(
    '**Figure ',
    figureCount,
    'Sample Dendrogram:**  Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>.'
    
)
 
figureCount <- figureCount + 1
    
NewChnk <- paste0(
    paste0(
        "### Cluster Dendrogram \n"
    ),
    "\n```{r SampleDendrogram, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
        "\n",
        "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
)

chnkVec <- c(
    chnkVec,
    NewChnk
)



## Done creating clusterdendrogram                                           ##
###############################################################################


###########################################################################
## Add Coefficient of variation plot                                     ##

if (length(grep("CoVar", names(dfMainData))) > 0){
    tag <- "CoVar_Plot"
    
    figureCol = "DEseq2RV"
    dfDat <- unique(
        dfMainData[,c( geneIDcolumn, "DEseq2RV", "CoVar")]
    )
    dfDat[["Var"]] <- dfDat[,figureCol]
    dfDat <- dfDat[order(dfDat$Var, decreasing = TRUE),]

    dfDat <- dfDat[dfDat$Var > 0, ]
    dfDat[["CoVarOrder"]] <- 1:nrow(dfDat)
    
    

    if (!exists("NtopGene")){
         NtopGene <- length(mostVarIDs)
    }

    plotList[[tag]] <- ggplot2::ggplot(
    data=dfDat,
    ggplot2::aes(x=CoVarOrder, y=Var)
) + ggplot2::geom_line( ) + ggplot2::geom_vline(xintercept = NtopGene, col="red"
) +  ggplot2::theme_bw() + ggplot2::theme(
    axis.text.y   = ggplot2::element_text(size=8),
    axis.text.x   = ggplot2::element_text(size=8),
    axis.title.y  = ggplot2::element_text(size=8),
    axis.title.x  = ggplot2::element_text(size=8),
    axis.line = ggplot2::element_line(colour = "black"),
    panel.border = ggplot2::element_rect(colour = "black", fill=NA, size=1),
    plot.title = ggplot2::element_text(hjust = 0.5, size = 12)
) + ggplot2::labs(title = paste0("Variation Seen Across all Genes")
)

    ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0("CoVar", VersionPdfExt)
    FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)

    pdf(FN)
        print(plotList[[tag]])
    dev.off()
    ##                                                                       ##
    ###########################################################################

    link <- paste0(
              'An interactive version of this figure can be found ',
              '<a href="https://', urlString,'/',Obio@projectDetailList$project_id,'/scatterplot?x_axis=CoVarOrder&y_axis=CoVar&headline=2D+Scatterplot" target="_blank">here</a>', '. ')  
    
    figLegend <- paste0(
        '**Figure ', 
        figureCount, 
        ':** ',
        ' Coefficient of variation per gene. The red line indicates the cut-off for the most variable genes in this experiment. The most variable genes are the basis for the PCA analysis and heatmap displays. Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. ',
     link
)
    
    

    figureCount <- figureCount + 1

    NewChnk <- paste0(
        paste0("### Coefficient of Variation \n"),
            "\n```{r CoVarPlot, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figLegend,"'}\n",
            "\n",
            "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )


}

## Done adding coefficient of variation                                  ##
###########################################################################
if (length(plotList) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}
```

# Sample Characterization {`r tabVar`}
```{r, echo=FALSE, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knitr::knit(text = chnkVec, quiet = T), collapse = '\n'))
```

<!--chapter:end:10-B.8.sample.characterization.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B.9.pca."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

library(gplots)
library(RColorBrewer)
library(lattice)
library(genefilter)
library(tidyr)
library(ggplot2)
```

```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}

dfMainData <- Obio@databaseTable
geneIDcolumn <- Obio@parameterList$geneIDcolumn

if (geneIDcolumn != "hgnc_symbol" | geneIDcolumn != "mgi_symbol"){
    geneSelCol <- "hgnc_symbol"
} else {
    geneSelCol <- geneIDColumn
}

Ntop4pcaGeneSelection <- Obio@dataTableList$Ntop4pcaGeneSelection
HmDisplayCatsFromDb <- Obio@parameterList$HmDisplayCatsFromDb
project_id <- Obio@parameterList$project_id
alignmentGeneID <- Obio@parameterList$primaryAlignmentGeneID
lab.categories.table <- Obio@parameterList$lab.categories.table
ref.cat.db.table = lab.categories.table
reportFigDir <- Obio@parameterList$reportFigDir

labname <- Obio@parameterList$labname
dfDesign <- Obio@dfDesign
dfPCA <- Obio@dfPCA

## Use provided PCA file if available ##
if (!is.null(Obio@projectDetailList$PcaFN)){
    dfPCA <- read.delim(
        Obio@projectDetailList$PcaFN,
        header = T, 
        sep="\t",
        stringsAsFactors = F
    )
    
    names(dfPCA) <- gsub("\\.", "_", names(dfPCA))
    
    Obio@dfPCA <- data.frame(NULL)
    Obio@dfPCA <- dfPCA
}


dds <- Obio@ObjDds
```



```{r, echo=TRUE, eval=TRUE, warning=FALSE, results="hide"}
###############################################################################
## Add PCA plot                                                              ##
if (!exists("project_id")){
    project_id <- gsub("_designTable", "", designTB)
}


if (!exists("VersionPdfExt")){
    VersionPdfExt <- paste0(".V", gsub("-", "", Sys.Date()), ".pdf")
}

if (!exists("labname")){
    labname <- "TBD"
}

if (!exists("reportFigDir") || is.null(reportFigDir)){
    reportFigDir <- ""
}

chnkVec <- as.vector(NULL, mode = "character")
plotList <- list()
tag <- "PCAvariationPerDimension"


if (exists("Obio")){
    pos <- grep("PCApercentVar", slotNames(Obio))
    if (!is.null(Obio@PCApercentVar)){
        PCApercentVar <- Obio@PCApercentVar
    }
} else {
    PCApercentVar <- NULL
}


## Use custom PCA colors if specified ##

## Just in case we still have dots instead of underscores
names(dfPCA) <- gsub("\\.", "_", names(dfPCA))
pcaSampleGroups <- unique(sort(dfPCA$sample_group))

## If sample.group colors are set use those, otherwise set default.
pos <- grep("^sample.group_color$", names(dfDesign))

if (length(pos) == 0){
    ## Create default ##
    sample.group <- unique(dfDesign$sample.group)
    sample.group_color <- sample.group
            #library(scales)
    sample.group_color = scales::hue_pal()(length(sample.group_color))
            #sample.group_color = c("#990000", "#009900")
    
    ## set sample group colors manually
    
    dfGroupColors <- unique(data.frame(sample.group, sample.group_color))
    dfDesign <- merge(dfDesign, dfGroupColors, by.x = "sample.group", "sample.group")
    
}

dfColor <- unique(
        Obio@dfDesign[,c("sample.group", "sample.group_color")]
)

if (nrow(dfColor) == length(pcaSampleGroups)){
  
    namedColors <- dfColor$sample.group_color
    names(namedColors) <- dfColor$sample.group
  
    plotList[[tag]] <- ggplot2::ggplot(
        data = dfPCA,
        ggplot2::aes(x=PC1, y=PC2, fill = sample_group)
    ) + ggplot2::geom_vline(xintercept = 0, color = "grey", size=0.5
    ) + ggplot2::geom_hline(yintercept = 0, color = "grey", size=0.5
    ) + ggplot2::geom_point(
        size=2,
        shape = 21
    ) + ggplot2::scale_fill_manual("Sample Groups", values = namedColors
    )
} else {
    plotList[[tag]] <- ggplot2::ggplot(
        data = dfPCA,
        ggplot2::aes(x=PC1, y=PC2, fill = sample_group)
    ) + ggplot2::geom_vline(xintercept = 0, color = "grey", size=0.5
    ) + ggplot2::geom_hline(yintercept = 0, color = "grey", size=0.5
    ) + ggplot2::geom_point(
        size=2,
        shape = 21
    ) 
}




if (!is.null(PCApercentVar)){
    plotList[[tag]] <- plotList[[tag]] + ggplot2::labs(
        title = "PCA Plot", 
        x = paste0("PC1 \n ",round(100* Obio@PCApercentVar[1]),"% variability explained"),
        y = paste0("PC2 \n ",round(100* Obio@PCApercentVar[2]),"% variability explained")
    )
} else {
    plotList[[tag]] <- plotList[[tag]] + ggplot2::labs(
        title = "PCA Plot", 
        x = paste0("PC1"),
        y = paste0("PC2")
    )
}

plotList[[tag]] <- plotList[[tag]] +  ggplot2::theme_bw() + ggplot2::theme(
        axis.text.y   = ggplot2::element_text(size=8),
        axis.text.x   = ggplot2::element_text(size=8),
        axis.title.y  = ggplot2::element_text(size=12),
        axis.title.x  = ggplot2::element_text(size=12),
        axis.line = ggplot2::element_line(colour = "black"),
        panel.border = ggplot2::element_rect(colour = "black", fill=NA, size=1),
        plot.title = ggplot2::element_text(hjust = 0.5, size = 12)
)


###########################################################################
## Save plot to file                                                     ##
FNbase <- paste0("PCA12", VersionPdfExt)
FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
FNrel <- paste0("report_figures/", FNbase)
FNrelT <- paste0("report_tables/", FNbase)
    
pdf(FN)
    print(plotList[[tag]])
dev.off()
##                                                                       ##
###########################################################################
    


link <- paste0('<a href="https://biologic.crick.ac.uk/',project_id,'/pca?x_axis=PC1&y_axis=PC2', '" target="_blank">here</a>')

figCap <- paste0(
    "**Figure ",
    figureCount,
    ":** Variation in the first two PCA Dimensions. Download a pdf of this figure [here](", FNrel, "). ",
    "Further PCA dimensions are available interacively ", link, ". " 
)
 
figureCount <- figureCount + 1
    
NewChnk <- paste0(
paste0("### PCA_Plot \n"),
            "\n```{r ReferencePCA1, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
)

chnkVec <- c(
    chnkVec,
    NewChnk
)

            

## Done with PCA plot                                                        ##
###############################################################################


```


```{r, echo=TRUE, eval=TRUE, warning=FALSE, results="asis", message=F}

###############################################################################
## Add Variation estimate plot                                               ##

if (length(unique(dfDesign$dataseries)) > 1){
    independentDesignColSector <- c(
        "dataseries"
    )
} else {
    independentDesignColSector <- as.vector(NULL, mode = "character")
}

if (length(dfDesign$sample.group) > 1){
    independentDesignColSector <- c(
        independentDesignColSector,
        "sample.group"
    )
}

if (length(dfDesign$replicate) > 1){
    independentDesignColSector <- c(
        independentDesignColSector,
        "replicate"
    )
}

pos <- grep("^f_", names(dfDesign))
if (length(pos) > 0){
  independentDesignColSector <- c(
    names(dfDesign)[grep("^f_", names(dfDesign))]
  )

} else if (length(unique(dfDesign$dataseries)) > 1){
    independentDesignColSector <- c(
      "dataseries"
    )
}

###############################################################################
## Create independent variations plot                                        ##

designColSelector = unique(c(independentDesignColSector, "sample.id"))    

if (length(unique(dfDesign$sample.id)) > 42) {
    rld <- vst(dds)    
} else {
    rld <- rlog(dds)    
}
rv = rowVars(assay(rld))

## Select most variable genes
select = order(rv, decreasing = TRUE)[seq_len(length(mostVarIDs))]
dfTemp = t(assay(rld)[select, ])

pc <- prcomp(dfTemp, center=TRUE, scale=FALSE)

colDatMin = unique(dfDesign[, designColSelector])
rownames(colDatMin) = as.vector(colDatMin$sample.id)

colDatMin$sample.id <- NULL
#colnames(colData)[1] = "condition"

###############################################################################
## Get PCA Loadings                                                          ##

dfBase <- t(dfTemp)
pcaGenes = prcomp(scale(dfBase))

dfPcaGenes = data.frame(pcaGenes$x)

if (ncol(dfPcaGenes) > 10){
    dfPcaGenes <- dfPcaGenes[,1:10]
}

dfPcaGenes[[ alignmentGeneID]] <- row.names(dfPcaGenes)

#Obio@dfPCAgenes <- dfPcaGenes
dfPcaGenes <- Obio@dfPCAgenes

## Retrieve pca loadings from previous step


## Add Gene Annotation
dfAnno <- unique(Obio@dfGeneAnnotation[,c( alignmentGeneID, geneIDcolumn)])
dfAnno <- dfAnno[dfAnno[,alignmentGeneID] %in% dfPcaGenes[,alignmentGeneID], ]
dfLoad <- merge(
    dfAnno, 
    dfPcaGenes, 
    by.x = alignmentGeneID, 
    by.y = alignmentGeneID, 
    all = TRUE
)

dfLoad[is.na(dfLoad)] <- 0
dfLoad[dfLoad[,geneIDcolumn] == 0, geneIDcolumn] <- dfLoad[dfLoad[,geneIDcolumn] == 0, alignmentGeneID]

## Make Loadings Plot ##
## Plot ##
selXY <- c("contrast_P_PCA_estimatePCA1", "contrast_P_PCA_estimatePCA2", geneIDcolumn)
dfSel <- unique(dfLoad[,selXY])
#row.names(dfSel) <- dfSel$gene
dfSel[["highlight"]] <- ""
dfSel[["cat"]] <- ""
dfSel[["selX"]] <- ""
dfSel[["selY"]] <- ""
dfSel <- dfSel[order(dfSel[,selXY[1]], decreasing = FALSE), ]
dfSel[1:15, "highlight"] <- "+"
    
## Use two standard deviations for enrichment ##
twoSD <- 2*sd(dfSel[,selXY[1]])
twoSDxLine <- 2*sd(dfSel[,selXY[1]])
gSvec <- dfSel[dfSel[,selXY[1]] < -1* twoSD, geneIDcolumn]
    

dfSel <- dfSel[order(dfSel[,selXY[1]], decreasing = TRUE), ]
dfSel[1:15, "highlight"] <- "+"
gSvec <- dfSel[dfSel[,selXY[1]] >  twoSD, geneIDcolumn]
    
    
    
    ## Now dim 2
    dfSel <- dfSel[order(dfSel[,selXY[2]], decreasing = FALSE), ]
    dfSel[1:15, "highlight"] <- "+"
    
    twoSD <- 2*sd(dfSel[,selXY[2]])
    twoSDyLine <- 2*sd(dfSel[,selXY[2]])
    gSvec <- dfSel[dfSel[,selXY[2]] < -1* twoSD, geneIDcolumn]
    
    
    
    
    dfSel <- dfSel[order(dfSel[,selXY[2]], decreasing = TRUE), ]
    dfSel[1:15, "highlight"] <- "+"
    gSvec <- dfSel[dfSel[,selXY[2]] >  twoSD, geneIDcolumn]
    
    dfSel[["label"]] <- ""
    dfSel[dfSel$highlight == "+", "label"] <- dfSel[dfSel$highlight == "+", geneIDcolumn]
    
    ## Done
    tag <- "PCA_Loadings"
    
    colVec <- c("grey", "black")
    names(colVec) <- c("", "Selected")
    
    plotList[[tag]] <- ggplot2::ggplot(data=dfSel, aes_string(x=selXY[1],y=selXY[2], label="label")
    ) + geom_vline(xintercept = 0, color = "grey", size=0.5
    ) + geom_hline(yintercept = 0, color = "grey", size=0.5
    ) + geom_vline(xintercept = c(twoSDxLine, -1* twoSDxLine), color = "red", lty=2,size=0.5
    ) + geom_hline(yintercept = c(twoSDyLine, -1* twoSDyLine), color = "red", lty=2,size=0.5
    ) + geom_hline(yintercept = 0, color = "grey", size=0.5
    ) + geom_point(col="black") + scale_color_manual(values=colVec
    #) + ggtitle(paste0("PCA - Cell Level")
    ) + theme_bw(
    ) +  theme(
        #axis.text.y   = element_blank(), # element_text(size=8),
        #axis.text.x   = element_blank(), #element_text(size=8),
        #axis.title.y  = element_blank(), #element_text(size=8),
        #axis.title.x  = element_blank(), #element_text(size=8),
        axis.line = element_line(colour = "black"),
        legend.position = "none",
        panel.border = element_rect(colour = "black", fill=NA, size=1),
        #plot.title = element_text(hjust = 0.5, size = 12)
    )  #+ guides(col = guide_legend(override.aes = list(shape = 16, size = legendDotSize)))
    
    #points <-  as.vector(unique(dfSel[dfSel$highlight=="+", geneIDcolumn]))
    #plotListGene[[tag]] <- LabelPoints(plot = plotListGene[[tag]], points =points, repel = TRUE, xnudge = 0, ynudge = 0)
    
    plotList[[tag]] <-  plotList[[tag]]  + ggrepel::geom_text_repel(size = 3)
    
    
    ## Save to file ##
    FNbase <- paste0(tag, ".", selXY[1],".", selXY[2], VersionPdfExt)
    FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        plot(plotList[[tag]])
    dev.off()
    
    # dim1 <- gsub("PC_", "", xVec[i])
    # dim2 <- gsub("PC_", "", yVec[i])
    link <- paste0(
        '<a href="https://',urlString,'/',
        project_id,
        '/scatterplot?x_axis=contrast_P_PCA_estimatePCA1&y_axis=contrast_P_PCA_estimatePCA2&highlight_gene=&cat_id=ag_lab_categories__10',
        '" target="_blank">here</a>'
    )
    
    figCap <- paste0(
        "**Figure, " ,figureCount,":**Gene-level PCA plot for dimensions ", selXY[1], " and ", selXY[2], ". ",
        ". An interactive version of this figure can be found ", link, ". "
    )
   
    
    NewChnk <- paste0(
        "### PCA_Loadings \n",
        "\n```{r PCA_gene_level , results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",
        figCap,"'}\n",
        "\n",
        "\n print(plotList[['",tag,"']])",
        "\n cat(  '\n')",
        "\n\n\n```\n"   
    )
    
    chnkVec <- c(
        chnkVec,
        NewChnk
    )
    
    ## Done with genes                                                       ##
    ###########################################################################
    figureCount <- figureCount + 1


###############################################################################
## Add percent variaton per dimension plot                                   ##

tag <- "Variation_Per_PCA_Dimension"
    
## Add percent variation plot ##
PercentVariation <- round(100*Obio@PCApercentVar,1)
PCdimension <- paste0("PC", 1:length(PercentVariation))  
    
df <- data.frame(
    PercentVariation,
    PCdimension
)

legendString <- ""
if (nrow(df) > 20){
    legendString <- paste0("Only the first 20 principal components out of ",nrow(df)," are shown in the figure. ")
    df <- df[1:20,]
    PCdimension <- PCdimension[1:20]
    
}

df <- df[df$PercentVariation > 0,]

plotList[[tag]] <- ggplot(
    df, 
    aes(PCdimension, PercentVariation)
) + geom_col(
) + scale_x_discrete(limits=PCdimension) +  theme(
    axis.text.y   = element_text(size=8),
    axis.text.x   = element_text(size=8),
    axis.title.y  = element_text(size=8),
    axis.title.x  = element_text(size=8),
    axis.line = element_line(colour = "black"),
    panel.border = element_rect(colour = "black", fill=NA, size=1),
    plot.title = element_text(hjust = 0.5, size = 12)
) + theme_bw()
   
###########################################################################
## Save plot to file                                                     ##
FNbase <- paste0(tag, VersionPdfExt)
FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
FNrel <- paste0("report_figures/", FNbase)
    
pdf(FN)
    plotList[[tag]]
dev.off()
##                                                                       ##
###########################################################################
    
figCap <- paste0(
    '**Figure ',
    figureCount,
    ':** Percent of variaton explained by each principal component. ',
    legendString,
    'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. '
)
 
figureCount <- figureCount + 1
   
NewChnk <- paste0(
    "### Amount of variation explained by each PCA Dimension ",
    "\n```{r, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
    "\n",
    "\n print(plotList[['",tag,"']])",
    "\n cat(  '\n')",
    "\n\n\n```\n"   
)

chnkVec <- c(
        chnkVec,
        NewChnk
)
       
    
     
## Done                                                                      ##
###############################################################################





covar_PC_frame <- rbind(
    data.frame(
        Component=1:(nrow(pc$x)-1),
        spread(
            data.frame(
                v=names(colDatMin),
                val=NA_real_
            ),
            key=v, 
            value=val
        )
    )
)


tag <- "independentVariation"

#if (mode == "independentVariation"){        
    covar_PC_frame <- covar_PC_frame[c("Component", names(colDatMin))]
            for (i in 1:nrow(covar_PC_frame)) {
                ## old code from gavin below ##
                fit <- lm(pc$x[,i]~., data=colDatMin)
                covar_PC_frame[i,-1] <- drop1(fit, test="F")[names(covar_PC_frame)[-1],"Pr(>F)"]
                
                ## replaced 25032019 ##
                # Fit each variable individually @
            }
    
    
    plotFrame <- gather(covar_PC_frame, key=Covariate, value=p, -Component)
        plotFrame <- plotFrame[order(plotFrame$Component, decreasing = FALSE),]
        
        if (nrow(plotFrame) > 20) {
            plotFrame <- plotFrame[1:(length(names(colDatMin)) * 20), ]
        }
        
        ## Cut to 10 dimensions ##
        
        plotList[[tag]] <- ggplot(
            plotFrame, 
            aes(x=Component, y=Covariate, fill=-log10(p))) +
            geom_raster() +
            scale_fill_gradient(low="grey90", high="red") +
            theme_classic() + 
            coord_fixed() +
            scale_x_continuous( labels = unique(plotFrame$Component), breaks = unique(plotFrame$Component)
            )
        
        ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0("Independent.variation.per.pca.dimension", VersionPdfExt)
    FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(plotList[[tag]])
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    figCap <- paste0(
        '**Figure ',
        figureCount,
        ':** Independent sources of Variation per principal component. ',
        'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. '
    )
 
    figureCount <- figureCount + 1
   
    NewChnk <- paste0(
            "### Independent Source of Variation Per PCA Component ",
            "\n```{r var-per-pca-independent, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )
        
###############################################################################
## Now the plot tolarating dependent variations                              ##

tag <- "dependentVariation"
    
dependentDesignColSelector<- c(
    independentDesignColSector,
    names(Obio@dfDesign)[grep("comp_", names(dfDesign))],
    names(Obio@dfDesign)[grep("LRT_", names(dfDesign))]
)    
    
covar_PC_frame <- rbind(
            data.frame(
                Component=1:(nrow(pc$x)-1),
                spread(
                    data.frame(
                        v=names(colDatMin),
                        val=NA_real_
                    ),
                    key=v, 
                    value=val
                )
            )
        )

mode <- "dependentVariation"
    ## Do fitting individually ##
    ## Check that all selVec entries exist
        fitVars <- names(covar_PC_frame)
        fitVars <- fitVars[fitVars != "Component"]
        covar_PC_frame <- covar_PC_frame[c("Component", names(colDatMin))]


        for (i in 1:nrow(covar_PC_frame)) {
            ## old code from gavin below ##
            for (j in 1:length(fitVars)){
                corVar <- fitVars[j]

                if (length(unique(dfDesign[, corVar])) > 1) {
                    pcDim <- paste0("pc$x[,",i,"]")
                    regressionFormula <- as.formula(paste(pcDim, corVar, sep="~"))
                    fit <- lm(regressionFormula, data=colDatMin)
                    pVal <- as.vector(summary(fit)$coefficients[,4][2])
                    covar_PC_frame[i, corVar] <- pVal
                }
            }
        }    
        
    plotFrame <- gather(covar_PC_frame, key=Covariate, value=p, -Component)
    plotFrame <- plotFrame[order(plotFrame$Component, decreasing = FALSE),]

    if (nrow(plotFrame) > 20) {
        plotFrame <- plotFrame[1:(length(names(colDatMin)) * 20), ]
    }
    
       
    ## Cut to 10 dimensions ##
    
    plotList[[tag]] <- ggplot(
        plotFrame, 
        aes(x=Component, y=Covariate, fill=-log10(p))) +
        geom_raster() +
        scale_fill_gradient(low="grey90", high="red") +
        theme_classic() + 
        coord_fixed() +
        scale_x_continuous( labels = unique(plotFrame$Component), breaks = unique(plotFrame$Component)
        ) +  ggplot2::theme(
        axis.text.y   = ggplot2::element_text(size=8),
        axis.text.x   = ggplot2::element_text(size=8),
        axis.title.y  = ggplot2::element_text(size=8),
        axis.title.x  = ggplot2::element_text(size=8),
        axis.line = ggplot2::element_line(colour = "black"),
        panel.border = ggplot2::element_rect(colour = "black", fill=NA, size=1),
        plot.title = ggplot2::element_text(hjust = 0.5, size = 12)
    ) + ggplot2::labs(title = "Independent Sources of Variation per PCA Component")
        
        ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0("Dependent.permissive.variation.per.pca.dimension", VersionPdfExt)
    FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        plotList[[tag]]
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    figCap <- paste0(
        '**Figure ',
        figureCount,
        ':** Dependent-tolerant sources of Variation per principal component. ',
        'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. '
    )
 
    figureCount <- figureCount + 1
   
    NewChnk <- paste0(
            "### Dependent-tolerant Source of Variation Per PCA Component ",
            "\n```{r, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )
       
    
    
## Done                                                                      ##
###############################################################################
        

## Add PCA loadings


    ## Add genes driving this PCA dimension ## 
#     if (!is.null(Obio@plotCollection$PCA1_PCA_fitting)){
#         
#         pFit <- Obio@plotCollection$PCA1_PCA_fitting
#         
#         
#         ###########################################################################
#         ## Save plot to file                                                     ##
#         FNbase <- paste0("Variation.per.pca.dimension.", VersionPdfExt)
#         FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
#         FNrel <- paste0("report_figures/", FNbase)
#     
#         pdf(FN)
#             print(pFit)
#         dev.off()
#         ##                                                                       ##
#         ###########################################################################
#         link <- paste0(
#             "https://biologic.crick.ac.uk/",
#             project_id,
#             "/scatterplot?x_axis=contrast_P_PCA_estimatePCA1&y_axis=contrast_P_lg10p_PCA1&highlight_gene=&cat_id=ag_lab_categories__10")
#     figCap <- paste0(
#         "**Figure ",
#         figureCount,
#         ":** Genes driving principal components. ",
#         "Download a pdf of this figure [here](", FNrel, "). ",
#         "Genes driving this - and other PCA dimensions can be accessed interactively [here](", link, "). " 
#     )
#  
#     figureCount <- figureCount + 1
#    
#     NewChnk <- paste0(
#             "### Genes Driving PCA Components ",
#             "\n```{r var-per-pca-genes, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
#             "\n",
#             "\n print(pFit)",
#             "\n cat(  '\n')",
#             "\n\n\n```\n"   
#     )
#     chnkVec <- c(
#         chnkVec,
#         NewChnk
#     )
#         
#     }
# }
## Done adding PCA plots                                                     ##
###############################################################################
if (length(plotList) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}

```

## Principal Component Analysis (PCA) {`r tabVar`}

A birds eye view of your data can be obtained by looking at the results of the principal component analysis (PCA). The principal component analysis looks at your count dataset as a whole and determines how 'close' two samples are in terms of overall data structure. First of all, you want your replicated to cluster together. After that, you will be able to determine how different various sets of sample groups are.

A more detailed explanation on PCA is give in this [PCA video](https://www.youtube.com/watch?v=_UVHneBUBW0&feature=youtu.be).

```{r, echo=FALSE, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knitr::knit(text = chnkVec, quiet = T), collapse = '\n'))
```

<!--chapter:end:11-B.9.pca.characterization.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B10.Heatmap."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")
```

```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}

###############################################################################
## Load Obio object                                                          ##

## Done Loading Obio object                                                  ##
###############################################################################

dfMainData <- Obio@databaseTable
geneIDcolumn <- Obio@parameterList$geneIDcolumn
if (geneIDcolumn != "hgnc_symbol" | geneIDcolumn != "mgi_symbol"){
    geneSelCol <- "hgnc_symbol"
} else {
    geneSelCol <- geneIDColumn
}
Ntop4pcaGeneSelection <- Obio@dataTableList$Ntop4pcaGeneSelection
HmDisplayCatsFromDb <- Obio@parameterList$HmDisplayCatsFromDb
project_id <- Obio@parameterList$project_id
alignmentGeneID <- Obio@parameterList$primaryAlignmentGeneID
lab.categories.table <- Obio@parameterList$lab.categories.table



ref.cat.db.table = lab.categories.table
reportFigDir <- Obio@parameterList$reportFigDir
labname <- Obio@parameterList$labname
dfDesign <- Obio@dfDesign

############################################################################### 
## Check if lab.categories.table exists, and create if it does not           ##
dbDB <- DBI::dbConnect(
    drv = RMySQL::MySQL(), 
    user = Obio@dbDetailList$db.user, 
    password = db.pwd, 
    host = Obio@dbDetailList$host, 
    dbname = Obio@dbDetailList$ref.cat.db
)
        
query <- paste0(
    'SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = DATABASE() AND table_name = "',lab.categories.table,'";'
)
        
dfOut <-  DBI::dbGetQuery(dbDB, query)
DBI::dbDisconnect(dbDB)
        
## Create lab table if it doesn't exists ##
if (dfOut[1,1] == 0){
      dbDB <- DBI::dbConnect(
      drv = RMySQL::MySQL(), 
      user = Obio@dbDetailList$db.user, 
      password = db.pwd, 
      host = Obio@dbDetailList$host, 
      dbname = Obio@dbDetailList$ref.cat.db
  )
          
      cat_id_string <- paste0(lab.categories.table, "__1")
        
  query1 <- paste0(
      "CREATE TABLE ",lab.categories.table," AS SELECT * FROM ag_lab_categories WHERE row_names = 10"
  )
  res <-  DBI::dbGetQuery(dbDB, query1)
  
  query2 <- paste0(
      "UPDATE ",lab.categories.table," SET row_names = 1 WHERE row_names = 10;"
  )
  res <-  DBI::dbGetQuery(dbDB, query2)
  query3 <- paste0(
      "UPDATE ",lab.categories.table," SET cat_id = '",cat_id_string,"' WHERE row_names = 1;"
  )
  res <-  DBI::dbGetQuery(dbDB, query3)
  
  
  DBI::dbDisconnect(dbDB)
}
## Done                                                                      ##
###############################################################################
```


```{r, echo=T, eval=TRUE, warning=FALSE, results=F}
## Make heatmap gene list
logFCselections <- names(dfMainData)[grep("_logFC_", names(dfMainData))]
padjSelections <- gsub("_logFC_", "_padj_", logFCselections)
dfSelections <- data.frame(logFCselections, padjSelections)
dfSelections <- dfSelections[dfSelections[,"padjSelections"] %in% names(dfMainData),]
if (nrow(dfSelections) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}
```

## Gene Expression Overview {`r tabVar`}
```{r, echo=TRUE, eval=TRUE, warning=FALSE, results=F, message=F}
## Make heatmap gene list
logFCselections <- names(dfMainData)[grep("_logFC_", names(dfMainData))]
padjSelections <- gsub("_logFC_", "_padj_", logFCselections)
dfSelections <- data.frame(logFCselections, padjSelections)
dfSelections <- dfSelections[dfSelections[,"padjSelections"] %in% names(dfMainData),]
if (!exists("project_id")){
    project_id <- gsub("_designTable", "", designTB)
}
if (!exists("VersionPdfExt")){
    VersionPdfExt <- paste0(".V", gsub("-", "", Sys.Date()), ".pdf")
}
if (!exists("labname")){
    labname <- "TBD"
}
if (!exists("reportFigDir") || is.null(reportFigDir)){
    reportFigDir <- ""
}
###############################################################################
## First heatmap: Most variable genes                                        ##
HMplotList <- list()
chnkVec <- as.vector(NULL, mode="character")
if (geneIDcolumn == "mgi_symbol" | geneIDcolumn == "hgnc_symbol"){
    geneSelCol <- geneIDcolumn
} else {
    geneSelCol <- "hgnc_symbol"
}
# if (is.null(HmDisplayCatsFromDb)){
    HmDisplayCatsFromDb <- list()
# }
    
## Start with Nmost variable genes ##
if (exists("Ntop4pcaGeneSelection") && !is.null(Ntop4pcaGeneSelection) | 
    length(Ntop4pcaGeneSelection) > 3){
    dfDataTable <- dfMainData
    
    geneVec <- as.vector(unique(dfDataTable[dfDataTable[,alignmentGeneID] %in% Ntop4pcaGeneSelection,geneIDcolumn]))
} else {
    geneVec <- unique(dfMainData[dfMainData$logFC_cut_off == 1, geneIDcolumn])
    Ntop4pcaGeneSelection <- geneVec
}
cat.name <- paste0("Experiment_",project_id, "_",length(Ntop4pcaGeneSelection),"_most_variable_genes")
cat.description.text <- paste0(
    "In this gene set the ",
    length(geneVec),
    " most variable genes from ",
    labname,
    " lab experiment \\<a href=\\'https:\\/\\/biologic.crick.ac.uk\\/",
    project_id,"\\'\\>",project_id, "\\<\\/a\\> are compiled."
)
HmDisplayCatsFromDb[[cat.name]] <- list(
      "cat_type" = paste0("temp_", project_id),
      "data_source" = paste0(labname, " Lab") ,
      "cat.description.text" = cat.description.text,
      "geneVec" = geneVec,
      "catID" = NULL,
      "comparisonID" = NULL
)
###########################################################################
## Make one heatmap per comparison                                       ##
    
numextract <- function(string){ 
    stringr::str_extract(string, "contrast_\\-*\\d+\\.*\\d*_")
} 

dfSelections[["designColumn"]] <- sapply(dfSelections$padjSelections, function(x) unlist(strsplit(x, "padj_"))[2]) 

## Get design column from model file ##
designColNames <- sapply(dfSelections$padjSelections, function(x) unlist(strsplit(x, "padj_"))[2])

modelComp <- as.vector(dfModel$comparison)
designColNames[!(designColNames %in% modelComp)] <- ""

dfModelSel <- dfModel[dfModel$comparison %in% designColNames,]

dfSelections[["designColumn"]] <- ""

    if (nrow(dfModelSel) > 0){
    ## replace all entries found in dfModel to comparisonID
    for (i in 1:nrow(dfModelSel)){
        designColNames <- gsub(paste0("^", as.vector(dfModel[i, "comparison"]), "$"), as.vector(dfModel[i, "comparisonID"]),designColNames )
    }
    
    dfSelections[["designColumn"]]  <-  designColNames 
} 



for (k in 1:nrow(dfSelections)){
    dfDataTable <- dfMainData
    padjCutOff <- 0.05
        
    geneVec <- as.vector(
        unique(
            dfDataTable[dfDataTable[,as.vector(dfSelections$padjSelections[k])] < 0.05 & dfDataTable[,as.vector(dfSelections$logFCselections[k])] != 0,geneIDcolumn]
            )
    )
        
    if (length(geneVec) > 1500){
        padjCutOff <- 0.01
        
        geneVec <- as.vector(
            unique(
                dfDataTable[dfDataTable[,as.vector(dfSelections$padjSelections[k])] < 0.01 & 
                                    dfDataTable[,as.vector(dfSelections$logFCselections[k])] != 0,geneIDcolumn
                ]
            )
        )
    }
        
    ## Insert gene set into database ##
    cat.name <- paste0(
        "Experiment_",project_id, "_",dfSelections$padjSelections[k],"_smaller_than_", gsub("[.]", "_", padjCutOff)
    )
    
    cat.description.text <- paste0(
        "In this gene set the genes that exhibited an adjusted p value of less than ", 
        padjCutOff, 
        " in the differential gene expression comparsion ", 
        as.vector(dfSelections$logFCselections[k]),
        " in ",
        labname,
        " lab experiment \\<a href=\\'https:\\/\\/biologic.crick.ac.uk\\/",project_id,"\\'\\>",project_id, "\\<\\/a\\> are compiled."
      )
        
      comparisonID <- as.vector(dfSelections[k, "designColumn"])
      if (comparisonID == ""){
          comparisonID <- NULL
      }
    
      HmDisplayCatsFromDb[[cat.name]] <- list(
          "cat_type" = paste0("temp_", project_id),
          "data_source" = paste0(labname, " Lab") ,
          "cat.description.text" = cat.description.text,
          "geneVec" = geneVec,
          "catID" = NULL,
          "comparisonID" = comparisonID
      )
            
}
## Done with making heatmap list                                         ##
###########################################################################
```

```{r, echo=F, eval=TRUE, warning=FALSE, results="asis"}
###########################################################################
## Upload to database                                                    ##
## New gene categories to upload list ##
if (is.null(Obio@projectDetailList[["projectGeneCategories"]])){
    Obio@projectDetailList[["projectGeneCategories"]] <- list()
} 
Obio@projectDetailList[["projectGeneCategories"]] <- c(
    Obio@projectDetailList[["projectGeneCategories"]],
    HmDisplayCatsFromDb
)
createProjectRefDbTables <- T
if (createProjectRefDbTables){
    ## Assign category IDs ##
    ## First check if categories exist already
    ## if they do - delete those and re-assign cat id
    ## if they don't find next available cat id
    for (i in 1:length(HmDisplayCatsFromDb)){
        dbDB <- DBI::dbConnect(
            drv = RMySQL::MySQL(), 
            user = Obio@dbDetailList$db.user, 
            password = db.pwd, 
            host = Obio@dbDetailList$host, 
            dbname = Obio@dbDetailList$ref.cat.db
        )
        
        query <- paste0("SELECT * FROM ",lab.categories.table," WHERE cat_name = '", names(HmDisplayCatsFromDb)[i], "' and cat_type = '", HmDisplayCatsFromDb[[i]]$cat_type, "';")
        dfOut <-  dbGetQuery(dbDB, query)
        dbDisconnect(dbDB)
        
        if (nrow(dfOut) == 1){
            HmDisplayCatsFromDb[[i]][["cat_id"]] <- dfOut$cat_id
        } else {
          HmDisplayCatsFromDb[[i]][["cat_id"]] <- NULL
        }
        
    }
    
    
    
    ## Delete all existing tables for this project ##
    dbDB <- DBI::dbConnect(
            drv = RMySQL::MySQL(), 
            user = Obio@dbDetailList$db.user, 
            password = db.pwd, 
            host = Obio@dbDetailList$host, 
            dbname = Obio@dbDetailList$ref.cat.db
    )
    
    ## Insert categories ##
    
    UploadList <- HmDisplayCatsFromDb
    
    ## Translate geneIDs to human for non-standard species ##
    rmVec <- as.vector(NULL, mode="numeric")
    
    if (geneIDcolumn != geneSelCol){
        for (d in 1:length(UploadList)){
            convertedGeneVec <- dfMainData[dfMainData[,geneIDcolumn] %in% UploadList[[d]]$geneVec ,geneSelCol]
            convertedGeneVec <- unique(convertedGeneVec)
            convertedGeneVec <- convertedGeneVec[convertedGeneVec != ""]
            convertedGeneVec <- convertedGeneVec[convertedGeneVec != 0]
            
            if (length(convertedGeneVec > 0)){
                UploadList[[d]]$geneVec <- convertedGeneVec
            } else {
                rmVec <- c(
                  rmVec, 
                  d
                )
            }
            
        }
    }
    
    if (length(rmVec) > 0){
        UploadList <- UploadList[-rmVec]
    }
    
        
    ## Upload to database ##
    createProjectRefDbTables <- T
    if (createProjectRefDbTables){  
        for (i in 1:length(UploadList)){
            ###########################################################################
        ## check if cat name exist and delete if it does                         ##
        #library(RMySQL)
        dbDB <- DBI::dbConnect(
            drv = RMySQL::MySQL(), 
            user = Obio@dbDetailList$db.user, 
            password = db.pwd, 
            host = Obio@dbDetailList$host, 
            dbname = Obio@dbDetailList$ref.cat.db
        )
        
        query <- paste0("SELECT cat_id, cat_name FROM ",lab.categories.table, " WHERE cat_name = '",names(UploadList)[i],"'")
        
        dfTest <- dbGetQuery(dbDB, query)
        dbDisconnect(dbDB)
        ## Done                                                                  ##
        ###########################################################################
        if (nrow(dfTest) ==1){
            catID = as.vector(dfTest[1,"cat_id"])
        } else {
        
            catID <- biologicSeqTools2::add.category.to.lab.reference.table.hs(
            host = Obio@dbDetailList$host,
            pwd = db.pwd,
            user = Obio@dbDetailList$db.user,
            cat.ref.db = "reference_categories_db_new",
            cat.ref.db.table = lab.categories.table,
            gene.vector = UploadList[[i]]$geneVec,
            gene.id = geneSelCol, #options hgnc_symbol, mgi_symbol
            mm.hs.conversion.file =  paste0(hpc.mount, "Projects/reference_data/20160303.homologene.data.txt"),
            cat_name = names(UploadList)[i],
            cat_type = UploadList[[i]]$cat_type,
            data_source = UploadList[[i]]$data_source,
            comments_1 = "",
            comments_2 = "",
            new.lab.category.table = F,
            cat.description.db  = "internal_categories",
            cat.description.db.table = "category_description",
            cat.description.text = UploadList[[i]]$cat.description.text,
            lab.name = labname
        )
        }
        
        UploadList[[i]][["cat_id"]] <- catID
        
        ## Add cat id to main list
        HmDisplayCatsFromDb[[names(UploadList)[i]]][["cat_id"]] <- catID
      
        }
    }
}
## Upload to database                                                        ##
###############################################################################
```

```{r, echo=TRUE, eval=TRUE, warning=FALSE, results="asis"}
## Create Heatmaps ##
###############################################################################
## Reorder Obio@parameterList$HmDisplayCatsFromDb so that 500 var is on top  ##
pos <- grep("most_variable_genes", names(HmDisplayCatsFromDb))
if (length(pos) > 0){
  pos <- pos[1]
  newOrder <- c(
    names(HmDisplayCatsFromDb)[pos],
    names(HmDisplayCatsFromDb)[-pos]
  )
  HmDisplayCatsFromDb <- HmDisplayCatsFromDb[newOrder]
}
##                                                                           ##
###############################################################################
## Begin heatmap plotting loop ##
for (k in 1:length(HmDisplayCatsFromDb)){
    
    ## Select samples to display ##
    if (!is.null(HmDisplayCatsFromDb[[k]]$comparisonID)){
        dfSel <- unique(dfDesign[,c("sample.id", HmDisplayCatsFromDb[[k]]$comparisonID)])
        dfSel <- dfSel[dfSel[,HmDisplayCatsFromDb[[k]]$comparisonID] != "",]
        
        if (nrow(dfSel) > 1){
            sampleSelection <- paste0("norm_counts_", unique(dfSel$sample.id))    
        } else {
            sampleSelection <- paste0("norm_counts_", unique(dfDesign$sample.id))
        }
        
    } else {
        sampleSelection <- paste0("norm_counts_", unique(dfDesign$sample.id))
    }
  
    ## Check ##
    sampleSelection <- names(dfMainData)[unlist(sapply(sampleSelection, function(x) grep(x, names(dfMainData))))]
    selVec <- c(geneIDcolumn, sampleSelection )
    ## Get gene selection 
    geneSel <- HmDisplayCatsFromDb[[k]]$geneVec
    
    geneSel <- unique(geneSel)
    
    if (length(geneSel) > 2){
        dfDataTable <- dfMainData
        dfDataTable <- unique(dfDataTable[dfDataTable[, geneIDcolumn] %in% geneSel, selVec])
        
        dfHmBase <- unique(dfDataTable[,selVec])
        
        while (sum(duplicated(dfHmBase[, geneIDcolumn])) > 0){
            dfHmBase[duplicated(dfHmBase[, geneIDcolumn]), geneIDcolumn] <- paste0(
                dfHmBase[duplicated(dfHmBase[, geneIDcolumn]), 
                geneIDcolumn], "_", i
            )
            i=i+1
        }
        
        row.names(dfHmBase) <- dfHmBase[, geneIDcolumn]
        dfHmBase[, geneIDcolumn] <- NULL
        
        ## calculate row-means ##
        rowMeans <- apply(
            dfHmBase,
            1,
            function(x) mean(x)
        )
            
        rowMeans[rowMeans ==0] <- 0.001
            
        hmMax <- 4
        for (i in 1:ncol(dfHmBase)){
            dfHmBase[,i] <- log2(dfHmBase[,i] / rowMeans)
        }
            
        dfHmBase[dfHmBase > hmMax] <- hmMax
        dfHmBase[dfHmBase < -1*hmMax] <- -1*hmMax
            
            
        names(dfHmBase) <- gsub("norm_counts_", "", names(dfHmBase))
        names(dfHmBase) <- gsub("_TPM", "", names(dfHmBase))
            
        mHmBase <- data.matrix(dfHmBase)
            
        if ( nrow(mHmBase) < 51){
            showRowNames <- TRUE
        } else {
            showRowNames <- FALSE
        }
        
        ## Create heatmap plot ##
        #library(ComplexHeatmap)
       
        f1 = circlize::colorRamp2(seq(-4, 4, length = 3), c("#3060cf", "#fffbbc","#c4463a"))    
    
        anno <- as.data.frame(colnames(mHmBase))
        colnames(anno) <- "Sample"
        anno$Group <- sapply(as.vector(anno[,1]), function(x) paste0(unlist(strsplit(x, "_"))[1], "_",unlist(strsplit(x, "_"))[2]))
        
        ## Color sample groups in line with the designated sample group color ##
        #######################################################################
        ## Add sample group colors if needed
        pos <- grep("sample.group_color", names(dfDesign))
        
        if (length(pos) == 0){
            sample.group <- unique(dfDesign$sample.group)
            sample.group_color <- sample.group
            #library(scales)
            sample.group_color = scales::hue_pal()(length(sample.group_color))
            #sample.group_color = c("#990000", "#009900")
            dfGroupColors <- unique(data.frame(sample.group, sample.group_color))
            dfDesign <- merge(dfDesign, dfGroupColors, by.x = "sample.group", "sample.group")
            if (exists("Obio")){
                Obio@dfDesign <- dfDesign
            }
            
        }
        
        
        
        #library(scales)
        #hue_pal()(2)
        df <- unique(data.frame(dfDesign[,c("sample.id", "sample.group", "sample.group_color")]))
        df <- df[df$sample.id %in% colnames(mHmBase),]
        df2 <- data.frame(df[,"sample.group"])
        names(df2) <- "Group"
        
                
        GroupVec <- as.vector(unique(df$sample.group_color))
        names(GroupVec) <- as.vector(unique(df$sample.group))
        
        
        
        #df2 <- unique(data.frame(Obio@dfDesign[,c("sample.id","sample.group", "sample.group_color")]))
        #df2 <- data.frame(df2[,c("sample.group")])
        
        
        
        ha = ComplexHeatmap::HeatmapAnnotation(df = df2, col = list(Group = GroupVec))
    
        ComplexHeatmap::ht_opt(
            legend_border = "black",
            heatmap_border = TRUE,
            annotation_border = TRUE
        )
        
        hmTitle <- unlist(strsplit(names(HmDisplayCatsFromDb)[k], "_padj_"))
        if (length(hmTitle) == 2){
            hmTitle <- paste0("padj_", hmTitle[2])
        } else {
            hmTitle <- names(HmDisplayCatsFromDb)[k]
        }
        
        HMplotList[[names(HmDisplayCatsFromDb)[k]]] = ComplexHeatmap::Heatmap(
            mHmBase,
            column_title = gsub(
                    "_", 
                    " ", 
                    hmTitle
            ),
            name = paste0("HM_", k), 
            #row_km = 5,
            col = f1,
           
            show_column_names = T,
            show_row_names = showRowNames,
            border = TRUE,
            
            #Dendrogram configurations: columns
            clustering_distance_columns="euclidean",
            clustering_method_columns="complete",
            column_dend_height=unit(10,"mm"),
            
            #Dendrogram configurations: rows
            clustering_distance_rows="euclidean",
            clustering_method_rows="complete",
            row_dend_width=unit(10,"mm"),
            top_annotation = ha,
            show_heatmap_legend = TRUE
            #row_title = NULL,
            #show_row_dend = FALSE
        ) 
        
    ComplexHeatmap::ht_opt(RESET = TRUE)
        
    if (! is.null(HmDisplayCatsFromDb[[k]]$cat_id)){
        link <- paste0(
            'An interactive version of this heatmap with an option for further filtering can be found <a href="',
            "https://biologic.crick.ac.uk/",
            project_id,"/category-view/",
            HmDisplayCatsFromDb[[k]]$cat_id,'" target="_blank">here</a>.'
        )
        
    } else {
        link <- ""
    }
    
    ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0("Heatmap.", names(HmDisplayCatsFromDb)[k],VersionPdfExt)
    FN <- paste0(reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(HMplotList[[names(HmDisplayCatsFromDb)[k]]])
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    figCap <- paste0(
    '**Figure ',
    figureCount,
    ':** Heatmap showing the gene category ', gsub('_', ' ', names(HmDisplayCatsFromDb)[k]), '. ',
        'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. ',
        link
    )
    
    figureCount <- figureCount + 1 
    
    NewChnk <- paste0(
            "### HM_", names(HmDisplayCatsFromDb)[k],
            "\n```{r, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(HMplotList[['",names(HmDisplayCatsFromDb)[k],"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )
    
    chnkVec <- c(
        chnkVec,
        NewChnk
    )
    
    } ## End making heatmap 
    
## Done making heatmaps                                                      ##
###############################################################################
}
## End heatmap plotting loop
## Done                                                                      ##
###############################################################################
```



```{r, echo=FALSE, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knitr::knit(text = chnkVec, quiet = T), collapse = '\n'))
```

<!--chapter:end:12-B.10.heatmaps.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B11.DGE."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```


```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}

dfMainData <- Obio@databaseTable
geneIDcolumn <- Obio@parameterList$geneIDcolumn

if (geneIDcolumn != "hgnc_symbol" | geneIDcolumn != "mgi_symbol"){
    geneSelCol <- "hgnc_symbol"
} else {
    geneSelCol <- geneIDColumn
}

Ntop4pcaGeneSelection <- Obio@dataTableList$Ntop4pcaGeneSelection
HmDisplayCatsFromDb <- Obio@parameterList$HmDisplayCatsFromDb
project_id <- Obio@parameterList$project_id
alignmentGeneID <- Obio@parameterList$primaryAlignmentGeneID
lab.categories.table <- Obio@parameterList$lab.categories.table
ref.cat.db.table = lab.categories.table
reportFigDir <- Obio@parameterList$reportFigDir

labname <- Obio@parameterList$labname
dfDesign <- Obio@dfDesign

```


```{r, echo=T, eval=TRUE, warning=FALSE, results="asis"}
## Make heatmap gene list
logFCselections <- names(dfMainData)[grep("_logFC_", names(dfMainData))]
padjSelections <- gsub("_logFC_", "_padj_", logFCselections)

dfSelections <- data.frame(logFCselections, padjSelections)
dfSelections <- dfSelections[dfSelections[,"padjSelections"] %in% names(dfMainData),]

if (!exists("project_id")){
    project_id <- gsub("_designTable", "", designTB)
}

if (!exists("labname")){
    labname <- "TBD"
}

if (!exists("reportFigDir") || is.null(reportFigDir)){
    reportFigDir <- ""
}

if (!exists("VersionPdfExt")){
    VersionPdfExt <- paste0(".V", gsub("-", "", Sys.Date()), ".pdf")
}


if (nrow(dfSelections) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}

```

## Differential Gene Expression Analysis (DGE) {`r tabVar`}
```{r, echo=TRUE, eval=TRUE, warning=FALSE, results=F}

if (!exists("sdCutOff")){
  sdCutOff <- 2  
}

chnkVec <- as.vector(NULL, mode = "character")

MAplotList <- list()
VplotList <- list()

## Create dfMAplots ##
contrastSel <- c(
  names(dfMainData)[grep("contrast_[0-9]{1,2}", names(dfMainData))],
  names(dfMainData)[grep("contrast_D[0-9]{1,2}", names(dfMainData))]
)
MAselVec <- c(
    contrastSel[grep("lg2BaseMean", contrastSel)],
    contrastSel[grep("logFC", contrastSel)]
)

VolcanoSelVec <- c(
    contrastSel[grep("logFC", contrastSel)],
    contrastSel[grep("lg10p", contrastSel)]
)

contrastVec <- as.vector(sapply(
    contrastSel[grep("logFC", contrastSel)],
    function(x) unlist(strsplit(x, "logFC_"))[2]
))


###############################################################################
## Make MA plot function                                                     ##


makeMAplot <- function(
    dfPlotData,
    geneIDcolumn,
    topNgenes = 5,
    dotsize = 1,
    legendDotSize = 5,
    sdCutOff = 1
){
    headline <- names(dfPlotData)[grep("logFC", names(dfPlotData))]
    headline <- unlist(strsplit(headline, "logFC_"))[2]
    
    names(dfPlotData) <- gsub("contrast_[0-9]{1,2}_", "", names(dfPlotData))
    
    logFCcolName <- names(dfPlotData)[grep("logFC", names(dfPlotData))]
    padjColName <- names(dfPlotData)[grep("padj", names(dfPlotData))]
    lg2BaseMeanColName <- names(dfPlotData)[grep("lg2BaseMean", names(dfPlotData))]
    
    
    ## Now let's get these data columns out of the main data table.
    dfPlotData <- dfPlotData[dfPlotData[,lg2BaseMeanColName] > 0, ]
    
    
    ## For plotting we are using the R-package ggplot. This is a widely used, comprehensive package to make beautiful plots. More information on that here: https://ggplot2.tidyverse.org/
    
    library(ggplot2)
    
    ## Let's add an example for custom coloring here. We are going to highlight the most variable genes in this scatterplot. To do that, we need to add a color column to the plot data dataframe.
    
    ## Now let's color by significantly up-regulated genes in red, and significantly downregulated genes in blue
    
    dfPlotData[["color"]] <- "NS"
    dfPlotData[dfPlotData[, logFCcolName] > 0 & dfPlotData[, padjColName] < 0.05, "color"] <-  "Up"
    
    dfPlotData[dfPlotData[, logFCcolName] < 0 & dfPlotData[, padjColName] < 0.05, "color"] <-  "Down"
    
    ## Re-order dfPlotData for better results
    
    ## Let's have a look at the color vector
    
    
    colorVec <- c("blue", "red","black")
    
    names(colorVec) <- c("Down", "Up", "NS")
    
    
    ## And here is the resulting color vector
    colorVec <- colorVec[names(colorVec) %in% dfPlotData$color]
    
    dfPlotData$color <- factor(dfPlotData$color, levels = names(colorVec))
    dfPlotData <- dfPlotData[order(dfPlotData$color, decreasing = F), ]
    
    ## Now let's also add a label for the 10 most significantly up- and down-regulated genes.This number can be changed in the variable Nsel. Here we use the R package ggrepel.
    
    library(ggrepel)
    
    ## Let's order the data frame by log-fold change
    dfPlotData <- dfPlotData[order(dfPlotData[,logFCcolName], decreasing = T), ]
    topGenes <- as.vector(dfPlotData[1:topNgenes,geneIDcolumn])
    
    dfPlotData <- dfPlotData[order(dfPlotData[,logFCcolName], decreasing = F), ]
    bottomGenes <- as.vector(dfPlotData[1:topNgenes,geneIDcolumn])
    
    dfPlotData[["label"]] <- ""
    dfPlotData[dfPlotData[,geneIDcolumn] %in% c(topGenes, bottomGenes), "label"] <- dfPlotData[dfPlotData[,geneIDcolumn] %in% c(topGenes, bottomGenes), geneIDcolumn]
    
    yScaleMax <- max(abs(dfPlotData[,logFCcolName]))
    
    lgFCsel <- sdCutOff * sd(dfPlotData[, logFCcolName])
    ## Now let's first make the MA-plot without lables
    
    plotNoLabels <- ggplot(
        data = dfPlotData, 
        aes_string(x=lg2BaseMeanColName, y=logFCcolName, color = "color", label = "label")
    ) + geom_hline(yintercept = 0, color = "black", size=0.5
    ) + geom_hline(yintercept = c(-1*lgFCsel,lgFCsel), color = "grey", size=0.5, linetype = 2               
    ) + geom_point( shape=16, size = dotsize
    ) + scale_colour_manual(name = "Significant" ,values = colorVec
    ) + theme_bw(
    )  +  theme(
        axis.text.y   = element_text(size=8),
        axis.text.x   = element_text(size=8),
        axis.title.y  = element_text(size=8),
        axis.title.x  = element_text(size=8),
        axis.line = element_line(colour = "black"),
        panel.border = element_rect(colour = "black", fill=NA, size=1),
        plot.title = element_text(hjust = 0.5, size = 12)
    ) + ylim(-1*yScaleMax, yScaleMax
    ) + ggtitle(paste0("MA-Plot ", contrastVec[i])            
    ) + xlab(gsub("_", " ", logFCcolName)
    ) + ylab(gsub("_", " ", logFCcolName)            
    ) + guides(col = guide_legend(override.aes = list(shape = 16, size = legendDotSize))
    ) 
         
    
    ## And now let's add the labels:
    plotWithLabels <- plotNoLabels + geom_text_repel(size = 3)
    
    return(plotWithLabels)  
}

## End Make MA plot function                                                 ##
###############################################################################

###############################################################################
## Make Volcanoplot                                                          ##
makeVolcanoPlot <- function(
    dfPlotData,
    geneIDcolumn,
    topNgenes = 5,
    dotsize = 1,
    legendDotSize = 5,
    sdCutOff = 1
){
    headline <- names(dfPlotData)[grep("logFC", names(dfPlotData))]
    headline <- unlist(strsplit(headline, "logFC_"))[2]
    
    names(dfPlotData) <- gsub("contrast_[0-9]{1,2}_", "", names(dfPlotData))
    
    logFCcolName <- names(dfPlotData)[grep("logFC", names(dfPlotData))]
    lg10pColName <- names(dfPlotData)[grep("lg10p", names(dfPlotData))]
    padjColName <- names(dfPlotData)[grep("padj", names(dfPlotData))]
    
    ## Now let's get these data columns out of the main data table.
    dfPlotData <- dfPlotData[dfPlotData[,logFCcolName] != 0, ]
    
    ## Determine logFC cut-off for the Volcano Plot ##
    lgFCsel <- sdCutOff * sd(dfPlotData[, logFCcolName])
    
    dfPlotData[["color"]] <- "NS"
    dfPlotData[dfPlotData[, logFCcolName] > lgFCsel & dfPlotData[, padjColName] < 0.05, "color"] <-  "Up"
    
    dfPlotData[dfPlotData[, logFCcolName] < -1*lgFCsel & dfPlotData[, padjColName] < 0.05, "color"] <-  "Down"
    
    ## Re-order dfPlotData for better results
    
    ## Let's have a look at the color vector
    
    
    colorVec <- c("blue", "red","black")
    
    names(colorVec) <- c("Down", "Up", "NS")
    
    
    ## And here is the resulting color vector
    colorVec <- colorVec[names(colorVec) %in% dfPlotData$color]
    
    dfPlotData$color <- factor(dfPlotData$color, levels = names(colorVec))
    dfPlotData <- dfPlotData[order(dfPlotData$color, decreasing = F), ]
    
    ## And here is the resulting color vector
    colorVec <- colorVec[names(colorVec) %in% dfPlotData$color]
    
    dfPlotData$color <- factor(dfPlotData$color, levels = names(colorVec))
    dfPlotData <- dfPlotData[order(dfPlotData$color, decreasing = F), ]
    
    ## Now let's also add a label for the 10 most significantly up- and down-regulated genes.This number can be changed in the variable Nsel. Here we use the R package ggrepel.
    
    library(ggrepel)
    
    ## Let's order the data frame by log-fold change
    dfPlotData <- dfPlotData[order(dfPlotData[,logFCcolName], decreasing = T), ]
    topGenes <- as.vector(dfPlotData[1:topNgenes,geneIDcolumn])
    
    dfPlotData <- dfPlotData[order(dfPlotData[,logFCcolName], decreasing = F), ]
    bottomGenes <- as.vector(dfPlotData[1:topNgenes,geneIDcolumn])
    
    dfPlotData[["label"]] <- ""
    dfPlotData[dfPlotData[,geneIDcolumn] %in% c(topGenes, bottomGenes), "label"] <- dfPlotData[dfPlotData[,geneIDcolumn] %in% c(topGenes, bottomGenes), geneIDcolumn]
    
xMaxVal <- max(abs(dfPlotData[,logFCcolName]))
    
pVolcano <- ggplot(
        data = dfPlotData, 
        aes_string(x=logFCcolName, y=lg10pColName, color = "color",label = "label")
    ) + geom_hline(yintercept = 0, color = "black", size=0.5
    ) + geom_hline(yintercept = -1*log10(0.05), color = "grey", size=0.5, linetype = 2
    ) + geom_vline(xintercept = 0, color = "black", size=0.5
    ) + geom_vline(xintercept = c(-1*lgFCsel,lgFCsel), color = "grey", size=0.5, linetype = 2      ) + geom_point( shape=16, size = dotsize
    ) + scale_colour_manual(name = "Variability" ,values = colorVec
    
    ) + theme_bw(
    )  +  theme(
        axis.text.y   = element_text(size=8),
        axis.text.x   = element_text(size=8),
        axis.title.y  = element_text(size=8),
        axis.title.x  = element_text(size=8),
        axis.line = element_line(colour = "black"),
        panel.border = element_rect(colour = "black", fill=NA, size=1),
        plot.title = element_text(hjust = 0.5, size = 12)
    ) + xlim(-1*xMaxVal,xMaxVal
    ) + ggtitle(paste0("Volcano Plot ", contrastVec[i]) 
    ) + xlab(gsub("_", " ", logFCcolName)
    ) + ylab(gsub("_", " ", lg10pColName)            
    ) + guides(col = guide_legend(override.aes = list(shape = 16, size = legendDotSize))
    ) 

    plotVolcanoWithLabels <- pVolcano + geom_text_repel(size = 3)

return(plotVolcanoWithLabels)
}
## Done Volcanoplot                                                          ##
###############################################################################

for (i in 1:length(contrastVec)){
    ## Make MA-plot ##
    contrastVec <- as.vector(sapply(
    contrastSel[grep("logFC", contrastSel)],
    function(x) unlist(strsplit(x, "logFC_"))[2]
))
    
    selVec <- c(
        geneIDcolumn,
        names(dfMainData)[grep(paste0("_", contrastVec[i], "$"), names(dfMainData))]
    )
    
    dfPlotData <- unique(dfMainData[,selVec])
    
    tagMA <- paste0("MA_", contrastVec[i])
    
    MAplotList[[tagMA]] <- makeMAplot(
        dfPlotData = dfPlotData,
        geneIDcolumn = geneIDcolumn,
        topNgenes = 5,
        dotsize = 1,
        legendDotSize = 5,
        sdCutOff = sdCutOff
    )
    
    ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0(contrastVec[i], ".MA.plot", VersionPdfExt)
    FN <- paste0(reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(MAplotList[[tagMA]])
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    selLg2BM <- selVec[grep("lg2BaseMean_", names(dfPlotData))]
    selLogFC <- selVec[grep("_logFC_", names(dfPlotData))]
    
     
    xAxis <- selLg2BM[grep(contrastVec[i], selLg2BM)]
    yAxis <- selLogFC[grep(contrastVec[i], selLogFC)]
    
    link1 <- paste0('<a href="https://biologic.crick.ac.uk/',project_id,'/scatterplot?x_axis=',xAxis,'&y_axis=',yAxis,'&cat_id=ag_lab_categories__10" target="_blank">here</a>.')
    
    
    figCap <- paste0(
        '**Figure ',
        figureCount,
        'A:** Volcano and MA-plot Plot ',gsub('MA_', '', tagMA),'. ',
        'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. ',
        'An interactive version of this plot can be found ', link1
    )
 
    figureCount <- figureCount + 1
   
    NewChnk <- paste0(
            "### MA-Plot ",contrastVec[i],
            "\n```{r ",contrastVec[i],", results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(MAplotList[['",tagMA,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )
    
    
    ## Now the Volcano Plot ##
    tagV <- paste0("Volcano_", contrastVec[i])
    
    VplotList[[tagV]] <- makeVolcanoPlot(
        dfPlotData,
        geneIDcolumn,
        topNgenes = 5,
        dotsize = 1,
        legendDotSize = 5,
        sdCutOff = sdCutOff
    )
    
    ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0(contrastVec[i], ".Volcano.plot", VersionPdfExt)
    FN <- paste0(reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(VplotList[[tagV]])
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    selLg10p <- selVec[grep("_lg10p_", names(dfPlotData))]
    selLogFC <- selVec[grep("_logFC_", names(dfPlotData))]
    
   
    xAxis <- selLogFC[grep(contrastVec[i], selLogFC)]
    yAxis <- selLg10p[grep(contrastVec[i], selLg10p)]
    
    link2 <- paste0('<a href="https://biologic.crick.ac.uk/',project_id,'/scatterplot?x_axis=',xAxis,'&y_axis=',yAxis,'&cat_id=ag_lab_categories__10" target="_blank">here</a>.')
    
    
    figCap <- paste0(
        '**Figure ',
        figureCount,
        'B:** Volcanoplot ',contrastVec[i],'. ',
        'Download a pdf of this figure <a href="',FNrel,'" target = "_blank">here</a>. ',
        'An interactive version of this plot can be found ' , link2, '.'
    )
 
    figureCount <- figureCount + 1
   
    NewChnk <- paste0(
            "\n```{r V_",contrastVec[i],", results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(VplotList[['",tagV,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )
}

if (length(contrastVec) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}

```



```{r, echo=FALSE, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knitr::knit(text = chnkVec, quiet = T), collapse = '\n'))
```

<!--chapter:end:13-B.11.volcanoplots.ma.plots.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r partC_C10_cat_init, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "C10.catEnrHG."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```


```{r create-pca-enrichment-data, echo=T, eval=TRUE, warning=FALSE, results=F}
if (!exists("sdCutOff")){
  sdCutOff <- 2  
}


## Create enriched genes list ##
EnrichedGenesList <- list()

contrastSel <- c(
    names(dfMainData)[grep("contrast_[0-9]{1,2}", names(dfMainData))],
    names(dfMainData)[grep("contrast_D[0-9]{1,2}", names(dfMainData))]
)

DGEtagVec <- as.vector(sapply(
    contrastSel[grep("logFC", contrastSel)],
    function(x) unlist(strsplit(x, "logFC_"))[2]
))

selVec <- c(
    geneIDcolumn,
    contrastSel
)

dfAllPlots <- dfMainData[,selVec]

if (geneIDcolumn != "mgi_symbol" & geneIDcolumn != "hgnc_symbol") {
    queryGS <- "hgnc_symbol" 
} else {
    queryGS <- Obio@parameterList$geneIDcolumn
}

for (i in 1:length(DGEtagVec)){
    tag <- paste0("Enrichments_HG_", DGEtagVec[i])  
    tagGLpos <- paste0(DGEtagVec[i], "_pos") 
    tagGLneg <- paste0(DGEtagVec[i], "_neg") 
    
    selVec <- c(
        geneIDcolumn,
        names(dfAllPlots)[grep(paste0(DGEtagVec[i],"$"), names(dfAllPlots))]
    )
    
    dfPlot <- dfAllPlots[,selVec]
    pos <- grep("included", names(dfPlot))
    if (length(pos) == 0){
        dfPlot[["included"]] <- "+"
    }
    
    lgFCsel <- sdCutOff * sd(dfPlot[,grep("_logFC_", names(dfPlot))])
    
    
    dfPlot[["DGE_Status"]] <- "Unchanged"
    dfPlot[dfPlot[,grep("_logFC_", names(dfPlot))] > lgFCsel & dfPlot[,grep("_padj_", names(dfPlot))] < 0.05, "DGE_Status"] <- "Up"
    EnrichedGenesList[[tagGLpos]] <- unique(dfPlot[dfPlot$DGE_Status == "Up", geneIDcolumn])
    
    dfPlot[dfPlot[,grep("_logFC_", names(dfPlot))] < -1 *lgFCsel & dfPlot[,grep("_padj_", names(dfPlot))] < 0.05, "DGE_Status"] <- "Down"
    EnrichedGenesList[[tagGLneg]] <- unique(dfPlot[dfPlot$DGE_Status == "Down", geneIDcolumn])
} 

library(knitr)
library(ggplot2)

#save.image("temp.RData")
library(clusterProfiler)

    gmtList <- list()
     dbtableList <- list(
          # "GO-MF" = "mysigdb_c5_MF",
          "Pathways" = "mysigdb_c2_1329_canonical_pathways",
          "HallMarks" = "mysigdb_h_hallmarks"
      )
    
    
    
   
    
    for (i in 1:length(dbtableList)){
        
        dfTemp <- unique(import.db.table.from.db(
            host = Obio@dbDetailList$host,
            dbname = Obio@dbDetailList$ref.cat.db,
            dbtable = dbtableList[[i]],
            password = db.pwd,
            user = Obio@dbDetailList$db.user
        ))
        
        ## Remove duplicated entries ##
        dfTemp <- dfTemp[!(duplicated(dfTemp$cat_name)),]
        
        rmVec <- grep("temp_", dfTemp$cat_type)
        if (length(rmVec) > 0){
            dfTemp <- dfTemp[-rmVec, ]
        }
        
        dfTemp <- unique(dbcat2gmt(
            df.cat = dfTemp, # As downloaded from reference_categories_db_new database
            gene.id.column = queryGS
        ))
        
        dfTemp <- unique(dfTemp[!duplicated(as.vector(dfTemp[,1])), ])
        
        write.table(
            dfTemp,
            "temp.gmt.txt",
            row.names = F, 
            sep = "\t",
            col.names = F,
            quote = F
        )
        
        CPgmt <- read.gmt("temp.gmt.txt")
        unlink("temp.gmt.txt")
        CPgmt <- unique(CPgmt[CPgmt$gene != "", ])
        
        gmtList[[dbtableList[[i]]]] <- CPgmt
    }
    
    ## Edit collection names for plot
    names(gmtList) <- gsub("mysigdb_h_hallmarks", "HallMarkCats",names(gmtList))
    names(gmtList) <- gsub("mysigdb_", "",names(gmtList))
    names(gmtList) <- gsub("c2_1329_canonical_p", "P",names(gmtList))
    names(gmtList) <- gsub("sc_sig", "CellSig",names(gmtList))
    names(gmtList) <- gsub("cibersort_L22", "CellSig",names(gmtList))
    names(gmtList) <- gsub("c5_", "GO_",names(gmtList))
    names(gmtList) <- gsub("networkcategories", "Complexes",names(gmtList))
    
    ## Done creating gmt list
    ###########################
    
    ## Select colors ##
    library(scales)
    enrCols <- hue_pal()(length(gmtList))
    names(enrCols) <- substr(names(gmtList),1,10)



plotList <- list()
chnkVec <- as.vector(NULL, mode = "character")



for (j in 1:length(DGEtagVec)){
    posTestGeneSet <- as.vector(
        unique(
            EnrichedGenesList[[paste0(DGEtagVec[j], "_pos")]]
        )
    )
    
    
    negTestGeneSet <- as.vector(
        unique(
            EnrichedGenesList[[paste0(DGEtagVec[j], "_neg")]]
        )
    )
   
    
    ###########################################################################
    ## Create GMT file for category enrichment                               ##
    
    ###########################
    ## Create gmt list
    ## Retrieve gmt files from database
    ## Add custom gmt files
    
    
    
    
    ## Done                                                                  ##
    ###########################################################################
     
    library(clusterProfiler)
    library(ggplot2)
    library(tidyr)
        
        if (geneIDcolumn != "mgi_symbol" & geneIDcolumn != "hgnc_symbol") {
            queryGS <- "hgnc_symbol" 
        } else {
            queryGS <- geneIDcolumn
        }
        
        if (Obio@dbDetailList$host == "10.27.241.234"){
            urlString <- "biologic.thecrick.org"
        } else {
            urlString <- "biologic.crick.ac.uk"
        }
    
    colVec <- c("red", "blue")
    pvalueCutoff <- 0.5
    topMaxCat <- 10
    
    ## Get background gene set ##
    #backgroundGeneVec <- row.names(OsC[["RNA"]]@counts)
    if ((length(posTestGeneSet) >= 3) | (length(negTestGeneSet) >= 3)){
        ## Do enrichment ##
        first <- TRUE
        if (length(posTestGeneSet) >= 3){
            for (k in 1:length(gmtList)){
                    egmt <- data.frame(
                        enricher(
                            negTestGeneSet, 
                            TERM2GENE=gmtList[[k]],
                            pvalueCutoff = pvalueCutoff
                        )
                    )
                    if (!is.null(egmt)){
                        if (nrow(egmt) > 0){
                            egmt[["Collection"]] <- substr(names(gmtList)[k], 1,10)
                        }
                        if (first){
                            dfTempEnriched <- egmt    
                            first <- FALSE
                        } else {
                            dfTempEnriched <- rbind(
                                dfTempEnriched, 
                                egmt
                            )    
                        }
                        
                    }
            }
            if (nrow(dfTempEnriched) > 0){
                dfTempEnriched[["direction"]] <- "positive"
                dfTempEnriched[["log10FDR"]] <- log10(dfTempEnriched$p.adjust)
                dfTempEnriched <- dfTempEnriched[order(dfTempEnriched$log10FDR, decreasing = F),]
                dfTempEnriched <- na.omit(dfTempEnriched)
                
                if (nrow(dfTempEnriched) > topMaxCat){
                    dfTempEnriched <- dfTempEnriched[1:topMaxCat, ]
                }
            }
          
            
        } # end positive
            
            ## Now the negative side ##
            if (length(negTestGeneSet) >= 3){
            first <- TRUE
            for (k in 1:length(gmtList)){
                    egmt <- data.frame(
                        enricher(
                            posTestGeneSet, 
                            TERM2GENE=gmtList[[k]],
                            pvalueCutoff = pvalueCutoff
                        )
                    )
                    if (!is.null(egmt)){
                        if (nrow(egmt) > 0){
                            egmt[["Collection"]] <- substr(names(gmtList)[k], 1,10)
                        }
                        if (first){
                            dfTempEnrichedNeg <- egmt    
                            first <- FALSE
                        } else {
                            dfTempEnrichedNeg <- rbind(
                                dfTempEnrichedNeg, 
                                egmt
                            )    
                        }
                        
                    } 
            }
            if (nrow(dfTempEnrichedNeg) > 0){
                dfTempEnrichedNeg[["direction"]] <- "negative"
                dfTempEnrichedNeg[["log10FDR"]] <- -1*log10(dfTempEnrichedNeg$p.adjust)
                dfTempEnrichedNeg <- dfTempEnrichedNeg[order(dfTempEnrichedNeg$log10FDR, decreasing = T),]
                dfTempEnrichedNeg <- na.omit(dfTempEnrichedNeg)
                
                if (nrow(dfTempEnrichedNeg) > topMaxCat){
                    dfTempEnrichedNeg <- dfTempEnrichedNeg[1:topMaxCat, ]
                }
            }
            } # end negative
        
            
            
            ## Make plot 
            if ((nrow(dfTempEnriched) > 0) | (nrow(dfTempEnrichedNeg) > 0)){
            
            
            
            
            dfSel <- rbind(
                dfTempEnriched,
                dfTempEnrichedNeg
            )
            
            dfSel <- na.omit(dfSel)
            dfSel <- dfSel[order(dfSel$log10FDR),]
            dfSel$log10FDR <- round(dfSel$log10FDR, 2)
            
            dfSel[["Category"]] <- ""
            dfSel[dfSel$log10FDR >= 0, "Category"] <- "Enr."
            dfSel[dfSel$log10FDR < 0, "Category"] <- "Depl."
            
            for (l in 1:nrow(dfSel)){
                if (nchar(dfSel[l, "ID"]) > 30){
                    part1 <- substr(dfSel[l, "ID"], 1, 30)
                    part2 <- substr(dfSel[l, "ID"], 31, 60)
                    dfSel[l, "ID"] <- paste0(part1, " \\n", part2)
                  
                }
            }
            
            
            #dfSel$Term <- gsub("\\(GO", "\\\n\\(GO", dfSel$Term)
            
            dfSel$ID <- factor(dfSel$ID, levels = unique(dfSel$ID))
            
            
            
            plotList[[paste0("PCA_ENR_", j)]] <- ggplot(
                data=dfSel, aes(x= ID, y=log10FDR, fill=Collection, order=log10FDR)
            ) + geom_bar(stat="identity", colour="black"
            ) + coord_flip() +scale_fill_manual(values=enrCols
            ) + theme_bw(
            )  +  theme(
                axis.text.y   = element_text(size=8),
                axis.text.x   = element_text(size=8),
                axis.title.y  = element_text(size=8),
                axis.title.x  = element_text(size=8),
                axis.line = element_line(colour = "black"),
                panel.border = element_rect(colour = "black", fill=NA, size=1),
                plot.title = element_text(hjust = 0.5, size = 12)
            )  + labs(title = paste0("Comparison ", DGEtagVec[j]," enriched genes") ,y = "-log10(FDR)", x = ""
            ) + geom_hline(yintercept = c(-log10(0.05), log10(0.05)), color = "grey", size=0.5, lty=2
            ) + geom_hline(yintercept = 0, color = "black", size=0.5
            ) 
            cat("  \n")
            
            
            
            ## Save to file ##
            FNbase <- paste0("DGE_comparison_", DGEtagVec[j],".enriched.genes", VersionPdfExt)
            FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
            FNrel <- paste0("report_figures/", FNbase)
            
           
            pdf(FN)
            print(plotList[[paste0("PCA_ENR_", j)]])
            dev.off()
            
            link <- paste0(
                '<a href="https://', urlString, '/',
                Obio@parameterList$project_id,
                '/category-view?category_type=GO-BP" target="_blank">CategoryView</a>'
            )
            
            ## Create R markdown chunk ##
            figLegend <- paste0(
                '**Figure ', 
                figureCount, 
                '**: Category enrichment analysis for the top genes that have  <font color = "',colVec[2],'"> the most positive </font> and <font color = "',colVec[1],'">the most negative</font> PCA loading values in dimension ', 
               DGEtagVec[j],
                ' associated with them. Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. To view these gene sets in the context of your data, go to ',link,' and find these categories using the search box.'
            )
            figureCount <- figureCount + 1 
            
            NewChnk <- paste0(
                "### ", DGEtagVec[j],
                "\n```{r enrichr_",
                j,", results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",
                figLegend,"'}\n",
                "\n",
                "\n print(plotList[['",paste0("PCA_ENR_", j),"']])",
                "\n cat(  '\n')",
                "\n\n\n```\n"   
            )
            
            chnkVec <- c(
                chnkVec,
                NewChnk
            )
        }
            
            
            ## done with plot 
            
    } ## Done with per dimension loops
}        
      
 

if (length(plotList) > 3){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}
```

# Category Enrichments - Hypergeometric Test {`r tabVar`} 
```{r create-cat-enrichment-plot, echo=T, eval=TRUE, warning=FALSE, results='asis'}
###############################################################################
## Do category enrichment on clusters                                        ##
cat(paste(knit(text = chnkVec, quiet = T), collapse = '\n'))
## Done doing enrichment on clusters                                         ##
###############################################################################


```

<!--chapter:end:14-B.12.cat.enrichment.HG.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
# Gene Set Enrichment Analysis (GSEA) {.tabset .tabset-fade .tabset-pills}
<!-- Set PArameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r partC_C11B_pca_init, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "C11.GSE."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

#library(magrittr)

```

```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}
workdir <- Obio@parameterList$workdir
reportTableDir <- Obio@parameterList$reportTableDir
reportFigDir <- Obio@parameterList$reportFigDir

project_id <- project_id
```

```{r, echo=T, eval=TRUE, warning=FALSE, results="asis"}

if (!exists("project_id")){
    project_id <- gsub("_designTable", "", designTB)
}

if (!exists("labname")){
    labname <- "TBD"
}

if (!exists("reportFigDir") || is.null(reportFigDir)){
    reportFigDir <- ""
}

if (!exists("reportTableDir") || is.null(reportTableDir)){
    reportTableDir <- ""
}

if (!exists("VersionPdfExt")){
    VersionPdfExt <- paste0(".V", gsub("-", "", Sys.Date()), ".pdf")
}
```

Find furter background information on the Gene Set Enrichment Analysis (GSEA) and the interpretation of results can be found [here](https://www.gsea-msigdb.org/gsea/doc/GSEAUserGuideFrame.html?_Interpreting_GSEA_Results). Here the improved [fgsea algorithm](https://bioinformatics.stackexchange.com/questions/149/are-fgsea-and-broad-institute-gsea-equivalent) will be used to calculate enrichment scores. 

```{r GSEA_section_1, echo=TRUE, eval=TRUE, warning=FALSE, results=F}
if (!exists("VersionPdfExt")){
    VersionPdfExt <- paste0(".V", gsub("-", "", Sys.Date()), ".pdf")
}

if (!exists("Obio") || is.null(Obio@parameterList$workdir)){
    workdir <- getwd()
}

chnkVec <- as.vector(NULL, mode = "character")
plotList <- list()

plotListER <- list()
chnkVecER <- list()


###############################################################################
## Prepare GMT file                                                          ##

## Option A - from database ##
if (exists("Obio") && !is.null(Obio@parameterList$GSEAtables)){
  tables <- Obio@parameterList$GSEAtables
  print(
      paste0(
        "The following gene sets have been used in the GSEA analysis: ",   
        sort(paste0(names(Obio@referenceTableList), collapse = ",")), 
        "."
      )
    )
} else {
  tables <- c(
    "mysigdb_h_hallmarks",
    "mysigdb_c5_BP" #,
    #Obio@parameterList$lab.categories.table
  )
}


# #
dfRefGmt <- create.gmt.file.from.ref.data.table(
     host = Obio@dbDetailList$host,
     dbname = "reference_categories_db_new",
     dataTable = tables,
     pwd = db.pwd,
     user=Obio@dbDetailList$db.user,
     gene.id.column = "hgnc_symbol"
 )


localGmtDir <- paste0(
    Obio@parameterList$workdir,
    "GSEA/"
)

if (!exists(localGmtDir)){
  dir.create(localGmtDir)
}

#
gmtDir<- paste0(
    Obio@parameterList$workdir,
    "GSEA/"
)

gmtFileName <- paste0(
    project_id,
    ".",
    "projectGmtFile.gmt"
)

dfRefGmt <- dfRefGmt[!(duplicated(dfRefGmt[,1])),]

dfPathwayAnno <- unique(data.frame(cat_id = row.names(dfRefGmt), cat_name = dfRefGmt[,1]), url=dfRefGmt[,2])
dfRefGmt[,2] <- NULL


## transform all columns
empty_as_na <- function(x){
    if("factor" %in% class(x)) x <- as.character(x) ## since ifelse wont work with factors
    ifelse(as.character(x)!="", x, NA)
}

dfRefGmt <- dfRefGmt %>% dplyr::mutate_each(dplyr::funs(empty_as_na))


write.table(
    dfRefGmt,
    paste0(localGmtDir, gmtFileName),
    col.names = FALSE,
    row.names = FALSE,
    sep="\t",
    quote = F
)

## Done creating project gmt. file                                           ##
###############################################################################

## Option B: Load a gmt file created by other means
# FN <- "/Volumes/babs/working/boeings/Projects/goulda/adrien.franchet/472_brains_from_drosophila_larvae_RN21220/workdir/GSEA/RN21220.projectGmtFile.gmt"
# 
# dfRefGmt <- read.delim(
#     FN, 
#     header = F,
#     sep = "\t",
#     stringsAsFactors = F
# )

###############################################################################
## Run fGSEA on all log-fold changes                                         ##

selVec <- c(
    "hgnc_symbol",
    names(dfMainData)[grep(paste0("contrast_[0-9]{1,2}_logFC"), names(dfMainData))],
    names(dfMainData)[grep(paste0("contrast_D[0-9]{1,2}_logFC"), names(dfMainData))]
)

dfGSEAdata <- unique(dfMainData[, selVec])
dfGSEAdata <- na.omit(dfGSEAdata)
dfGSEAdata <- dfGSEAdata[rowSums(dfGSEAdata[,2:ncol(dfGSEAdata)]) != 0,]


## Delete old rnk files ##
if (!exists("localGmtDir")){
  localGmtDir <- "GSEA/"
}

unlink(paste0(localGmtDir, "*.rnk"))

biologicSeqTools2::create.gsea.rnk.files(
     workdir,
     df.dataTable = dfGSEAdata,
     GSEA.colum.type = "logFC",
     gene.symbol.column.name = "hgnc_symbol",
     GSEADir = localGmtDir
 )

rnkFileVec <- paste0(localGmtDir,list.files(localGmtDir)[grep(".rnk$", list.files(localGmtDir))])

plotList <- list()
chnkVec <- as.vector(NULL, mode="character")

## Create Excel output ##
fullOutFN <- paste0(project_id, "_GSEA.xlsx")
outFN <- paste0(project_id, "_GSEA.xlsx")
wb <- openxlsx::createWorkbook()

for (i in 1:length(rnkFileVec)){
    logFCcol <- unlist(strsplit(rnkFileVec[i], "GSEA/"))[2]
    logFCcol <- gsub(".rnk", "",logFCcol)
    lg10pCol <- gsub("logFC","lg10p", logFCcol)
    lg2BaseMeanCol <- gsub("logFC", "lg2BaseMean", logFCcol)
    
    tag <- gsub("contrast_[0-9]{1,2}_", "", logFCcol)
    tag <- paste0("GSEA_", tag)
    
    dfRnk <- read.delim(
        rnkFileVec[i],
        header=T, 
        sep = "\t"
    )
    
    GSEAranks <- dfRnk$logFC
    names(GSEAranks) <- dfRnk$hgnc_symbol
    
    pathways <- fgsea::gmtPathways(paste0(localGmtDir, gmtFileName))
    
    set.seed(42)
    fgseaRes <- fgsea::fgsea(
        pathways = pathways, 
        stats    = GSEAranks,
        minSize  = 10,
        maxSize  = 2500
    )
    
    
    ###########################################################################
    ## Make top-bottom 10 plot                                               ##
    N <- 10
    ## Top N up NES ##
    topNup <- as.vector(unlist(fgseaRes[order(fgseaRes$NES, decreasing = T),"pathway"]))[1:N]
    
    ## Top N down NES
    topNdown <- as.vector(unlist(fgseaRes[order(fgseaRes$NES, decreasing = F),"pathway"]))[1:N]
    
    topPathways <- c(topNup,rev(topNdown))
    
    ## Necessary to load fgsea to get the gridExtra package loaded ##
    dfTable <- fgseaRes
    dfTable$pathway <- substr(gsub("_", " ", dfTable$pathway),1,60)
    
    library(fgsea)
    pdf("temp.pdf")
   plotList[[tag]] <- plotGseaTable(
        pathways = pathways[topPathways], 
        stats = GSEAranks, 
        fgseaRes = dfTable, 
        gseaParam=0.5,
        colwidths = c(5, 3, 0, 0, 0), 
        render = FALSE
    ) 
   
   dev.off()
   unlink("temp.pdf")
    
   ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0("GSEAsummary.", tag,VersionPdfExt)
    FN <- paste0(reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(grid::grid.draw(plotList[[tag]]))
        
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    figCap <- paste0(
    '**Figure ',
    figureCount,
    ':** Top up- and downregulated GSEA gene categories for the log-FC comparison ', tag, '. ',
        'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. '
    )
    
    figureCount <- figureCount + 1 
    
    NewChnk <- paste0(
            "### ", tag,
            "\n```{r ",tag,", results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(grid::grid.draw(plotList[['",tag,"']]))",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )
    
    chnkVec <- c(
        chnkVec,
        NewChnk
    )
   
    ## Done                                                                  ##
    ###########################################################################
    
    ###########################################################################
    ## Make category plots 
    ## stump ##
    # library(fgsea)
    # plotListER[[tag]] <- plotEnrichment(pathways[[topNup[1]]],
    #            exampleRanks) + labs(title=gsub("_", " ", topNup[1]))
    ##
    ###########################################################################
    
    fgseaRes <- unique(fgseaRes[,c("pathway", "NES", "padj")])
    #fgseaRes <- fgseaRes[fgseaRes$padj < 0.05,]
    
    dfTempAnno <- dfPathwayAnno[dfPathwayAnno$cat_name %in% fgseaRes$pathway,]
    
    fgseaRes <- merge(
        dfTempAnno, 
        fgseaRes, 
        by.x = "cat_name",
        by.y = "pathway"
    )
    
    fgseaRes[["GSEA"]] <- tag
    
    fgseaRes[["Volcanoplot_Link"]] <- paste0(
        'https://biologic.crick.ac.uk/', 
        Obio@parameterList$project_id, 
        '/scatterplot?x_axis=',
        logFCcol, 
        '&y_axis=',
        lg10pCol,
        '&cat_id=',
        fgseaRes$cat_id
    )
    
    fgseaRes[["MAplot_Link"]] <- paste0(
        'https://biologic.crick.ac.uk/', 
        Obio@parameterList$project_id, 
        '/scatterplot?x_axis=',
        lg2BaseMeanCol, 
        '&y_axis=',
        logFCcol, 
        '&cat_id=',
        fgseaRes$cat_id
    )
    
    ###############################################################################
    ## Add scatterplot and heatmap urls                                          ##
    fgseaRes[["Heatmap_Link"]] <- paste0('https://biologic.crick.ac.uk/', Obio@parameterList$project_id, '/category-view/', fgseaRes$cat_id)
    
    ## Done                                                                      ##
    ###############################################################################

    
    ###########################################################################
    ## Save plot to file                                                     ##
    #library(openxlsx)
    
    FNTbase <- outFN
    FNT <- paste0(Obio@parameterList$reportTableDir, FNTbase)
    FNTrel <- paste0("report_tables/", FNTbase)
        
    
    
    sn <- gsub("GSEA_", "", substr( paste0(tag, "_GSEA"), 1, 27))
    sn <- paste0(i, "_", sn)
    openxlsx::addWorksheet(wb, sn)
    openxlsx::freezePane(wb, sn ,  firstActiveRow = 2)
    
    hs1 <- openxlsx::createStyle(
        fontColour = "#ffffff",
        fgFill = "#000000", 
        halign = "CENTER", 
        textDecoration = "Bold"
    )
    
    openxlsx::writeData(wb, sheet=sn, fgseaRes, startRow = 1, startCol = 1, headerStyle = hs1)
  
    ##                                                                       ##
    ###########################################################################        

    
    if (i==1){
        dfRes <- fgseaRes
    } else {
        dfRes <- rbind(
            dfRes, 
            fgseaRes
        )
    }
    print(paste0(tag, " done."))
}


 openxlsx::saveWorkbook(
        wb, 
        FNT,
        overwrite = TRUE
    )




if (length(plotList) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}

```
   
## Top up-/down-regulated GSEA categories {`r tabVar`}

```{r, echo=F, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knitr::knit(text = chnkVec, quiet = T), collapse = '\n'))
```
  
  

```{r GSEA_volcano, echo=TRUE, eval=TRUE, warning=FALSE, results=F}
###############################################################################
## Make Volcanoplot                                                          ##
makeVolcanoPlotGSEA <- function(
    dfPlotData,
    geneIDcolumn,
    topNgenes = 5,
    dotsize = 1,
    legendDotSize = 5,
    sdCutOff = 1
){
    headline <- names(dfPlotData)[grep("GSEA", names(dfPlotData))]
    #headline <- unlist(strsplit(headline, "logFC_"))[2]
    
    #names(dfPlotData) <- gsub("contrast_[0-9]{1,2}_", "", names(dfPlotData))
    
    logFCcolName <- names(dfPlotData)[grep("NES", names(dfPlotData))]
    lg10pColName <- names(dfPlotData)[grep("lg10p", names(dfPlotData))]
    padjColName <- names(dfPlotData)[grep("^padj$", names(dfPlotData))]
    
    ## Now let's get these data columns out of the main data table.
    dfPlotData <- dfPlotData[dfPlotData[,logFCcolName] != 0, ]
    dfPlotData[,geneIDcolumn] <- as.character(dfPlotData[,geneIDcolumn] )
    
    ## Determine logFC cut-off for the Volcano Plot ##
    lgFCsel <- sdCutOff * sd(dfPlotData[, logFCcolName])
    
    dfPlotData[["color"]] <- "NS"
    dfPlotData[dfPlotData[, logFCcolName] > lgFCsel & dfPlotData[, padjColName] < 0.05, "color"] <-  "Up"
    
    dfPlotData[dfPlotData[, logFCcolName] < -1*lgFCsel & dfPlotData[, padjColName] < 0.05, "color"] <-  "Down"
    
    ## Re-order dfPlotData for better results
    
    ## Let's have a look at the color vector
    
    
    colorVec <- c("blue", "red","black")
    
    names(colorVec) <- c("Down", "Up", "NS")
    
    
    ## And here is the resulting color vector
    colorVec <- colorVec[names(colorVec) %in% dfPlotData$color]
    
    dfPlotData$color <- factor(dfPlotData$color, levels = names(colorVec))
    dfPlotData <- dfPlotData[order(dfPlotData$color, decreasing = F), ]
    
    ## And here is the resulting color vector
    colorVec <- colorVec[names(colorVec) %in% dfPlotData$color]
    
    dfPlotData$color <- factor(dfPlotData$color, levels = names(colorVec))
    dfPlotData <- dfPlotData[order(dfPlotData$color, decreasing = F), ]
    
    ## Now let's also add a label for the 10 most significantly up- and down-regulated genes.This number can be changed in the variable Nsel. Here we use the R package ggrepel.
    
    library(ggrepel)
    
    ## Let's order the data frame by log-fold change
    dfPlotData <- dfPlotData[order(dfPlotData[,logFCcolName], decreasing = T), ]
    topGenes <- as.vector(dfPlotData[1:topNgenes,geneIDcolumn])
    
    dfPlotData <- dfPlotData[order(dfPlotData[,logFCcolName], decreasing = F), ]
    bottomGenes <- as.vector(dfPlotData[1:topNgenes,geneIDcolumn])
    
    dfPlotData[["label"]] <- ""
    dfPlotData[dfPlotData[,geneIDcolumn] %in% c(topGenes, bottomGenes), "label"] <- dfPlotData[dfPlotData[,geneIDcolumn] %in% c(topGenes, bottomGenes), geneIDcolumn]
    
xMaxVal <- max(abs(dfPlotData[,logFCcolName]))
    
pVolcano <- ggplot(
        data = dfPlotData, 
        aes_string(x=logFCcolName, y=lg10pColName, color = "color",label = "label")
    ) + geom_hline(yintercept = 0, color = "black", size=0.5
    ) + geom_hline(yintercept = -1*log10(0.05), color = "grey", size=0.5, linetype = 2
    ) + geom_vline(xintercept = 0, color = "black", size=0.5
    ) + geom_vline(xintercept = c(-1*lgFCsel,lgFCsel), color = "grey", size=0.5, linetype = 2      ) + geom_point( shape=16, size = dotsize
    ) + scale_colour_manual(name = "Variability" ,values = colorVec
    
    ) + theme_bw(
    )  +  theme(
        axis.text.y   = element_text(size=8),
        axis.text.x   = element_text(size=8),
        axis.title.y  = element_text(size=8),
        axis.title.x  = element_text(size=8),
        axis.line = element_line(colour = "black"),
        panel.border = element_rect(colour = "black", fill=NA, size=1),
        plot.title = element_text(hjust = 0.5, size = 12)
    ) + xlim(-1*xMaxVal,xMaxVal
    ) + ggtitle(paste0("GSEA NES Volcano Plot ", contrastVec[i]) 
    ) + xlab(gsub("_", " ", logFCcolName)
    ) + ylab(gsub("_", " ", lg10pColName)            
    ) + guides(col = guide_legend(override.aes = list(shape = 16, size = legendDotSize))
    ) 

    plotVolcanoWithLabels <- pVolcano + geom_text_repel(size = 3)

return(plotVolcanoWithLabels)
}
## Done Volcanoplot                                                          ##
###############################################################################


chnkVec <- as.vector(NULL, mode = "character")
plotList <- list()

tagVec <-  unique(dfRes$GSEA)

for (i in 1:length(tagVec)){
    tag <- paste0("V_",tagVec[i])
    dfPlot <- dfRes[dfRes$GSEA == tagVec[i], c("GSEA", "cat_id", "cat_name", "NES", "padj")]
    dfPlot <- na.omit(dfPlot)
    #dfPlot[["label"]] <- ""
    dfPlot <- dfPlot[order(dfPlot$NES, decreasing = T), ]
    minP <- min(dfPlot$padj[dfPlot$padj != 0])
    dfPlot[["lg10padj"]] <- 0
    dfPlot[dfPlot$padj != 0, "lg10padj"] <- -1*log10(dfPlot$padj)
    
    ## Function is defined in module C9.
    plotList[[tag]] <- makeVolcanoPlotGSEA(
        dfPlotData = dfPlot,
        geneIDcolumn = "cat_name",
        topNgenes = 5,
        dotsize = 1,
        legendDotSize = 5,
        sdCutOff = 1
    )
    
    ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0(tag, ".volcano.plot", VersionPdfExt)
    FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(plotList[[tag]])
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
    # selLg2BM<- selVec[grep("lg2BaseMean_", names(dfPlotData))]
    # selLogFC <- selVec[grep("_logFC_", names(dfPlotData))]
    # 
    #  
    # xAxis <- selLg2BM[grep(contrastVec[i], selLg2BM)]
    # yAxis <- selLogFC[grep(contrastVec[i], selLogFC)]
    # 
    # link1 <- paste0('<a href="https://biologic.crick.ac.uk/',Obio@parameterList$project_id,'/scatterplot?x_axis=',xAxis,'&y_axis=',yAxis,'&cat_id=ag_lab_categories__10" target="_blank">here</a>.')
    
    
    figCap <- paste0(
        '**Figure ',
        figureCount,
        'A:** GSEA NES Volcano Plot ',tag,'. This may plot might help to determine the overall significance of GSEA category enrichments in this experiment.',
        'Download a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>. '
        #'An interactive version of this plot can be found ', link1
    )
 
    figureCount <- figureCount + 1
   
    NewChnk <- paste0(
            "### GSEAV-Plot ",tag,
            "\n```{r ",tag,", results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )
    
      
}

if (length(plotList) > 2){
    tabVar <- ".tabset .tabset-fade .tabset-dropdown"
} else {
    tabVar <- ".tabset .tabset-fade .tabset-pills"
}

```
   
## Diagnotstic GSEA Volcano Plots {`r tabVar`}

```{r plot_GSEA_cat_overview, echo=FALSE, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knit(text = chnkVec, quiet = T), collapse = '\n'))
```
  
  
    
```{r GSEA_section, echo=TRUE, eval=TRUE, warning=FALSE, results=F}        
###############################################################################
## Retrieve GSEA Table                                                       ##

dfGdat <- dfRes




###############################################################################
## Plot top-scoring categories                                               ##

## Select top 10 categories from each ##


dfGdatS <- dfGdat
## Write table as Excel into outputs ##


    

tableCap <- paste0(
'**GSEA Result Table:** Find the GSEA normalized enrichment score (NES) and the enrichment p-value in the above table. Plot entries mean that for this category and comparison a GSEA plot is readily available for download. Download the full GSEA result table as Excel file <a href = "',FNTrel,'" target="_blank">here</a>'
)

dfGdat <- dfGdatS

```


## GSEA Result Table
```{r GSEA_table, echo=TRUE, eval=TRUE, warning=FALSE, results=T, fig.cap=tableCap}
chnkVec <- as.vector(NULL, mode = "character")

## Add sample group color ##

dfDataTable <- dfGdat
dfDataTable <- dfDataTable[dfDataTable$padj < 0.25,]

dfDataTable[["Volcanoplot_Link"]] <- paste0(
    '<a href="',
    dfDataTable[["Volcanoplot_Link"]],
    '" target="_blank">Cat Volcano Plot Link</a>'
)

dfDataTable[["MAplot_Link"]] <- paste0(
    '<a href="',
    dfDataTable[["MAplot_Link"]],
    '" target="_blank">Cat_MA Plot Link</a>'
)

dfDataTable[["Heatmap_Link"]] <- paste0(
    '<a href="',
    dfDataTable[["Heatmap_Link"]],
    '" target="_blank">Cat Heatmap Link</a>'
)


dfDataTable$cat_name <- gsub("_", " ", dfDataTable$cat_name)
dfDataTable$NES <- round(dfDataTable$NES, 3)
dfDataTable$padj <- scales::scientific(dfDataTable$padj, digits = 3)


GSEAcol <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, "Pastel1"))(length(unique(dfDataTable$GSEA)))

dfCol <- data.frame(GSEA=unique(dfDataTable$GSEA), contrastCol=GSEAcol)

dfDataTable <- merge(
    dfDataTable, 
    dfCol, 
    by.x = "GSEA",
    by.y = "GSEA"
)

dfDataTable$GSEA <- paste0(
        '<p style="background-color:',dfDataTable$contrastCol,';text-align:center">',dfDataTable$GSEA,'</p>'
    ) 

selVec <- c(
    "GSEA",
    "cat_name",         
    "NES",              
    "padj",            
    "Volcanoplot_Link", 
    "MAplot_Link",      
    "Heatmap_Link"  
)

selVec <- selVec[selVec %in% names(dfDataTable)]
dfDataTable <- unique(dfDataTable[,selVec])

dfDataTable <- dfDataTable[order(dfDataTable$NES, decreasing=F), ]

DT::datatable(
    dfDataTable,
    colnames = gsub("_", " ", names(dfDataTable)),
    rownames = FALSE,
    escape = FALSE,
    options = list(
        initComplete = htmlwidgets::JS(
            "function(settings, json) {",
            "$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});",
            "}"
        ),
    order = list( list(3, 'desc'), list(4, 'asc'))
    )
) 




```





<!--chapter:end:15-B.13.cat.enrichment.fGSEA.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set Parameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r LRT_module, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "C12.LRT."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")


```



```{r LRT_section, echo=TRUE, eval=TRUE, warning=FALSE, results=F}
chnkVec <- as.vector(NULL, mode = "character")
plotList <- list()
lrtVec <- names(Obio@DEseq2LRTtable)[grep("LRT_",names(Obio@DEseq2LRTtable))]
lrtVec <- names(Obio@DEseq2LRTtable)
lrtVec <- lrtVec[grep("lg10p", lrtVec)]


if (length(lrtVec) > 0){
for (i in 1:length(lrtVec)){
    lrtVec[i] <- unlist(strsplit(lrtVec[i], "lg10p"))[2]
    tag <- lrtVec[i]
    selVec <- c(
      Obio@parameterList$geneIDcolumn,
      paste0("contrast_L_lg2BaseMean", lrtVec[i]),
      paste0("contrast_L_lg10p", lrtVec[i])
    )
      
    dfTemp <- unique(dfMainData[,selVec])  
    names(dfTemp)[2] <- "X"
    names(dfTemp)[3] <- "Y"
    
    dfTemp <- dfTemp[!(dfTemp[,2] ==0),]
    dfTemp <- dfTemp[!(dfTemp[,3] ==0),]
    
    dfTemp <- dfTemp[order(dfTemp$Y, decreasing=T),]
    
    dfTemp[["label"]] <- ""
    dfTemp[1:10,"label"] <- dfTemp[1:10,geneIDcolumn]
    
    ###########################################################################
    ## Make plot                                                             ##
    dsize <- 1
    alpha <- I(0.5)
    shape <- 21
    legendDotSize <- 5
    
    plotList[[tag]] <- ggplot(
        data = dfTemp,
        aes(x=X, y=Y, label = label)
    #) + geom_vline(xintercept = 0, color = "grey", size=0.5
    ) + geom_hline(yintercept = c(2), color = "red", size=0.5,linetype = 2
    ) + geom_hline(yintercept = 0, color = "grey", size=0.5
    ) + geom_point(
        size=dsize,
        shape = shape,
        alpha = alpha,
        fill = "grey"
    ) + labs(
        title = paste0("LRT padj vs. BaseMean ", lrtVec[i]), 
        x = paste0("Base Mean/Intensity", lrtVec[i],")"),
        y = paste0("-log10(LRT-pval ", lrtVec[i],")") 
    ) + theme_bw(
    ) +  theme(
        axis.text.y   = element_text(size=8),
        axis.text.x   = element_text(size=8),
        axis.title.y  = element_text(size=12),
        axis.title.x  = element_text(size=12),
        axis.line = element_line(colour = "black"),
        panel.border = element_rect(colour = "black", fill=NA, size=1),
        plot.title = element_text(hjust = 0.5, size = 12)
        #) + scale_fill_manual(values=c("#999999", "#E69F00")
    ) + guides(col = guide_legend(override.aes = list(shape = 16, size = legendDotSize))
    ) 
         
    
    ## And now let's add the labels:
    plotList[[tag]] <- plotList[[tag]] + ggrepel::geom_text_repel(size = 3)
    ## Done making plot 
    ###########################################################################
  
    ###########################################################################
    ## Save plot to file                                                     ##
    FNbase <- paste0(lrtVec[i], ".LRTplot", VersionPdfExt)
    FN <- paste0(Obio@parameterList$reportFigDir, FNbase)
    FNrel <- paste0("report_figures/", FNbase)
    
    pdf(FN)
        print(plotList[[tag]])
    dev.off()
    ##                                                                       ##
    ###########################################################################
    
   link <- paste0("https://biologic.crick.ac.uk/",Obio@parameterList$project_id,"/scatterplot?x_axis=",selVec[2],"&y_axis=",selVec[3],"&cat_id=ag_lab_categories__10")
    
    figCap <- paste0(
        '**Figure ',
        figureCount,
        '** -log10 p-value of the likelihood ratio rest vs. Base Mean/Intensity plot. Donwolad a pdf of this figure <a href="',FNrel,'" target="_blank">here</a>',
        'An interactive version of this figure can be found <a href="',link,'" target="_blank">here</a>. '
    )
 
    figureCount <- figureCount + 1
    
    NewChnk <- paste0(
        paste0("### ",tag," \n"),
            "\n```{r, results='asis', echo=F, eval=TRUE, warning=FALSE, fig.cap='",figCap,"'}\n",
            "\n",
            "\n print(plotList[['",tag,"']])",
            "\n cat(  '\n')",
            "\n\n\n```\n"   
    )

    chnkVec <- c(
        chnkVec,
        NewChnk
    )
}
}

if (length(lrtVec) > 0){
    if (length(plotList) > 2){
        tabVar <- ".tabset .tabset-fade .tabset-dropdown"
    } else {
        tabVar <- ".tabset .tabset-fade .tabset-pills"
    }
    
    sectionDisplay <- paste0("# Likelyhood-ratio Test Results (LRT) {",tabVar, "}")
    
} else {
    sectionDisplay <- ""
}

```


`r sectionDisplay`

```{r lrt_plot, echo=FALSE, eval=TRUE, warning=FALSE, results="asis"}
cat(paste(knitr::knit(text = chnkVec, quiet = T), collapse = '\n'))
```


<!--chapter:end:16-B.14.LRT.plots.Rmd-->

```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```
<!-- Set Parameters Module -->
<!-- Set the chnkPrefix to make all chunks unique in the overall folder -->
```{r docu_module, echo=FALSE, eval=TRUE, warning=FALSE}
chnkPrefix <- "B15.Documentation."
VersionPdfExt <- VersionPdfExt <- paste0(".",chnkPrefix,"V", gsub("-", "", Sys.Date()), ".pdf")

```

# Project Summary


```{r display_text_2, eval=T, results="asis"}
cat(paste0('## Check Positive Controls - Individual Genes','\n','\n',
'In order to get an overview over your latest sequencing results, you might want to look for the performance of individual genes that may serve as a positive control. You can do this by entering an official gene name into the search box in the  [GeneView section](https://biologic.crick.ac.uk/',Obio@parameterList$project_id,'/gene-view). Genes that were detected in this experiment will be suggested to you after starting to type. If a gene is not suggested, it was not detected in this experiment. The gene result on display will give you information on the amount of reads detected for the gene in question (TPM value plot. TPM values give you read-counts, normalized for the gene length and the library size - see slideshow for a detailed definition).','\n','\n',
           
'## Check Positive Controls - Gene Categories
Next you may wish to view your latest dataset through the lens of a gene category that captures all genes relevant to the process you are investigating. A number of gene categories represented in your experiment can be found in the CategoryView section, lower panel. Reference categories are organized by category class and for most reference category a weblink is given to inform you about the origin of that gene category dataset (Category Description column). Click to the category name in order to view the performance of the genes in that category in the context of your experiment. You will be presented by default with a heatmap, but you may change this to a 2D scatterplot in which the category genes are highlighted by using the pull-down menu given underneath the heatmap depiction. In addition, a table is given informing you about the log-fold changes recorded for genes in this category. You may click on individual tiles in the heatmap to be taken to the individual results for the gene.','\n','\n',
           
'It might make sense to review your data in the context of results your lab has obtained in the past or in the context of published data. In order to that bioinformatics will add gene categories to either your lab categories selection or to the selection "this experiment" in CategoryView, lower table.','\n','\n',
           
'## Result Table Download',
'\n','\n',

'<a href="report_tables/"',Obio@parameterList$project_id,'_GSEA.xlsx"  target="_blank">Download Result Table</a>','\n','\n',
'<a href="report_tables/"',Obio@parameterList$project_id,'.result.table.xlsx"  target="_blank">Download Metacore Input File</a>','\n','\n',


'## Bioinformatics Method Summary ','\n',
'Sequencing was performed on an ',Obio@parameterList$machine,' machine. The "Trim Galore!" utility version 0.4.2 was used to remove sequencing adaptors and to quality trim individual reads with the q-parameter set to 20 (1). Then sequencing reads were aligned to the mouse genome and transcriptome (Ensembl ', Obio@parameterList$genome, Obio@parameterList$release,') using RSEM version 1.3.0 (2) in conjunction with the STAR aligner version 2.5.2 (3). Sequencing quality of individual samples was assessed using FASTQC version 0.11.5 (4) and RNA-SeQC version 1.1.8 (5). Differential gene expression was determined using the R-bioconductor package DESeq2 version 1.14.1(6,7). Gene set enrichment analysis (GSEA) was conducted as described in Subramanian et al (8).','\n','\n',
           
           
           
'REF 1: https://www.bioinformatics.babraham.ac.uk/projects/trim_galore/ (retrieved 03-05-2017)','\n','\n',
           
'REF 2: Bo Li and Colin N Dewey (2011). RSEM: accurate transcript quantification from RNA-Seq data with or without a reference genome. BMC Bioinformatics 12:323','\n','\n',
           
'REF 3 : Dobin A, Davis CA, Schlesinger F, Drenkow J, Zaleski C, Jha S, Batut P, Chaisson M and Gineras TR. (2012) STAR: ultrafast universal RNASEQ aligner. Bioinformatics. 29. 15-21','\n','\n',
           
'REF 4: https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ (retrieved 03-05-2017)','\n','\n',
           
'REF 5: DeLuca et al (2012). RNA-SeQC: RNA-seq metrics for quality control and process optimization. Bioinformatics (28) 1530-1532','\n','\n',
           
'REF 6: Love MI, Huber W and Anders S (2014). Moderated estimation of fold change and dispersion for RNA-seq data with DESeq2. Genome Biology, 15, pp. 550.','\n','\n',
           
'REF 7: R Development Core Team (2008). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. ISBN 3-900051-07-0, URL http://www.R-project.org.','\n','\n',
           
'REF 8: Subramanian et al.(2005), Gene set enrichment analysi: A knowledge-based approach for interpreting genome-wide expression profiles. PNAS (43) 15545-15550.','\n','\n'
))
```

<!--chapter:end:17-B.15.bulkRNAseq.documentation.Rmd-->

---
output: 
    html_document:
        code_folding: hide
        df_print: tibble
        highlight: default
        theme: paper
        toc: true
        toc_depth: 5
        toc_float: true
        css: src/style/style.css

always_allow_html: yes
---
```{r include=FALSE, cache=FALSE}
## This is to load the biologic Robj.
# The biologic R-object is expected in data/biologic_active_object

###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

# Check processes
# lsof /dev/pts/*

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
#
# remotes::install_github("rstudio/renv")

if (!file.exists("../../bulkRNAseq_workflow/renv.lock")){
  renv::init()
} else {
  renv::restore(
      project = "../../bulkRNAseq_workflow",
      prompt=FALSE
  )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################

print(getwd())

# Scripts will run for now in projectDir/scripts/bulkrnaseq_workflow
check <- list.files("../../../data/biologic_active_object/")
check <- check[grep("bioLOGIC.Robj$", check)]

if (length(check) == 0){
    stop(paste0("Check if a biologic object has been initiated and is stored in [projectDir]/data/biologic_active_object/. "))
} else if (length(check) > 1){
    stop(paste0("More than one .biologic.Robj file is present in [projectDir]/data/biologic_active_object/. Please move the outdated biologic object into another folder"))
} else {
    library(biologicSeqTools2)
    load(paste0("../../../data/biologic_active_object/", check))
}
```

```{r setup, include=FALSE}
###############################################################################
## Recommended R-version                                                     ##

# module purge;source /camp/stp/babs/working/software/modulepath_new_software_tree_2018-08-13;module load pandoc/2.2.3.2-foss-2016b;ml R/4.0.3-foss-2020a

## Done                                                                      ##
###############################################################################


###############################################################################
## Set the environment                                                       ##

# if (!require("remotes")){
#   install.packages("remotes")
# }
# 
# remotes::install_github("rstudio/renv")

if (!file.exists("renv.lock")){
    renv::init(
    )
} else {
    renv::restore(
        #project = "../../",
        prompt=FALSE
    )
}


#renv::install("bioc::DESeq2")
#renv::install("bioc::clusterProfiler")
#renv::install("decusInLabore/biologicSeqTools2")
#renv::install("jokergoo/ComplexHeatmap")

## Done                                                                      ##
###############################################################################


###############################################################################
## Set knitr options                                                         ##

knitr::opts_chunk$set(
    tidy = F,
    tidy.opts = list(width.cutoff = 120),
    message = FALSE,
    warning = FALSE,
    #dev="png"
    dev = "png", dev.args = list(type = "cairo-png"),
    fig.width=7,  # default setting is 7 
    fig.height=5,  # default setting is 5
    fig.retina=1  # default setting is 1
    #fig.path = "images/"
)

##                                                                           ##
###############################################################################
```

```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}
###############################################################################
## load biologic object                                                      ##

source("load.biologic.robj.R")

## Done                                                                      ##
###############################################################################

###############################################################################
## Set report variables                                                      ##

# Obio@parameterList$workdir - available 
Obio@parameterList[["figureCount"]] <- 1
Obio@parameterList[["tableCount"]] <- 1
Obio@parameterList[["upload.results.to.database"]] <- TRUE
Obio@parameterList[["shinyBaseServerURL"]] <- "shiny-bioinformatics.crick.ac.uk"
Obio@parameterList[["urlString"]] <- "biologic.crick.ac.uk"

## Done setting report variables                                             ##
###############################################################################

###############################################################################
## In this case - set project params                                         ##
Obio@documentationParams <- list(
    "title" = "Transcriptomic analysis of Sh2d2a knockout regulatory T cells following a time-course of anti-CD3 stimulation",
    "subtitle" = "David M Briscoe Lab; Literature Bulk-rna Seq GSE134515",
    "abstract" = "CD4+CD25high regulatory T cells were FACS-sorted from Sh2d2a knockout and wild type mice and activated with 1 µg/ml anti-CD3 (clone: 145-2C11) for 2, 8 and 24 hours. Experiments were performed in duplicate conditions."
)

## Done                                                                      ##
###############################################################################

###############################################################################
## Set password for database access                                          ##
###############################################################################
## Set database password                                                     ##
# Get database password from file

if (dir.exists("/Volumes/babs/working/boeings/")){
    hpc.mount <- "/Volumes/babs/working/boeings/"
} else if (dir.exists("Y:/working/boeings/")){
    hpc.mount <- "Y:/working/boeings/"
} else if (dir.exists("/camp/stp/babs/working/boeings/")){
    hpc.mount <- "/camp/stp/babs/working/boeings/"
} else {
    hpc.mount <- ""
}

## Loading the BABS password ##
if (Obio@parameterList[["upload.results.to.database"]]){
    FN <- paste0(hpc.mount, "Projects/reference_data/pwd_folder/babs.txt")
    dbTable <- read.delim(
      FN,
      header = F,
      sep = "\t",
      stringsAsFactors = F
    )
}

 Obio@dbDetailList[["db.pwd"]] <- as.vector(dbTable[1,1])
##                                                                           ##
###############################################################################
## Done                                                                      ##
###############################################################################

###############################################################################
## Save biologic object with additional variables                            ##

source("save.biologic.robj.R")

## Done                                                                      ##
###############################################################################

```


<!-- Essential: Load Obio Data Object ---------------------------------------->
```{r child = '01-B.1.set.parameters.Rmd', eval=TRUE}
```

<!-- Optional set data access parameters for R-users ------------------------->
```{r child = '02-B.1.2.set.data.access.parameters.for.R.data.import.Rmd', eval=TRUE}
```

<!-- Optional: Retrieve reference gene sets----------------------------------->
```{r child = '03-B.2.retrieve.reference.gene.sets.Rmd', eval=TRUE}
```

<!-- Essential: Add RSEM count matrix and TPM matrix ------------------------->
```{r child = '04-A.1.add.data.to.analysis.object.Rmd', eval=TRUE}
```

<!-- Optional: Add alignment summary to report-------------------------------->
<!-- Modify - copy nf-core outputs            -------------------------------->
```{r child = '05-B.3.alignment.summary.Rmd', eval=TRUE}
```

<!-- Optional 4: (creates output only): Analysis Guide -->
```{r child = '06-B.4.analysis.guide.Rmd', eval=TRUE}
```

<!-- Optional 5: (creates output only): Display design table -->
```{r child = '07-B.5.display.design.table.and.formula.table.Rmd', eval=TRUE}
```

<!-- Essential: DEseq2 analysis -->
<!-- Creates PCA -->
```{r child = '08-B.6.DEseq2.PCA.Rmd', eval=TRUE}
```

<!-- Essential: DEseq2 analysis -->
<!-- Creates LRT and DGE analyses -->
```{r child = '09-B.7.DEseq2.LRT.DGE.Rmd', eval=TRUE}
```

<!-- Optional 8: (creates output only): Sample Characterization -->
<!-- Coefficient of variation and cluster dendrogram -->
```{r child = '10-B.8.sample.characterization.Rmd', eval=TRUE}
```

<!-- Optional 9: (output only): PCA sample characterization Chapter/Module -->
```{r child = '11-B.9.pca.characterization.Rmd', eval=TRUE}
```

<!-- Optional 10: (output only): Gene Category Heatmaps Chapter/Module -->
```{r child = '12-B.10.heatmaps.Rmd', eval=TRUE}
```

<!-- Optional 11: (output only): MA- and Volcanoplot Chapter/Module -->
```{r child = '13-B.11.volcanoplots.ma.plots.Rmd', eval=TRUE}
```

<!-- Optional 12: (output only): Category Enrichment Hypergeometric Test Chapter/Module -->
```{r child = '14-B.12.cat.enrichment.HG.Rmd', eval=TRUE}
```

<!-- Optional 13: (output only): Category Enrichment fGSEA Method Chapter/Module -->
```{r child = '15-B.13.cat.enrichment.fGSEA.Rmd', eval=TRUE}
```


<!-- Optional 12: (output only): LRT Analysis Chapter/Module -->
```{r child = '16-B.14.LRT.plots.Rmd', eval=TRUE}
```

<!-- Optional 13: (output only): Documentation Chapter/Module -->
```{r child = '17-B.15.bulkRNAseq.documentation.Rmd', eval=TRUE}
```

```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}
###############################################################################
## Save Obio Object                                                          ##

## Remove password from file
Obio@dbDetailList[["db.pwd"]] <- NULL

source("save.biologic.robj.R")

##                                                                           ##
###############################################################################


```






```{r, echo=FALSE, eval=TRUE, warning=FALSE, results=F}

## Try to retrieve project data from db ##
db.pwd2 <- "zU3ufd9L"
db.user2 <- "reader"
host2 <- "clvd1-db-u-p-17.thecrick.org"
projectParams <- Obio@documentationParams

tryCatch({
    dbDB = DBI::dbConnect(
        drv = RMySQL::MySQL(), 
        user = db.user2, 
        password = db.pwd2, 
        host = host2, 
        dbname = "clarity_shadow"
    )
    dfProposal <-  DBI::dbGetQuery(
        dbDB, 
        paste0("SELECT * FROM clarify_asf_proposals WHERE project_name ='",Obio@projectDetailList$lims.id,"'")
    )
    dbDisconnect(dbDB)
}, error = function(x) {
    message("Project Database could not be reached or has no entry in Obio@parameterList$lims.id for this analysis.")
})

###############################################################################
## Helper
firstup <- function(x) {
    substr(x, 1, 1) <- toupper(substr(x, 1, 1))
    x
}
##
###############################################################################


if (exists("dfProposal")){
    if (!is.na(dfProposal[1,"ProjectAlias"]) & dfProposal[1,"ProjectAlias"] != ""){
        projectParams[["title"]] = paste0(dfProposal[1,"ProjectAlias"], " - ", dfProposal[1,"project_name"])
    }
    
    if (!is.na(dfProposal[1,"project_user"]) & dfProposal[1,"project_user"] != ""){
        labString <- firstup(dfProposal[1,"user_lab"])
        labString <- substr(labString, 1, (nchar(labString) - 1))
      
        projectParams[["subtitle"]] = paste0(labString, " Lab - ", dfProposal[1,"project_user"])
        projectParams[["subtitle"]] <- gsub("^ Lab - ", "", projectParams[["subtitle"]])
        
    }
    
    if (!is.na(dfProposal[1,"proposal_text"]) & dfProposal[1,"proposal_text"] != ""){
        projectParams[["abstract"]] = dfProposal[1,"proposal_text"]
       
        
    }
}
   
## Escape all special characters
projectParams <- lapply(
  projectParams, function(x) 
  #gsub("([.|()\\^{}+$*?]|\\[|\\])", "\\\\\1", x)
  gsub("([.|()/\\^{}+$*?]|\\[|\\])", " ", x)
) 

projectParams <- lapply(
  projectParams, function(x) 
  #gsub("([.|()\\^{}+$*?]|\\[|\\])", "\\\\\1", x)
  gsub("\\\n", " ", x)
) 


```



## Documentation
```{r documentation, eval=TRUE, echo=F, results=T, error=F}
#renv::snapshot(prompt=FALSE)

sessionInfo()
```

---
title: "`r projectParams$title`"
subtitle:  "`r projectParams$subtitle`"
author:
    - Bioinformatics: Stefan Boeing^[The Francis Crick Institute, stefan.boeing@crick.ac.uk]
date: 'Compiled: `r format(Sys.Date(), "%B %d, %Y")`'

abstract: |
    "`r projectParams$abstract`"


---

<!--chapter:end:Main_Analysis.Rmd-->


<!--chapter:end:old.bookdown-demo.Rmd-->

